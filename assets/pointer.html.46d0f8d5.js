import{ac as n,A as s,B as a,ae as p}from"./framework.a879f165.js";const t={},e=p(`<p>要想理解指针，就必须先理解不同的数据类型在内存中的分布，内存具有容量大小，比如 2G、4G、8G 等等，其中每一个段或区都代表一个字节，那么作为一个典型计算机内存系统，其中每个字节都有一个地址，地址是按序增长的。当定义一个变量时，计算机就会在内存中为这个变量分配一些内存空间，具体的空间大小取决于变量的数据类型，还取决于编译器。比如<code>int</code>类型的变量系统会为它分配 4 个字节的空间大小，那么地址就可能是<code>201</code>到<code>204</code>，<code>201</code>就是该变量的起始地址，当对该变量进行操作时就会去查找变量在内存中的起始地址，然后在这个地址中做相关操作</p><p>只要拥有了某个变量的地址，就可以直接进行操作。指针就是这样的东西，它是一种特殊的变量，和普通变量不同的是，指针变量存储的是内存地址，而普通变量存储的只是一个实际的值。站在内存的角度来看，通过地址就能访问数据，那么指针也就能直接通过地址操作数据</p><p>声明指针变量和普通变量一样，但前面要加上<code>*</code>来表示它是一个指针变量，当然指针也是具有类型的，存储不同类型的变量地址也要用对应的指针类型</p><p>使用指针之前必须先了解两个运算符：</p><ul><li><code>&amp;</code> - 用于返回变量的地址</li><li><code>*</code> - 声明指针变量或者解析地址得到对应的值，这也叫解引用</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 声明指针变量</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token comment">// 声明普通变量</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">// 取出 a 的地址交给指针变量 p</span>
p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> 
<span class="token comment">// 解引用</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token comment">// 它和指针访问是等效的</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对指针变量的赋值必须是一个同数据类型变量的地址，所以数组名、带地址运算符<code>&amp;</code>的变量名、另一个指针都可以进行赋值</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>&amp;</code>运算符的操作数必须是变量，取出来的地址大小取决于编译器和系统架构。在 32 位编译器中，指针的大小永远都是 4 字节，而 64 位编译器则永远都是 8 字节。因为 32 位处理器有 2<sup>32</sup> 个字节，如果想要指针存储这 2<sup>32</sup> 个地址，只需要 4 个字节就正好把内存中所有的地址表示完，表示的内存大小为 4GB，其它位数的处理器以此类推。内存地址属于无符号的整型，是 4 个字节的数据，通常使用十六进制来表示</p></div><h2 id="指针的运算" tabindex="-1"><a class="header-anchor" href="#指针的运算" aria-hidden="true">#</a> 指针的运算</h2><p>指针可以参与有限的计算：</p><ul><li>递增</li><li>递减</li><li>增加一个整数</li><li>减少一个整数</li></ul><p>指针的运算实际上是地址的运算，整数会与指针类型占用的字节大小相乘，把结果和初始值相加减，就得到了下一个地址：<code>&lt;int&gt;(p1 ± p2)/sizeof(int)</code>。这些运算除非在数组上进行，否则没什么意义，因为可能是一个垃圾值</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">偏移量</p><p>一个指针减去一个指针会得到两个地址之间的偏移量</p></div><p>简单来说指针的值以所执行对象的数据类型大小为单位进行改变</p><h2 id="指针的指针" tabindex="-1"><a class="header-anchor" href="#指针的指针" aria-hidden="true">#</a> 指针的指针</h2><p>指针变量本身也会占用内存空间，它自己也会有内存地址，因此可以声明一个特殊类型的指针变量来指向另一个指针</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>foo<span class="token punctuation">;</span>
<span class="token comment">// 指向指针</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>q <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 123</span>
<span class="token comment">// 在解引用的时候，同样需要一个额外的\`*\`，否则得到的是另一个指针的地址</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上一个示例是一个二级指针，它本身也具有地址，因此可以使用更加特殊的指针变量来指向它，只需要在声明时额外的增加<code>*</code>，在进行解引用时也是同样如此</p><h2 id="数组与指针" tabindex="-1"><a class="header-anchor" href="#数组与指针" aria-hidden="true">#</a> 数组与指针</h2><p>声明数组时，会按照元素类型大小分配一块连续的内存空间，每个元素都对应一个地址。数组名本身就表达地址，并且返回的是第一个元素的地址，也叫基地址。那么对于一个叫<code>arr</code>的数组，<code>arr</code>和<code>&amp;arr[0]</code>是等效的，但数组的元素表达的是变量，需要使用取地址符</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// int *p = &amp;arr[0]; 和下面这句是一样的</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>[]</code>运算符会自动计算数组元素的地址并解引用，但不仅仅可以对数组做，也可以对指针变量做</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果把一个数组当作参数传递给一个函数，这个函数接收的也是一个指针</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在大多数情况下，指针和数组访问被视为相同的，但是有一些例外：</p><ul><li>sizeof <ul><li><code>sizeof(array)</code>会返回数组中所有的元素字节大小</li><li><code>sizeof(pointer)</code>会返回指针类型大小</li></ul></li><li>&amp; <ul><li><code>&amp;array</code>是<code>&amp;array[0]</code>的别名，返回第一个元素的地址</li><li><code>&amp;pointer</code>返回指针的地址</li></ul></li><li>指针变量可以赋值，数组不能</li></ul><div class="custom-container tip"><p class="custom-container-title">字符串</p><p>因为字符串本质上是一个字符数组，所以字符串传递的都是首字符的地址</p></div><h2 id="函数与指针" tabindex="-1"><a class="header-anchor" href="#函数与指针" aria-hidden="true">#</a> 函数与指针</h2><p>如果有一个变量在<code>main</code>中初始化，而需要传给另一个函数进行改写，同时这个函数不具备任何返回值，使用指针可以轻松做到</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token comment">// 声明指针变量参数</span>
<span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 解引用改写</span>
  <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 取出 a 的地址传给函数</span>
  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这个函数定义的普通变量，只是一个值传递，而不是引用传递，自然就无法实现</p><p>指针也可以指向一个函数，函数在内存中也占用部分存储空间，所以它也有一个起始地址，那指针能够指向函数就不是那么令人意外了</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 声明指向函数的指针</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 函数名即代表地址</span>
  p <span class="token operator">=</span> foo<span class="token punctuation">;</span>
  <span class="token comment">// 解引用函数地址并调用</span>
  <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么声明成<code>(*p)()</code>这种形式，它原本是这种<code>*p()</code>样子，只是运算符优先级会在这里起作用，所以只能通过<code>(*p)()</code>来修改优先级</p><p>指针变量的类型代表函数的返回值类型，<code>(*p)</code>后面的<code>()</code>表示它是一个函数类型的指针，如果有参数，则指定参数类型，仅此而已</p><p>指针和函数的这种应用方式可以实现回调函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The callback function is executed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="空指针和野指针" tabindex="-1"><a class="header-anchor" href="#空指针和野指针" aria-hidden="true">#</a> 空指针和野指针</h2><p>如果指针没有初始化任何内容（甚至不是<code>NULL</code>）的指针成为野指针，它会指向乱七八糟的非空垃圾值。如果不想为指针分配垃圾，可以赋值为<code>NULL</code>，它就是一个不指向任何内容的指针</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 现在是一个野指针</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token comment">// 不指向任何内容</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="void-指针" tabindex="-1"><a class="header-anchor" href="#void-指针" aria-hidden="true">#</a> void 指针</h2><p><code>void</code>指针是一种特殊的指针，它不和任何数据类型进行关联，因为它可以转换为任意类型的指针，所以它能够指向任何类型。它不能被解引用，但可以对它进行类型转换来实现，同时它不能够进行任何算术，因为没有值和大小</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token operator">&amp;</span>foo<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它也有很多优点，允许<code>malloc()</code>和<code>calloc()</code>分配任意数据类型的内存，还能实现通用的函数</p>`,46),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","pointer.html.vue"]]);export{r as default};
