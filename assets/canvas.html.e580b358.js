import{ac as n,A as s,B as a,ae as t}from"./framework.a879f165.js";const p={},e=t(`<div class="custom-container info"><p class="custom-container-title">相关信息</p><ul><li>HTML</li><li>CSS</li><li>JavaScript</li><li>DOM</li></ul></div><p>Canvas API 提供了一个通过 JavaScript 和 HTML 的<code>&lt;canvas&gt;</code>元素来绘制图形的方式，它可以用于动画、游戏画面、数据可视化、图片编辑以及实时视频处理等方面，Canvas API 主要聚焦于 2D 图形，而同样使用<code>&lt;canvas&gt;</code>元素的 WebGL API 则用于绘制硬件加速的 2D 和 3D 图形</p><p>Canvas 的默认大小为 300 × 150 像素，但是可以用宽高属性来调整 Canvas 的尺寸，该元素的功能就是创建一个画布，剩下的图像绘制交给 JavaScript 完成</p><p>Canvas 就像一个普通的 HTML 元素一样可以被设计，但这些样式完全不会影响画布中的实际图像</p><div class="custom-container danger"><p class="custom-container-title">警告</p><p>canvas 元素必须要结束标签</p></div><p>画布最初是空白的，为了绘制图形需要 JavaScript 找到渲染的上下文，然后在上面绘制，Canvas 元素有一个<code>getContext()</code>方法用于获取渲染上下文和它的绘画功能，<code>getContext()</code>的参数，决定了上下文的格式</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>canvas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但并不是所有的浏览器都支持，所以应编写简单的测试来验证一下<code>getContext()</code>是否存在</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getConext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// drawing code her</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// canvas-unsupported code here</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以一个基本的模板框架就形成了：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Canvas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;当前浏览器不支持 Canvas，请换浏览器再试&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>canvas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="栅格" tabindex="-1"><a class="header-anchor" href="#栅格" aria-hidden="true">#</a> 栅格</h2><p>画布默认被网格所覆盖，网格中的一个单元就是画布中的一个像素，默认大小的画布由 300 × 150 个像素点组成，栅格的起点为画布的左上角（坐标（0，0）），所有的元素都基于这个起点来定位</p><h2 id="画一条直线" tabindex="-1"><a class="header-anchor" href="#画一条直线" aria-hidden="true">#</a> 画一条直线</h2><p>想象一下画画时需要做什么？没错就是移动笔，<code>ctx.moveTo(x, y)</code>就是这样的方法，用于确定笔在画布上的起点，注意它只是移动笔而已，具体的绘制还需要别的方法，<code>ctx.lineTo(x, y)</code>方法用于画一条直线，它会从当前笔的坐标和该方法指定的坐标连接成一条直线，笔的落点也移动到了这个位置，之后都以这个位置为基础绘制</p><p>此外笔的粗细可以使用<code>ctx.lineWidth</code>属性调整，它默认是<code>1</code>。而笔的颜色可以使用<code>ctx.strokeStyle</code>属性设置，默认是<code>#000000</code>，可以使用 CSS 颜色属性那样的取值</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在所有的绘制方法之前，必须先调用一下<code>moveTo</code>来确定笔的起始位置</p></div><p>尽管画了一条直线，但是需要调用<code>ctx.stroke()</code>方法进行绘制着色</p><p>如果绘制的闭合线段形成了多边形想要对其进行填充，就可以使用<code>ctx.fill()</code>方法，颜色取决于<code>ctx.fillStyle</code>属性，默认为<code>#000000</code></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果起点和终点的路径没有重合，调用<code>ctx.fill()</code>是无效的，因为它只能绘制闭合路径</p></div><p>此外，canvas 是基于状态的绘制，在某些情况我们需要对不同的路径进行着色，<code>stroke</code>和<code>fill</code>在后续的多次调用中总会以最后一次为准，这会改变之前所有绘制的东西，这个时候<code>beginPath</code>和<code>closePath</code>方法就派上用场了，我们可以将单独的一个绘制放到这两个方法之间，形成独立的状态，永远不会被其他所影响</p><p><code>beginPath</code>不一定要和<code>closePath</code>成对出现，<code>beginPath</code>只代表重新规划一条路径，<code>closePath</code>只代表闭合路径之后图形绘制命令又重新指向到上下文中</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果不是闭合路径时，<code>beginPath</code>和<code>closePath</code>会自动将路径进行封闭</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 绿色的线</span>
ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
<span class="token comment">// 粉色的线</span>
ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="绘制弧线" tabindex="-1"><a class="header-anchor" href="#绘制弧线" aria-hidden="true">#</a> 绘制弧线</h2><p><code>ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise)</code>用于绘制一条弧线</p><h2 id="绘制多边形" tabindex="-1"><a class="header-anchor" href="#绘制多边形" aria-hidden="true">#</a> 绘制多边形</h2><p>canvas 支持矩形和路径这两种图形绘制的方式，提供了三种方法绘制矩形：</p><ul><li>fillRect(x, y, width, height)：绘制一个填充的矩形</li><li>strokeRect(x, y, width, height)：绘制一个矩形的边框</li><li>clearRect(x, y, width, height)：清除指定矩形区域，让清除部分完全透明</li></ul><h2 id="渐变" tabindex="-1"><a class="header-anchor" href="#渐变" aria-hidden="true">#</a> 渐变</h2><p><code>createLinearGradient(startX, startY, endX, endY)</code>用于创建线性渐变</p><p><code>addColorStop(stop, color)</code>方法规定渐变对象中的颜色和停止位置</p><ul><li>stop：渐变中开始与结束的位置，是<code>0.0</code>到<code>1.0</code>之间的值</li><li>color：颜色</li></ul><p><code>createRadialGradient()</code>用于创建放射性/环形的渐变</p><h2 id="文字绘制" tabindex="-1"><a class="header-anchor" href="#文字绘制" aria-hidden="true">#</a> 文字绘制</h2><p><code>fillText(text, x, y, maxWidth)</code>用于创建实心文本</p><p><code>ctx.strokeText(text, x, y, maxWidth)</code>用于创建空心文本</p><h2 id="图片绘制" tabindex="-1"><a class="header-anchor" href="#图片绘制" aria-hidden="true">#</a> 图片绘制</h2><p>只需要两步，获得图片源，使用<code>drawImage(image, x, y)</code>绘制到画布上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;image.png&#39;</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>drawImage(image, dx, dy, width, height)</code></li><li><code>drawImage(image, dx, dy, width, height)</code></li><li><code>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)</code>：<code>sx</code>和<code>sy</code>表示从什么地方开始裁切图片，<code>sWidth</code>和<code>sHeight</code>分别表示裁切的宽度和高度</li></ul>`,41),c=[e];function o(l,i){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","canvas.html.vue"]]);export{d as default};
