import{ac as e,A as t,B as p,z as s,M as n,H as o,ad as c,ae as l,O as i}from"./framework.a879f165.js";const u={},d=s("code",null,"class",-1),r=s("code",null,"class",-1),k=l(`<p>类本身是一个创建实例的模板，而实例才是真正能够操作的对象</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
  <span class="token keyword">pass</span>

p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述例子中定义了 Person 类，并创建了 Person 的实例，p1 指向的是一个 Person 的实例，保存的是该实例的内存地址，一个实例通过<code>类名+()</code>创建，并且可以创建多个实例，每个实例的内存地址都不一样</p><p>属性可以通过<code>实例.属性名</code>来创建，本质上是一个属于实例的变量，必须在创建的时候初始化，否则会报 AttributeError</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span>
p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment"># &quot;张三&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment"># 23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然类起一个模板作用，那么在创建实例的时候就可以将一些属性绑定上去</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
    self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment"># &quot;张三&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment"># 23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__init__</code>是一个特殊方法，第一个参数<code>self</code>代表实例本身，因此在该方法中就可以绑定各种属性，当定义了这个函数时，在创建实例必须传入该方法匹配的函数</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在类中定义的方法，第一个参数永远都是实例变量<code>self</code></p></div><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h2><p>面向对象特性之一就是不能通过外部方位实例的属性，上述例子中，仍然可以通过<code>实例.属性</code>的方式来从外界访问实例变量，但是只要将类中定义的变量名前加上<code>__</code>就可以让该变量变成私有变量，只能在内部访问</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
    self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age
st1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>st1<span class="token punctuation">.</span>__name<span class="token punctuation">)</span> <span class="token comment"># AttributeError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要外界访问这些变量，应该提供一些方法暴露这些变量，因为这些方法是可以访问的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name

st1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>st1<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 张三</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的可以使用方法暴露一些修改变量的操作</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">def</span> <span class="token function">set_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name

st1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
st1<span class="token punctuation">.</span>set_name<span class="token punctuation">(</span><span class="token string">&quot;张三丰&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>st1<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 张三丰</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样和直接暴露有什么区别？大可不必，我的方法我做主，在这个方法中写一些逻辑就可以保证数据的合法性</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>封装即隐藏细节，仅对外公开相关的操作接口，控制在程序中属性的修改和读取</p></div><h2 id="继承和多态" tabindex="-1"><a class="header-anchor" href="#继承和多态" aria-hidden="true">#</a> 继承和多态</h2><p>继承和多态都是面向对象编程的特性之一</p><p>继承即可以从某个现有的类中继承，新的类叫做<strong>子类</strong>，被继承的类叫做<strong>父类、超类、基类</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>slef<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am a human&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设有上述的<code>Person</code>类，需要<code>Student</code>和<code>Teacher</code>类，可以直接从<code>Person</code>中继承</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在定义的类的类名后面写上要继承的类名，此时<code>Student</code>和<code>Teacher</code>都是<code>Person</code>的子类，好处是都继承了<code>Person</code>的方法，当创建实例就可以调用父类的方法</p><p>但它们都打印<code>I am a human</code>，更符合逻辑的应该是分别显示<code>I am a student</code>和<code>I am a teacher</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>slef<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am a student&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>slef<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am a teacher&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类重新写了一遍 say 方法，叫做方法的重写，再次运行 say 方法的时候就会打印如下：</p><p><code>I am a student</code><br><code>I am a teacher</code></p><p>当父类和子类存在相同的方法时，子类总会调用自己的方法，这就是<strong>多态</strong></p><p>在继承关系中，一个子类的实例类型也可以是父类，可以通过内置函数<code>isinstance</code>来判断一个变量是否为某个类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>
t1 <span class="token operator">=</span> Teacher<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> Student<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中 s1 和 t1 不但可以是自身的类型，也可以是父类的类型，但是反过来不行</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> Student<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>老师和学生都可以看作成人类，但是人类却不一定都是是老师和学生</p>`,35);function m(v,b){const a=i("RouterLink");return t(),p("div",null,[s("p",null,[n("面向对象最重要的概念就是类和实例，Python 是一个完全面向对象的语言，自然支持类的定义，定义类的关键字是"),d,n("，"),r,n("后面紧跟着就是类名，类名符合标识符规范即可，但是通常是大写开头，每个类都有自己的属性和方法（"),o(a,{to:"/language/general/#%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB"},{default:c(()=>[n("函数和方法的区别")]),_:1}),n("）")]),k])}const g=e(u,[["render",m],["__file","class.html.vue"]]);export{g as default};
