import{ac as n,A as s,B as a,ae as e}from"./framework.a879f165.js";const o={},p=e(`<p>内存是计算机中非常稀有的资源，了解一个内存的架构，如何理解操作系统管理内存，作为一个程序员更好的使用内存是非常有必要的</p><p>在一个典型的架构中，分配给应用程序的内存被分为 4 个区段：</p><ul><li>堆区 - 动态内存，可以分配任意大小的内存，只要不超过计算机内存的可用容量，堆并不是数据结构中的堆实现</li><li>栈区 - 用于存放函数调用时的所有信息，包括所有的局部变量，生命周期只存在函数运行期间</li><li>静态/全局数据段 - 不在函数中定义的变量，生命周期贯穿整个程序</li><li>代码段 - 存放程序执行的指令</li></ul><p>栈区、静态/全局数据段、代码段在运行期间的大小是不会增长的</p><p>在栈中执行的函数永远都是栈顶的函数在执行，其他的函数暂停执行等待上面的函数执行完，然后自动回收空间。<code>main</code>函数永远都处于栈底，因为它是程序的入口，也是出口。如果在运行期间耗尽了栈空间，就会产生栈溢出现象，导致程序崩溃</p><p>而堆是由程序员自己可以分配的内存空间，由程序员手动分配，手动回收，一切都交给程序员来决定。C 提供了四个函数用来操作堆，它们都由<code>stdlib.h</code>提供：</p><ul><li><code>malloc(size)</code> - 在堆中分配指定字节大小的空间，并返回一个指向该内存起始地址的<code>void</code>类型指针，不会初始化，会得到垃圾值</li><li><code>calloc(num, size)</code> - 和<code>malloc</code>差不多，但是会初始化值为<code>0</code></li><li><code>realloc(void *ptr, size)</code> - 重新分配通过<code>malloc/calloc</code>分配的内存空间并拷贝数据，可以增大或减小，并返回指向该起始地址的<code>void</code>类型指针</li><li><code>free(void *ptr)</code> - 释放指定地址的内存空间</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token comment">// 在堆中分配 sizeof(int) 大小的空间</span>
p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>malloc</code>找不到内存中可分配的内存块就会返回<code>NULL</code></p><p>之前无法在运行期间指定数组大小的问题，也可以通过动态内存分配来解决了</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> n<span class="token punctuation">;</span>
  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),t=[p];function c(l,i){return s(),a("div",null,t)}const u=n(o,[["render",c],["__file","malloc.html.vue"]]);export{u as default};
