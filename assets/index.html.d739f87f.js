import{ac as e,A as d,B as c,z as n,M as a,H as i,ae as s,O as o}from"./framework.a879f165.js";const p={},l=s('<p>由詹姆斯高斯林在90年代初开发的一种编程语言，Java 介于编译型和解释性语言之间，因为 Java 是将代码编译成一种“字节码”，然后针对不同的平台编写虚拟机，不同的虚拟机负责解释字节码并执行，这样就实现了“一次编写，到处运行”的结果</p><p>其他七七八八的特点就不说了，最大的特点就是 Java 编写的程序是跨平台的。只要在需要运行 Java 程序的操作系统上安装一个 Java 虚拟机(JVM Java Virtual Machine)即可，由 JVM 来负责 Java 程序在该系统中的运行，因此实现了<strong>write once ,run anywhere!(一次编写，到处运行)</strong></p><p>随着 Java 的发展，Java 又分出了三个不同的平台版本：</p><ul><li>Java SE - Standard Edition</li><li>Java EE - Enterprise Edition</li><li>Java ME - Micro Edition</li></ul><p>简单来说 Java SE 就是标准版，而 Java EE 是企业版，只是在 SE 的基础上增加了大量的 API 和库，以便于开发 Web 应用，数据库，消息服务等。而 ME 相当于 SE 的瘦身版，一些 SE 的标准库无法在 ME 上使用，它是一个针对于嵌入式设备的版本，因此没有特别需求，不建议学习 Java ME</p><p>因此学习线路如下：</p><ol><li>首先学习 Java SE，掌握 Java 语言本身以及 Java 标准库的使用</li><li>继续学习 Java EE，掌握 Spring 框架等等</li><li>如果学习移动开发，就深入 Android 平台，掌握 APP 开发</li></ol><p>无论怎么选择，Java SE 的核心技术就是基础</p><h2 id="版本" tabindex="-1"><a class="header-anchor" href="#版本" aria-hidden="true">#</a> 版本</h2><p>从 1995 年发布 1.0 开始，到目前为止，最新的 Java 版本是 Java 15：</p><table><thead><tr><th>时间</th><th>版本</th></tr></thead><tbody><tr><td>1995</td><td>1.0</td></tr><tr><td>1998</td><td>1.2</td></tr><tr><td>2000</td><td>1.3</td></tr><tr><td>2002</td><td>1.4</td></tr><tr><td>2004</td><td>1.5 / 5.0</td></tr><tr><td>2005</td><td>1.6 / 6.0</td></tr><tr><td>2011</td><td>1.7 / 7.0</td></tr><tr><td>2014</td><td>1.8 / 8.0</td></tr><tr><td>2017/9</td><td>1.9 / 9.0</td></tr><tr><td>2018/3</td><td>10</td></tr><tr><td>2018/9</td><td>11</td></tr><tr><td>2019/3</td><td>12</td></tr><tr><td>2019/9</td><td>13</td></tr><tr><td>2020/3</td><td>14</td></tr><tr><td>2020/9</td><td>15</td></tr></tbody></table><h2 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释" aria-hidden="true">#</a> 名词解释</h2><p>初学者学习 Java，经常听到 JDK、JRE 这些名词</p><ul><li>JDK - Java Development</li><li>JRE - Java Runtime Environment</li></ul><p>JRE 是运行 Java 字节码的虚拟机，但是需要 JDK 将 Java 源码编译成 Java 字节码，因此 JDK 除了包含 JRE、还提供了编译器，调试器等工具</p><h2 id="安装-jdk" tabindex="-1"><a class="header-anchor" href="#安装-jdk" aria-hidden="true">#</a> 安装 JDK</h2>',16),r={href:"https://bell-sw.com/pages/downloads/#/java-11-lts",target:"_blank",rel:"noopener noreferrer"},u=s(`<h2 id="第一个-java-程序" tabindex="-1"><a class="header-anchor" href="#第一个-java-程序" aria-hidden="true">#</a> 第一个 Java 程序</h2><p>无论如何，在一个 Java 源代码中总是能找到一个类似这样的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个定义被称为 class（类），类名是<code>ClassName</code>，按照习惯，类名和文件名相同，且首字母大写</p><p>在类的定义中，有个类似这样的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是类中的方法，<code>main</code>是方法名，<code>{}</code>用来编写语句，Java 规定，某个类定义的<code>public static void main(String[], args)</code>是 Java 程序的固定入口，所以 Java 程序总是从<code>main</code>方法开始执行</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>从 1.4 及以后的版本中强制了<code>main</code>方法必须声明为<code>public</code></p></div><p>Java 中所有的函数都属于某个类的方法，在标准术语中称为成员方法，而不是成员函数</p><p>Java 强制每个文件都必须有一个类，且其他东西都定义在类中，所以这就是 Java 看起来非常啰嗦的原因：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 源码本质上是一个文本文件，需要先用<code>javac</code>将保存好的 Java 文件编译成字节码文件，会自动生成后缀名为<code>.class</code>字节码文件，然后使用<code>java</code>命令执行这个字节码文件</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在 Java 11 版本以后可以直接使用<code>java</code>命令执行源码文件，但在实际中的项目中不建议使用</p></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li>Effective Java</li><li>Java 核心技术</li><li>On Java 8</li></ul>`,15);function v(k,J){const t=o("ExternalLinkIcon");return d(),c("div",null,[l,n("p",null,[a("推荐 "),n("a",r,[a("Liberica"),i(t)]),a(" 实现，无脑下一步就完事了，这个实现是自动配置环境变量的，无需再找一些七七八八的教程配置")]),u])}const m=e(p,[["render",v],["__file","index.html.vue"]]);export{m as default};
