import{ac as n,A as e,B as t,ae as i}from"./framework.a879f165.js";const s={},a=i(`<p>字符串本质上是 Unicode 字符序列，比如<code>&quot;Hello&quot;</code>是由五个字符组成。在标准类库中提供了一个预定义的类<code>String</code>，每一个通过<code>&quot;&quot;</code>括起来的字符串都是 String 类的一个实例</p><p>允许 + 号连接两个字符串，当一个字符串与一个非字符串的值进行拼接时将会被转换为字符串进行拼接</p><p>也可以修改字符串变量的引用，但字符串本身是不可修改的，应该提取需要的字符在拼接上替换的字符串来修改</p><p><code>equlas()</code>方法可以检测两个字符串是否相等，<code>equlasIgnoreCase()</code>方法是不区分大小写的</p><p>不应该使用<code>==</code>检测字符串是否相等，因为这个运算符只能比较两个字符串之间的引用是否相等</p><p>空串表示长度为<code>0</code>的字符串，通过字符串对象的<code>length()</code>方法返回</p><p>字符串变量也可以存放特殊值<code>null</code>，表示这个变量没有和任何对象进行关联</p><h3 id="string-api" tabindex="-1"><a class="header-anchor" href="#string-api" aria-hidden="true">#</a> String API</h3><ul><li>char charAt(int index)：返回指定位置的字符</li><li>int codePointAt(int index)：返回指定位置字符的 ASCII 码</li><li>boolean equals(Object obj)：比较字符串是否相等</li><li>boolean startsWith(String str)/endWith(String str)：以 suffix 开头或结尾，则返回 true</li><li>int indexOf(String str)：返回匹配到的第一个子串的开始位置，不存在则返回 -1</li><li>lastIndexOf(String str)：返回匹配到的最后一个子串的开始位置，不存在则返回 -1</li><li>int length()：返回字符串长度</li><li>String replace(String oldString, String newString)：替换原始字符串中的 oldString，并返回新的字符串</li><li>String substring(int beginIndex, int endIndex)：从指定位置开始截取字符串返回</li><li>String toLowerCase()：将大写字母改为小写并返回</li><li>String toUpperCase()：将小写字符改为大写并返回</li><li>String trim()：返回删除了头部和尾部空格的字符串</li><li>String String.join(CharSequence delimiter, elements)：通过分隔符连接数组或集合返回</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>CharSequence 是一种接口类型，所有的字符串接口都属于这个接口</p></div><p>String 类包含了很多方法，但是在标准库中有几千个类，方法数量更是惊人，所以记住所有的类和方法是不可能的，学会查询 API 文档十分有用</p><h2 id="stringbuilder-和-stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuilder-和-stringbuffer" aria-hidden="true">#</a> StringBuilder 和 StringBuffer</h2><p>有时候需要由较短的字符串构建，比如来自按键或者文件中的单词，采用字符串连接的方式效率比较低，每次连接字符串都会构建一个新的字符串对象，即耗时，又浪费空间，而使用 StringBuilder 类就可以避免这个问题</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">toSring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 StringBuilder 类构建一个空的字符串构造器，当需要添加内容时就调用<code>append()</code>方法，在需要构建字符串时就调用<code>toString()</code>方法</p><p>在 5.0 版本中引入了 StringBuilder 类，前身是 StringBuffer，它的效率有点低，但允许多线程的方式进行字符串的编辑，如果字符串都在单线程中编辑，则应该使用 StringBuilder 替代，他们的 API 都是相同的</p><ul><li>int length()</li><li>append(str)</li><li>insert(offset, str)</li><li>delete(offset, str)</li><li>toString()</li></ul>`,17),l=[a];function r(o,c){return e(),t("div",null,l)}const d=n(s,[["render",r],["__file","string.html.vue"]]);export{d as default};
