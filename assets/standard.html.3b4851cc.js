const n=JSON.parse(`{"key":"v-1f1d6222","path":"/js/standard.html","title":"标准功能","lang":"zh-CN","frontmatter":{"title":"标准功能","category":["编程语言"],"tag":["JavaScript"],"article":false,"description":"这里是 JavaScript 中提供的一些标准功能 # 包装对象 很多语言都有包装对象的设计，目的是为了让基本类型获得构造函数上的方法 String()：将一个字符串转换为字符串对象，如果是undefined则返回undefined Number()：将一个数值转换为数值对象，如果是undefined则返回NaN Boolean()：将一个布尔值转换为布尔对象 # Math Math是用来进行数值运算的对象，它不是构造器 Math.PI Math.pow(x, y)：返回 x 的 y 次幂 Math.sqrt(x)：返回 x 的平方根 Math.ceil(x)：返回大于或等于 x 的最小整数 Math.floor(x)：返回小于或等于 x 的最大整数 Math.round(x)：返回四舍五入后最接近的整数 Math.random()：返回包括 0 到不包括 1 之间的浮点数 Math.abs(x)：返回 x 的绝对值 Math.max(value1, value2, ...)：返回一组数中的最大值 Math.min(value1, value2, ...)：返回一组数中的最小值 # 时间 一个时间对象是由Date构造函数产生的，如果不带参数会表示当前的日期和时间 console.log(new Date()); // 显示当前的日期和时间 如果传入了一个整数n，则表示 1970 年 1 月 1 日 UTC + n 之后经过的毫秒数 console.log(new Date(0)) // 1970-01-01T00:00:00.000Z console.log(new Date(1000)) // 1970-01-01T00:00:1.000Z 如果传入了一个字符串，它会自动解析 console.log(new Date(\\"2021-6-21\\")); // 2021-06-20T16:00:00.000Z or 2021-06-21T11:00:00.000Z 如果没有传入时间，则会按照格林尼治标准时间的午夜来设定时间，并根据运行代码后的时区进行调整 当new Date(year, month, date, hours, minutes, seconds, ms)是这种形式时，就会根据给定参数创建日期和时间，其中前两个参数是必须的： year 必须是四位数 month 从 0（一月）开始，到 11（十二月）结束 date 是当月的某一天，如果缺失默认为 1 如果 hours/minutes/seconds/ms 缺失则默认为 0 时间对象也提供了各种方法来访问年月等信息 getFullYear() getMonth() getDate() getDay() getHours()，getMinutes()，getSeconds()，getMilliseconds() setFullYear() setMonth() setDate() setHours(hour)，setMinutes(min)，setSeconds(sec)，setMilliseconds(ms) getTime() - 时间戳 时间对象还会自动校准，如果设置了超出范围的值，会自动校准，比如： console.log(new Date(2021, 0, 33)); // 2021-02-01 这说明超出的时间会被自动分配，这个特性通常用来获取给定时间段后的日期 当事件对象转换为数字时，得到的是对应的时间戳，有一个非常重要的作用，可以用来相减测量某个代码的执行时间 let start = new Date(); // 开始测量时间 for (let i = 0; i &lt; 100000; i++) { let doSomething = i * i * i; } let end = new Date(); // 结束测量时间 alert( \`The loop took \${end - start} ms\` ); 如果想要测量时间间隔，也可以用Date.now()，它同样返回的是当前的时间戳，但是它不会创建中间对象，因此程序的速度更快 Date.parse(str)可以从一个字符串中读取日期，但是字符串的格式应该为：YYYY-MM-DDTHH:mm:ss:sssZ，这样该方法会返回该时间段的时间戳，因此可以通过该方法来立即创建一个对象 let date = new Date(Date.parse('2021-06-21T23:30:00')) 提示 T代表分隔符，Z代表 UTC + 0 时区 这是一个求出高考时间的小例子： ::: demo 高考时间 &lt;h1>高考倒计时：&lt;span>&lt;/span>&lt;/h1> let h1 = document.querySelector('h1'); let span = document.querySelector('span'); setInterval(() => { let nd = new Date(); let td = new Date(new Date().getFullYear(), 5, 7); let diff = td - nd; let day = parseInt(diff / (1000 * 60 * 60 * 24)); let hours = parseInt(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)); let minutes = parseInt(diff % (1000 * 60 * 60) / (1000 * 60)); let seconds = parseInt(diff % (1000 * 60 * 60) % (1000 * 60) / 1000); span.textContent = \`\${day}天\${hours}小时\${minutes}分钟\${seconds}秒\`; }, 1000); ::: # JSON JSON 是表示值和对象的通用格式，它是为 JavaScript 而设计的，但是很多语言都有用来处理它的库，通常用来进行数据交换，JavaScript 提供了下列方法用来处理 JSON 数据： JSON.stringify()：将对象转换为 JSON JSON.parse()：将 JSON 转换为对象 let foo = { name: 'foo', age: 18, wife: null } console.log(JSON.stringify(foo)); // {\\"name\\":\\"foo\\",\\"age\\":18,\\"wife\\":null} 得到的 JSON 字符串是一个被称为 JSON 编码的对象，和普通对象区别在于： 对象的键会被处理成双引号 且所有的字符串都转换为双引号 JSON 是一种语言无关的数据规范，一些特殊的对象属性会被JSON.stringify()跳过： 函数属性 Symbol 属性 值为undefined的属性 JSON 也支持嵌套转换，另外，stringify其实支持三个参数，第一个参数是需要被编码的值，第二个是用于指定要编码的属性，第三个是用于格式化空格的数量 let foo = { name: 'foo', age: 18, wife: null, room: { number: 23, participants: ['foo', 'ann'] } } // 仅对 name 和 age 键进行编码 console.log(JSON.stringify(foo, ['name', 'age'])); // {\\"name\\":\\"foo\\",\\"age\\":18} // 缩进 2 个空格 console.log(JSON.stringify(foo, ['name', 'age']), 2); /* { \\"name\\": \\"foo\\", \\"age\\": 18 } */ JSON 也支持自定义的格式，就像toString一样，只要为对象添加toJSON方法，如果可用，那么JSON.stringify就会调用它 let foo = { name: 'foo', age: 18, wife: null, toJSON() { return '1' } } console.log(JSON.stringify(foo)); // \\"1\\" 如果想要解码 JSON 对象就要用到JSON.parse let str = '{\\"name\\":\\"foo\\",\\"age\\":18,\\"tag\\":[\\"person\\",\\"student\\"]}'; let foo = JSON.parse(str); console.log(foo); // { name: 'foo', age: 18, tag: [ 'person', 'student' ] } 如果 JSON 中包含日期，会被解析为字符串，而不是日期对象 let str = '{\\"name\\":\\"foo\\",\\"age\\":18,\\"tag\\":[\\"person\\",\\"student\\"],\\"date\\":\\"2021-06-21T12:00:00\\"}'; let foo = JSON.parse(str); // 此时的 date 是一个字符串 console.lot(foo.date.getFullYear()) // TypeError 因此就必须借助第二个参数来对转换值进行映射： let str = '{\\"name\\":\\"foo\\",\\"age\\":18,\\"tag\\":[\\"person\\",\\"student\\"],\\"date\\":\\"2021-06-21T12:00:00\\"}'; let foo = JSON.parse(str, function(key, value) { // 当 key 为 date 时进行值类型的转换 if (key == 'date') return new Date(value); return value; }); // 此时的 date 是一个日期对象，可以正常调用 console.lot(foo.date.getFullYear()) // 2021 # 正则表达式 在 JavaScript中，正则表达式也是对象，可以使用两种方式来创建一个正则表达式。两种方式都是等价的，在实际应用中，通常使用字面量表达式，构建时还可以添加第二个参数，表示修饰符 // 字面量 const re1 = /abc/i; // 构造函数 const re2 = new RegExp('abc', 'i'); 正则对象有修饰符相关属性 ignoreCase：是否设置了i global：是否设置了g multiline：是否设置了m flags：返回包含已设置的修饰符，按字母排序 const reg = /abc/igm; console.log(reg.ignoreCase); // true console.log(reg.global); // true console.log(reg.multiline); // true console.log(reg.flags); // gim 与修饰符无关的属性 lastIndex：表示下一次搜索的位置 source：返回正则表达式的字符串形式，不包括反斜杠 实例方法 test(str)：是否能匹配当前字符串 exec(str)：返回匹配结果 let reg = /a/; reg.test('abcabc'); // true 如果带有g修饰符，每一次test方法都会从上一次结束位置开始向后匹配 let reg = /a/g; reg.test(reg.lastIndex, 'abcabc'); // 0, true reg.test(reg.lastIndex, 'abcabc'); // 1, true reg.test(reg.lastIndex, 'abcabc'); // 4, false 带有g修饰符时，正则对象的lastIndex可以指定开始搜索的位置 exec方法会返回一个数组，成员是匹配成功的字符串，否则返回null let reg = /a/; reg.exec('abcabc'); // [ 'a', index: 0, input: 'abcabc', groups: undefined ] reg.exec('bcd'); // null 成功时还包含两个属性 input：匹配到的字符串 index：匹配成功的开始位置 如果正则表达式加上了g修饰符，就可以使用多次exec方法，下一次搜索的位置从上一次匹配成功结束的位置开始 let reg = /a/g; reg.exec('abcabc'); 所以在g修饰符允许匹配多次的情况下，可以利用循环完成全部匹配 对一个正则对象使用typeof会得到object","head":[["meta",{"property":"og:url","content":"https://jqiue.github.io/js/standard.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"标准功能"}],["meta",{"property":"og:description","content":"这里是 JavaScript 中提供的一些标准功能 # 包装对象 很多语言都有包装对象的设计，目的是为了让基本类型获得构造函数上的方法 String()：将一个字符串转换为字符串对象，如果是undefined则返回undefined Number()：将一个数值转换为数值对象，如果是undefined则返回NaN Boolean()：将一个布尔值转换为布尔对象 # Math Math是用来进行数值运算的对象，它不是构造器 Math.PI Math.pow(x, y)：返回 x 的 y 次幂 Math.sqrt(x)：返回 x 的平方根 Math.ceil(x)：返回大于或等于 x 的最小整数 Math.floor(x)：返回小于或等于 x 的最大整数 Math.round(x)：返回四舍五入后最接近的整数 Math.random()：返回包括 0 到不包括 1 之间的浮点数 Math.abs(x)：返回 x 的绝对值 Math.max(value1, value2, ...)：返回一组数中的最大值 Math.min(value1, value2, ...)：返回一组数中的最小值 # 时间 一个时间对象是由Date构造函数产生的，如果不带参数会表示当前的日期和时间 console.log(new Date()); // 显示当前的日期和时间 如果传入了一个整数n，则表示 1970 年 1 月 1 日 UTC + n 之后经过的毫秒数 console.log(new Date(0)) // 1970-01-01T00:00:00.000Z console.log(new Date(1000)) // 1970-01-01T00:00:1.000Z 如果传入了一个字符串，它会自动解析 console.log(new Date(\\"2021-6-21\\")); // 2021-06-20T16:00:00.000Z or 2021-06-21T11:00:00.000Z 如果没有传入时间，则会按照格林尼治标准时间的午夜来设定时间，并根据运行代码后的时区进行调整 当new Date(year, month, date, hours, minutes, seconds, ms)是这种形式时，就会根据给定参数创建日期和时间，其中前两个参数是必须的： year 必须是四位数 month 从 0（一月）开始，到 11（十二月）结束 date 是当月的某一天，如果缺失默认为 1 如果 hours/minutes/seconds/ms 缺失则默认为 0 时间对象也提供了各种方法来访问年月等信息 getFullYear() getMonth() getDate() getDay() getHours()，getMinutes()，getSeconds()，getMilliseconds() setFullYear() setMonth() setDate() setHours(hour)，setMinutes(min)，setSeconds(sec)，setMilliseconds(ms) getTime() - 时间戳 时间对象还会自动校准，如果设置了超出范围的值，会自动校准，比如： console.log(new Date(2021, 0, 33)); // 2021-02-01 这说明超出的时间会被自动分配，这个特性通常用来获取给定时间段后的日期 当事件对象转换为数字时，得到的是对应的时间戳，有一个非常重要的作用，可以用来相减测量某个代码的执行时间 let start = new Date(); // 开始测量时间 for (let i = 0; i &lt; 100000; i++) { let doSomething = i * i * i; } let end = new Date(); // 结束测量时间 alert( \`The loop took \${end - start} ms\` ); 如果想要测量时间间隔，也可以用Date.now()，它同样返回的是当前的时间戳，但是它不会创建中间对象，因此程序的速度更快 Date.parse(str)可以从一个字符串中读取日期，但是字符串的格式应该为：YYYY-MM-DDTHH:mm:ss:sssZ，这样该方法会返回该时间段的时间戳，因此可以通过该方法来立即创建一个对象 let date = new Date(Date.parse('2021-06-21T23:30:00')) 提示 T代表分隔符，Z代表 UTC + 0 时区 这是一个求出高考时间的小例子： ::: demo 高考时间 &lt;h1>高考倒计时：&lt;span>&lt;/span>&lt;/h1> let h1 = document.querySelector('h1'); let span = document.querySelector('span'); setInterval(() => { let nd = new Date(); let td = new Date(new Date().getFullYear(), 5, 7); let diff = td - nd; let day = parseInt(diff / (1000 * 60 * 60 * 24)); let hours = parseInt(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)); let minutes = parseInt(diff % (1000 * 60 * 60) / (1000 * 60)); let seconds = parseInt(diff % (1000 * 60 * 60) % (1000 * 60) / 1000); span.textContent = \`\${day}天\${hours}小时\${minutes}分钟\${seconds}秒\`; }, 1000); ::: # JSON JSON 是表示值和对象的通用格式，它是为 JavaScript 而设计的，但是很多语言都有用来处理它的库，通常用来进行数据交换，JavaScript 提供了下列方法用来处理 JSON 数据： JSON.stringify()：将对象转换为 JSON JSON.parse()：将 JSON 转换为对象 let foo = { name: 'foo', age: 18, wife: null } console.log(JSON.stringify(foo)); // {\\"name\\":\\"foo\\",\\"age\\":18,\\"wife\\":null} 得到的 JSON 字符串是一个被称为 JSON 编码的对象，和普通对象区别在于： 对象的键会被处理成双引号 且所有的字符串都转换为双引号 JSON 是一种语言无关的数据规范，一些特殊的对象属性会被JSON.stringify()跳过： 函数属性 Symbol 属性 值为undefined的属性 JSON 也支持嵌套转换，另外，stringify其实支持三个参数，第一个参数是需要被编码的值，第二个是用于指定要编码的属性，第三个是用于格式化空格的数量 let foo = { name: 'foo', age: 18, wife: null, room: { number: 23, participants: ['foo', 'ann'] } } // 仅对 name 和 age 键进行编码 console.log(JSON.stringify(foo, ['name', 'age'])); // {\\"name\\":\\"foo\\",\\"age\\":18} // 缩进 2 个空格 console.log(JSON.stringify(foo, ['name', 'age']), 2); /* { \\"name\\": \\"foo\\", \\"age\\": 18 } */ JSON 也支持自定义的格式，就像toString一样，只要为对象添加toJSON方法，如果可用，那么JSON.stringify就会调用它 let foo = { name: 'foo', age: 18, wife: null, toJSON() { return '1' } } console.log(JSON.stringify(foo)); // \\"1\\" 如果想要解码 JSON 对象就要用到JSON.parse let str = '{\\"name\\":\\"foo\\",\\"age\\":18,\\"tag\\":[\\"person\\",\\"student\\"]}'; let foo = JSON.parse(str); console.log(foo); // { name: 'foo', age: 18, tag: [ 'person', 'student' ] } 如果 JSON 中包含日期，会被解析为字符串，而不是日期对象 let str = '{\\"name\\":\\"foo\\",\\"age\\":18,\\"tag\\":[\\"person\\",\\"student\\"],\\"date\\":\\"2021-06-21T12:00:00\\"}'; let foo = JSON.parse(str); // 此时的 date 是一个字符串 console.lot(foo.date.getFullYear()) // TypeError 因此就必须借助第二个参数来对转换值进行映射： let str = '{\\"name\\":\\"foo\\",\\"age\\":18,\\"tag\\":[\\"person\\",\\"student\\"],\\"date\\":\\"2021-06-21T12:00:00\\"}'; let foo = JSON.parse(str, function(key, value) { // 当 key 为 date 时进行值类型的转换 if (key == 'date') return new Date(value); return value; }); // 此时的 date 是一个日期对象，可以正常调用 console.lot(foo.date.getFullYear()) // 2021 # 正则表达式 在 JavaScript中，正则表达式也是对象，可以使用两种方式来创建一个正则表达式。两种方式都是等价的，在实际应用中，通常使用字面量表达式，构建时还可以添加第二个参数，表示修饰符 // 字面量 const re1 = /abc/i; // 构造函数 const re2 = new RegExp('abc', 'i'); 正则对象有修饰符相关属性 ignoreCase：是否设置了i global：是否设置了g multiline：是否设置了m flags：返回包含已设置的修饰符，按字母排序 const reg = /abc/igm; console.log(reg.ignoreCase); // true console.log(reg.global); // true console.log(reg.multiline); // true console.log(reg.flags); // gim 与修饰符无关的属性 lastIndex：表示下一次搜索的位置 source：返回正则表达式的字符串形式，不包括反斜杠 实例方法 test(str)：是否能匹配当前字符串 exec(str)：返回匹配结果 let reg = /a/; reg.test('abcabc'); // true 如果带有g修饰符，每一次test方法都会从上一次结束位置开始向后匹配 let reg = /a/g; reg.test(reg.lastIndex, 'abcabc'); // 0, true reg.test(reg.lastIndex, 'abcabc'); // 1, true reg.test(reg.lastIndex, 'abcabc'); // 4, false 带有g修饰符时，正则对象的lastIndex可以指定开始搜索的位置 exec方法会返回一个数组，成员是匹配成功的字符串，否则返回null let reg = /a/; reg.exec('abcabc'); // [ 'a', index: 0, input: 'abcabc', groups: undefined ] reg.exec('bcd'); // null 成功时还包含两个属性 input：匹配到的字符串 index：匹配成功的开始位置 如果正则表达式加上了g修饰符，就可以使用多次exec方法，下一次搜索的位置从上一次匹配成功结束的位置开始 let reg = /a/g; reg.exec('abcabc'); 所以在g修饰符允许匹配多次的情况下，可以利用循环完成全部匹配 对一个正则对象使用typeof会得到object"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-03-15T09:49:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:modified_time","content":"2022-03-15T09:49:21.000Z"}]]},"excerpt":"<p>这里是 JavaScript 中提供的一些标准功能</p>\\n<h2 id=\\"包装对象\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#包装对象\\" aria-hidden=\\"true\\">#</a> 包装对象</h2>\\n<p>很多语言都有包装对象的设计，目的是为了让基本类型获得构造函数上的方法</p>\\n<ul>\\n<li><code v-pre>String()</code>：将一个字符串转换为字符串对象，如果是<code v-pre>undefined</code>则返回<code v-pre>undefined</code></li>\\n<li><code v-pre>Number()</code>：将一个数值转换为数值对象，如果是<code v-pre>undefined</code>则返回<code v-pre>NaN</code></li>\\n<li><code v-pre>Boolean()</code>：将一个布尔值转换为布尔对象</li>\\n</ul>\\n<h2 id=\\"math\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#math\\" aria-hidden=\\"true\\">#</a> Math</h2>\\n<p><code v-pre>Math</code>是用来进行数值运算的对象，它不是构造器</p>\\n<ul>\\n<li>Math.PI</li>\\n<li>Math.pow(x, y)：返回 x 的 y 次幂</li>\\n<li>Math.sqrt(x)：返回 x 的平方根</li>\\n<li>Math.ceil(x)：返回大于或等于 x 的最小整数</li>\\n<li>Math.floor(x)：返回小于或等于 x 的最大整数</li>\\n<li>Math.round(x)：返回四舍五入后最接近的整数</li>\\n<li>Math.random()：返回包括 0 到不包括 1 之间的浮点数</li>\\n<li>Math.abs(x)：返回 x 的绝对值</li>\\n<li>Math.max(value1, value2, ...)：返回一组数中的最大值</li>\\n<li>Math.min(value1, value2, ...)：返回一组数中的最小值</li>\\n</ul>\\n<h2 id=\\"时间\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#时间\\" aria-hidden=\\"true\\">#</a> 时间</h2>\\n<p>一个时间对象是由<code v-pre>Date</code>构造函数产生的，如果不带参数会表示当前的日期和时间</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 显示当前的日期和时间</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>如果传入了一个整数<code v-pre>n</code>，则表示 1970 年 1 月 1 日 UTC + <code v-pre>n</code> 之后经过的毫秒数</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 1970-01-01T00:00:00.000Z</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 1970-01-01T00:00:1.000Z</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>如果传入了一个字符串，它会自动解析</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"2021-6-21\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 2021-06-20T16:00:00.000Z or 2021-06-21T11:00:00.000Z</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>如果没有传入时间，则会按照格林尼治标准时间的午夜来设定时间，并根据运行代码后的时区进行调整</p>\\n<p>当<code v-pre>new Date(year, month, date, hours, minutes, seconds, ms)</code>是这种形式时，就会根据给定参数创建日期和时间，其中前两个参数是必须的：</p>\\n<ul>\\n<li>year 必须是四位数</li>\\n<li>month 从 0（一月）开始，到 11（十二月）结束</li>\\n<li>date 是当月的某一天，如果缺失默认为 1</li>\\n<li>如果 hours/minutes/seconds/ms 缺失则默认为 0</li>\\n</ul>\\n<p>时间对象也提供了各种方法来访问年月等信息</p>\\n<ul>\\n<li>getFullYear()</li>\\n<li>getMonth()</li>\\n<li>getDate()</li>\\n<li>getDay()</li>\\n<li>getHours()，getMinutes()，getSeconds()，getMilliseconds()</li>\\n<li>setFullYear()</li>\\n<li>setMonth()</li>\\n<li>setDate()</li>\\n<li>setHours(hour)，setMinutes(min)，setSeconds(sec)，setMilliseconds(ms)</li>\\n<li>getTime() - 时间戳</li>\\n</ul>\\n<p>时间对象还会自动校准，如果设置了超出范围的值，会自动校准，比如：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2021</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">33</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 2021-02-01</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>这说明超出的时间会被自动分配，这个特性通常用来获取给定时间段后的日期</p>\\n<p>当事件对象转换为数字时，得到的是对应的时间戳，有一个非常重要的作用，可以用来相减测量某个代码的执行时间</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> start <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 开始测量时间</span>\\n\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">100000</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> doSomething <span class=\\"token operator\\">=</span> i <span class=\\"token operator\\">*</span> i <span class=\\"token operator\\">*</span> i<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">let</span> end <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 结束测量时间</span>\\n\\n<span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token string\\">The loop took </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>end <span class=\\"token operator\\">-</span> start<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\"> ms</span><span class=\\"token template-punctuation string\\">\`</span></span> <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>如果想要测量时间间隔，也可以用<code v-pre>Date.now()</code>，它同样返回的是当前的时间戳，但是它不会创建中间对象，因此程序的速度更快</p>\\n<p><code v-pre>Date.parse(str)</code>可以从一个字符串中读取日期，但是字符串的格式应该为：<code v-pre>YYYY-MM-DDTHH:mm:ss:sssZ</code>，这样该方法会返回该时间段的时间戳，因此可以通过该方法来立即创建一个对象</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> date <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span>Date<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">parse</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'2021-06-21T23:30:00'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p><code v-pre>T</code>代表分隔符，<code v-pre>Z</code>代表 UTC + 0 时区</p>\\n</div>\\n<p>这是一个求出高考时间的小例子：</p>\\n<p>::: demo 高考时间</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>h1</span><span class=\\"token punctuation\\">></span></span>高考倒计时：<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span><span class=\\"token punctuation\\">></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>h1</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> h1 <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'h1'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> span <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'span'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token function\\">setInterval</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> nd <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> td <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getFullYear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> diff <span class=\\"token operator\\">=</span> td <span class=\\"token operator\\">-</span> nd<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> day <span class=\\"token operator\\">=</span> <span class=\\"token function\\">parseInt</span><span class=\\"token punctuation\\">(</span>diff <span class=\\"token operator\\">/</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">24</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> hours <span class=\\"token operator\\">=</span> <span class=\\"token function\\">parseInt</span><span class=\\"token punctuation\\">(</span>diff <span class=\\"token operator\\">%</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">24</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> minutes <span class=\\"token operator\\">=</span> <span class=\\"token function\\">parseInt</span><span class=\\"token punctuation\\">(</span>diff <span class=\\"token operator\\">%</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> seconds <span class=\\"token operator\\">=</span> <span class=\\"token function\\">parseInt</span><span class=\\"token punctuation\\">(</span>diff <span class=\\"token operator\\">%</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">%</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span> <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  span<span class=\\"token punctuation\\">.</span>textContent <span class=\\"token operator\\">=</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">\`</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>day<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">天</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>hours<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">小时</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>minutes<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">分钟</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">\${</span>seconds<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\">秒</span><span class=\\"token template-punctuation string\\">\`</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>:::</p>\\n<h2 id=\\"json\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#json\\" aria-hidden=\\"true\\">#</a> JSON</h2>\\n<p>JSON 是表示值和对象的通用格式，它是为 JavaScript 而设计的，但是很多语言都有用来处理它的库，通常用来进行数据交换，JavaScript 提供了下列方法用来处理 JSON 数据：</p>\\n<ul>\\n<li>JSON.stringify()：将对象转换为 JSON</li>\\n<li>JSON.parse()：将 JSON 转换为对象</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">wife</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stringify</span><span class=\\"token punctuation\\">(</span>foo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// {\\"name\\":\\"foo\\",\\"age\\":18,\\"wife\\":null}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>得到的 JSON 字符串是一个被称为 JSON 编码的对象，和普通对象区别在于：</p>\\n<ol>\\n<li>对象的键会被处理成双引号</li>\\n<li>且所有的字符串都转换为双引号</li>\\n</ol>\\n<p>JSON 是一种语言无关的数据规范，一些特殊的对象属性会被<code v-pre>JSON.stringify()</code>跳过：</p>\\n<ol>\\n<li>函数属性</li>\\n<li>Symbol 属性</li>\\n<li>值为<code v-pre>undefined</code>的属性</li>\\n</ol>\\n<p>JSON 也支持嵌套转换，另外，<code v-pre>stringify</code>其实支持三个参数，第一个参数是需要被编码的值，第二个是用于指定要编码的属性，第三个是用于格式化空格的数量</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">wife</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">room</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">number</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">participants</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'ann'</span><span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 仅对 name 和 age 键进行编码</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stringify</span><span class=\\"token punctuation\\">(</span>foo<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'name'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'age'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// {\\"name\\":\\"foo\\",\\"age\\":18}</span>\\n\\n\\n<span class=\\"token comment\\">// 缩进 2 个空格</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stringify</span><span class=\\"token punctuation\\">(</span>foo<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'name'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'age'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n<span class=\\"token comment\\">/* \\n{\\n  \\"name\\": \\"foo\\",\\n  \\"age\\": 18\\n}\\n */</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>JSON 也支持自定义的格式，就像<code v-pre>toString</code>一样，只要为对象添加<code v-pre>toJSON</code>方法，如果可用，那么<code v-pre>JSON.stringify</code>就会调用它</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">wife</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function\\">toJSON</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">'1'</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stringify</span><span class=\\"token punctuation\\">(</span>foo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// \\"1\\"</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>如果想要解码 JSON 对象就要用到<code v-pre>JSON.parse</code></p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'{\\"name\\":\\"foo\\",\\"age\\":18,\\"tag\\":[\\"person\\",\\"student\\"]}'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">parse</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>foo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// { name: 'foo', age: 18, tag: [ 'person', 'student' ] }</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>如果 JSON 中包含日期，会被解析为字符串，而不是日期对象</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'{\\"name\\":\\"foo\\",\\"age\\":18,\\"tag\\":[\\"person\\",\\"student\\"],\\"date\\":\\"2021-06-21T12:00:00\\"}'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">parse</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 此时的 date 是一个字符串</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lot</span><span class=\\"token punctuation\\">(</span>foo<span class=\\"token punctuation\\">.</span>date<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getFullYear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// TypeError</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>因此就必须借助第二个参数来对转换值进行映射：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'{\\"name\\":\\"foo\\",\\"age\\":18,\\"tag\\":[\\"person\\",\\"student\\"],\\"date\\":\\"2021-06-21T12:00:00\\"}'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">parse</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">key<span class=\\"token punctuation\\">,</span> value</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 当 key 为 date 时进行值类型的转换</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">==</span> <span class=\\"token string\\">'date'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> value<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 此时的 date 是一个日期对象，可以正常调用</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lot</span><span class=\\"token punctuation\\">(</span>foo<span class=\\"token punctuation\\">.</span>date<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getFullYear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 2021</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h2 id=\\"正则表达式\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#正则表达式\\" aria-hidden=\\"true\\">#</a> 正则表达式</h2>\\n<p>在 JavaScript中，正则表达式也是对象，可以使用两种方式来创建一个正则表达式。两种方式都是等价的，在实际应用中，通常使用字面量表达式，构建时还可以添加第二个参数，表示修饰符</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 字面量</span>\\n<span class=\\"token keyword\\">const</span> re1 <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">abc</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">i</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 构造函数</span>\\n<span class=\\"token keyword\\">const</span> re2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">RegExp</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'abc'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'i'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>正则对象有修饰符相关属性</p>\\n<ul>\\n<li><code v-pre>ignoreCase</code>：是否设置了<code v-pre>i</code></li>\\n<li><code v-pre>global</code>：是否设置了<code v-pre>g</code></li>\\n<li><code v-pre>multiline</code>：是否设置了<code v-pre>m</code></li>\\n<li><code v-pre>flags</code>：返回包含已设置的修饰符，按字母排序</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> reg <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">abc</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">igm</span></span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>reg<span class=\\"token punctuation\\">.</span>ignoreCase<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>reg<span class=\\"token punctuation\\">.</span>global<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>reg<span class=\\"token punctuation\\">.</span>multiline<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>reg<span class=\\"token punctuation\\">.</span>flags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// gim</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>与修饰符无关的属性</p>\\n<ul>\\n<li><code v-pre>lastIndex</code>：表示下一次搜索的位置</li>\\n<li><code v-pre>source</code>：返回正则表达式的字符串形式，不包括反斜杠</li>\\n</ul>\\n<p>实例方法</p>\\n<ul>\\n<li><code v-pre>test(str)</code>：是否能匹配当前字符串</li>\\n<li><code v-pre>exec(str)</code>：返回匹配结果</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> reg <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">a</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">;</span>\\nreg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'abcabc'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>如果带有<code v-pre>g</code>修饰符，每一次<code v-pre>test</code>方法都会从上一次结束位置开始向后匹配</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> reg <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">a</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">g</span></span><span class=\\"token punctuation\\">;</span>\\nreg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>reg<span class=\\"token punctuation\\">.</span>lastIndex<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'abcabc'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 0, true</span>\\nreg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>reg<span class=\\"token punctuation\\">.</span>lastIndex<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'abcabc'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 1, true </span>\\nreg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span>reg<span class=\\"token punctuation\\">.</span>lastIndex<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'abcabc'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 4, false</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>带有<code v-pre>g</code>修饰符时，正则对象的<code v-pre>lastIndex</code>可以指定开始搜索的位置</p>\\n<p><code v-pre>exec</code>方法会返回一个数组，成员是匹配成功的字符串，否则返回<code v-pre>null</code></p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> reg <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">a</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">;</span>\\nreg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exec</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'abcabc'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// [ 'a', index: 0, input: 'abcabc', groups: undefined ]</span>\\nreg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exec</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'bcd'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// null</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>成功时还包含两个属性</p>\\n<ul>\\n<li><code v-pre>input</code>：匹配到的字符串</li>\\n<li><code v-pre>index</code>：匹配成功的开始位置</li>\\n</ul>\\n<p>如果正则表达式加上了<code v-pre>g</code>修饰符，就可以使用多次<code v-pre>exec</code>方法，下一次搜索的位置从上一次匹配成功结束的位置开始</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> reg <span class=\\"token operator\\">=</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">a</span><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-flags\\">g</span></span><span class=\\"token punctuation\\">;</span>\\nreg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exec</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'abcabc'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>所以在<code v-pre>g</code>修饰符允许匹配多次的情况下，可以利用循环完成全部匹配</p>\\n<p>对一个正则对象使用<code v-pre>typeof</code>会得到<code v-pre>object</code></p>\\n","headers":[{"level":2,"title":"包装对象","slug":"包装对象","link":"#包装对象","children":[]},{"level":2,"title":"Math","slug":"math","link":"#math","children":[]},{"level":2,"title":"时间","slug":"时间","link":"#时间","children":[]},{"level":2,"title":"JSON","slug":"json","link":"#json","children":[]},{"level":2,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[]},{"level":2,"title":"eval","slug":"eval","link":"#eval","children":[]},{"level":2,"title":"URI","slug":"uri","link":"#uri","children":[]},{"level":2,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":2,"title":"判断","slug":"判断","link":"#判断","children":[]}],"git":{"createdTime":1646459606000,"updatedTime":1647337761000,"contributors":[{"name":"JQiue","email":"861947542@qq.com","commits":3}]},"readingTime":{"minutes":8.29,"words":2488},"autoDesc":true,"localizedDate":"2022年3月5日","filePathRelative":"js/standard.md"}`);export{n as data};
