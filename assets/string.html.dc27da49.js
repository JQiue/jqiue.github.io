import{ac as n,A as s,B as a,ae as t}from"./framework.a879f165.js";const e={},p=t('<h2 id="不可变" tabindex="-1"><a class="header-anchor" href="#不可变" aria-hidden="true">#</a> 不可变</h2><h2 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a> 模板字符串</h2><p>模板字符串是一种增强的字符串写法，使用<code>`</code>来标记，用来解决字符串拼接麻烦的问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;JQiue&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I&#39;m </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JQiue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// I&#39;m JQiue</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>并且可以在模板字符串中嵌入表达式，使用<code>${expression}</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决多行字符串的问题，新插入的行都会成为模板字符串的部分</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\nHello\nI&#39;m JQiue\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在一个函数后使用模板字符串，就能够用函数解析模板字符串，然后在函数中返回想要返回的东西，这是一个非常高级的功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">tags</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &quot;I&#39;m &quot;, &#39;,&#39;, &#39; this year&#39; ] JQiue 22</span>\n<span class="token punctuation">}</span>\n\ntags <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I&#39;m </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token string">&#39;JQiue&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">22</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> this year</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><p>查找：</p><ul><li><code>str.indexOf(str, fromIndex)</code>：返回指定值第一次出现的索引</li><li><code>str.lastIndexOf(str)</code>：返回指定值最后一次出现的索引</li><li><code>str.chatAt(index)</code>：返回在指定位置的字符</li><li><code>str.match(reg)</code>：返回一个字符串匹配正则表达式的结果</li><li><code>str.search(reg)</code>：执行正则表达式和 String 对象之间的一个搜索匹配</li><li><code>str.includes(str, fromIndex)</code>：是否包含指定参数</li></ul><p>截取：</p><ul><li><code>str.slice(start, end)</code>：提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串</li><li><code>str.substring(start， end)</code>：返回一个字符串在开始索引到结束索引之间的一个子集</li><li><code>str.trim()</code>：删除字符串两端的空白</li></ul><p>替换：</p><ul><li><code>str.replace(reg|substr, newSubStr)</code>：返回一个由替换值（replacement）替换部分或所有的模式（pattern）匹配项后的新字符串</li></ul><p>转换：</p><ul><li><code>str.toLowerCase()</code>：转换为小写</li><li><code>str.toUpperCase()</code>：转换为大写</li><li><code>str.split(reg|separator)</code>：使用指定的分割符，将字符串分割成数组</li></ul><p>其他：</p><ul><li><code>str.toString()</code>：返回指定对象的字符串形式</li><li><code>str.valueOf()</code>：字符串对象转换为其对应的基本字符串</li><li><code>str.concat(str1, str2, ...)</code>：连接字符串</li><li><code>str.repeat(conut)</code>：返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本</li><li><code>str.toSource()</code>：返回对象的源代码</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>',22),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","string.html.vue"]]);export{r as default};
