import{ac as i,A as d,B as u,H as s,ad as e,z as a,M as n,ae as t,O as c}from"./framework.a879f165.js";const r={},k=t(`<p>浏览器是一个伟大的发明，将任何人连接到世界各种地方，让我们可以感受到来自全球的信息，且浏览器作为跨平台的应用，只需要打开浏览器就可以找到想要的信息</p><p>前端是连接用户的最后一层，用于和展示和用户之间交互，那么 Web 前端指的是运行在浏览器中的程序，常说的各种网站就是运行在浏览器上的程序</p><p>而网站是由各种网页组成的应用，网页则由 HTML，CSS，JavaScript 三剑客组成。HTML 负责网页的结构，CSS 负责网页的样式，JavaScript 负责网页的行为。它们是不同的技术，虽然各司其职，但有相互作用的部分</p><p>但近几年来，单页面应用的出现率水涨船高，单页应用和多页应用的区别很简单，就是一个 HTML 文件构成的应用，当需要更新页面时，移除部分内容，并新增一些内容进来，像画画的擦除一样，只在一张纸上作画</p><p>这种方式的好处是，页面的数据状态都会被保存，且对用户的体验更好，无需跳转到其他页面。但缺点也很明显，非常不利于 SEO，请求等待时间长，因为所有的东西都被塞到一个页面上</p><p>多页面应用相对来说，是由多个 HTML 文件构成的应用，更新页面时一般是跳转，只有少部分是替换元素。在跳转的时候对用户来说体验是肯定没有单页面应用好的，因为它需要加载另一个页面的资源，肯定没有单页面丝滑</p><p>Web 前端的未来趋势：</p><ul><li>更加的移动优先</li><li>入口应用会小程序化</li><li>简化的 Web 设计</li></ul><h2 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h2><p>网页都是通过浏览器进行渲染的，不同的浏览器实现的标准不同，就导致同样的代码渲染出来的效果不一样。浏览器发展至今已经经历无数竞争和淘汰，现在常见的主流浏览器有：</p><ul><li>IE - 濒临淘汰，由于部分 PC 应用需要借助 IE 内核，因此被 Windows 一直保留至今</li><li>Firefox - 火狐是 Mozilla 开发的一款开源浏览器，支持大部分标准</li><li>Safari - 苹果公司开发的，只能在苹果设备上使用</li><li>Opera - 不是一款开源浏览器，有点市场份额</li><li>Google Chrome - 如今最多人使用的一款浏览器，大部分开发者都在使用</li><li>Edge - 和 Google Chrome 同款内核，微软开发，替代 Google Chrome 的绝佳选择，被内置 Windows 10</li></ul><p>浏览器最重要的部分是内核，像国内诸如：360，搜狗，百度，UC，猎豹等浏览器都是套皮浏览器，浏览器内核又分为两种：<strong>渲染引擎和 JS 引擎</strong></p><p>渲染引擎负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</p><ul><li>Trident - IE/old Edge</li><li>Webkit - Safari</li><li>Chromium/Blink/webkit - chrome/new Edge</li><li>Gecko - Firefox</li><li>blink/Webkit/Presto - Opera</li></ul><p>JavaScript 引擎则是解析 Javascript 语言并执行</p><ul><li>JScript（IE3.0-IE8.0）/Chakra（IE9+） - IE/Edge</li><li>JSCore/Nitro - Safari</li><li>V8 - Google Chrome/Edge</li><li>SpiderMonkey（1.0-3.0）/ TraceMonkey（3.5-3.6）/ JaegerMonkey（4.0-） - FireFox</li><li>Linear A（4.0-6.1）/ Linear B（7.0-9.2）/ Futhark（9.5-10.2）/ Carakan（10.5-） - Opera</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>SpiderMonkey 是第一款 JS 引擎，JavaScript 之父 Brendan Eich 在网景的时候写的</p></div><h2 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> HTML</h2><p>HTML 是 Hypertext Markup Language 的英文缩写，即超文本标记语言，它是一种标记语言而非编程语言，超文本的意思就是不仅仅是文字，还可以包含图片，链接，音乐，甚至程序等非文字元素，HTML 文件的后缀名是 <code>.html</code>，在以前可能是<code>.htm</code>，这是因为操作系统的后缀名长度有限制</p><p>这是 HTML 的发展史：</p><ol><li>1993 年由互联网工程小组发布 HTML1.0</li><li>1995 年发布 HTML2.0</li><li>1996 年发布 HTML3.2，W3C 推荐标准</li><li>1997 年发布 HTML4.0，W3C 推荐标准</li><li>1999 年发布 HTML4.01，W3C 推荐标准</li><li>2008 年 HTML5 草案公布，现在还在完善中</li><li>2014 年 10 月 29 日，HTML5 正式发布</li></ol><p>网页由三部分组成：</p><ul><li>标记（markup）：对文本内容进行描述</li><li>文本内容（text content）：纯文本内容</li><li>对其他文件的引用（reference）：引用音频，视频，图像，以及样式和 JavaScript 文件</li></ul><p>这些成分都由纯文本内容组成，因此可以保存为文本文件，然后在任意平台用浏览器运行，这说明 HTML 是非常容易创建的</p><p>一个 HTML 文档由四个基本部分组成：</p><ul><li><code>&lt;!DOCTYPE html&gt;</code>：此声明必须位于的第一行，这是为了在不同的浏览器中尽可能得到一致的表现，但它不是 HTML 标签，不区分大小写，且说明这是一个 HTML5 页面</li><li><code>&lt;html&gt;</code>：是所有 HTML 元素的根元素，页面的其他内容都会包裹于此元素之内</li><li><code>&lt;head&gt;</code>：提供一些与浏览器解析或者搜索引擎抓取等相关的信息，这些信息不会直接暴露给浏览者，除了<code>&lt;title&gt;</code>标签规定的标题（它规定了网页的标题）</li><li><code>&lt;body&gt;</code>：网页的主体部分，浏览者所能看到的页面都是它提供的</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标签-元素-属性-值" tabindex="-1"><a class="header-anchor" href="#标签-元素-属性-值" aria-hidden="true">#</a> 标签，元素，属性，值</h3><p>元素由开始标签、内容和结束标签组成，开始标签是放在一对尖括号中的元素名字以及可能包含的属性，结束标签是放在一对尖括号中的斜杠加标签的名字，元素中包含的文本内容是网页中最基本的成分</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tagname</span><span class="token punctuation">&gt;</span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tagname</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还有一些元素是空元素，即不包含文本也不包含其他元素，看起来像开始标签和结束标签的结合，斜杠是可选的</p><p>元素之间有嵌套和并列关系，必须是正确的嵌套</p><p>属性包含了元素的额外信息，在 HTML5 中属性值的引号是可选的，但建议加上</p><p>HTML 中的属性为元素提供附加的信息，不会被展示。在 HTML5 中新增了全局属性的概念，所谓全局属性，是指可以对任何元素都可以使用的属性</p><ul><li><code>class</code>：规定元素的类名</li><li><code>id</code>：规定元素的唯一 id</li><li><code>title</code>：规定元素的额外信息</li><li><code>style</code>：规定元素的行内样式</li><li><code>lang</code>：规定元素内容的语言</li><li><code>data-*</code>：给予元素存储自定义属性的能力</li><li><code>tabindex</code>：指示元素是否可以聚焦</li><li><code>draggable</code>：允许拖拽元素</li><li><code>hidden</code>：隐藏元素</li><li><code>contenteditable</code>：元素的内容是否可以被编辑</li></ul><h3 id="空格折叠现象" tabindex="-1"><a class="header-anchor" href="#空格折叠现象" aria-hidden="true">#</a> 空格折叠现象</h3><p>在 HTML 中，会将文本内容中连续的空格/换行看成一个空格，但是标签“内壁”和文字之间的空格会被忽略</p><h3 id="字符实体" tabindex="-1"><a class="header-anchor" href="#字符实体" aria-hidden="true">#</a> 字符实体</h3><p>想要实现多个空格，就必须用到<strong>字符实体</strong>，这有点像传统编程语言中的转义</p>`,39),g=a("div",{class:"language-html line-numbers-mode","data-ext":"html"},[a("pre",{class:"language-html"},[a("code",null,[a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("div")]),a("span",{class:"token punctuation"},">")]),n("Hello     World"),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("div")]),a("span",{class:"token punctuation"},">")]),n(`
`),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("div")]),a("span",{class:"token punctuation"},">")]),n("Hello"),a("span",{class:"token entity named-entity",title:" "},"&nbsp;"),a("span",{class:"token entity named-entity",title:" "},"&nbsp;"),a("span",{class:"token entity named-entity",title:" "},"&nbsp;"),a("span",{class:"token entity named-entity",title:" "},"&nbsp;"),n("world"),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("div")]),a("span",{class:"token punctuation"},">")]),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),m=t('<div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>&amp;nbsp;</code>是最常用的空格，也就是按下 space 键产生的空格。该空格占据的宽度会受字体影响，在<code>inline-block</code>元素中可能会有一些不好的行为，但在两端布局中又是不可少的。实际上还有其他的空格，比如<code>&amp;ensp;</code>、<code>&amp;emsp;</code>、<code>&amp;thinsp;</code>。其中<code>&amp;ensp;</code>占据的宽度正好是 1/2 的中文宽度，<code>&amp;emsp;</code>占据的宽度正好是 1 中文宽度，都受字体影响较少</p></div><p>还有一种常见的情况是要显示的字符是 HTML 语法结构的组成部分，比如大于号(&gt;)，小于号(&lt;)</p>',2),v=a("div",{class:"language-html line-numbers-mode","data-ext":"html"},[a("pre",{class:"language-html"},[a("code",null,[a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("div")]),a("span",{class:"token punctuation"},">")]),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("div")]),a("span",{class:"token punctuation"},">")]),n("是很重要的标签"),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("div")]),a("span",{class:"token punctuation"},">")]),n(`
`),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("div")]),a("span",{class:"token punctuation"},">")]),a("span",{class:"token entity named-entity",title:"<"},"&lt;"),n("div"),a("span",{class:"token entity named-entity",title:">"},"&gt;"),n("是很重要的标签"),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("div")]),a("span",{class:"token punctuation"},">")]),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),h=t(`<p>浏览器并不会正确解析<code>&lt;div&gt;&lt;div&gt;是很重要的标签&lt;/div&gt;</code>，这是因为解析时会将标签进行配对，再加上一些容错机制，导致没有显示，当把<code>&lt;</code>，<code>&gt;</code>分别用字符实体<code>&amp;lt;</code>,<code>&amp;gt;</code>转义表示，字符实体的作用又一次得到体现</p><p>这是一些部分字符实体：</p><table><thead><tr><th>显示结果</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr></thead><tbody><tr><td> </td><td>空格</td><td><code>&amp;nbsp;</code></td><td><code>&amp;#160;</code></td></tr><tr><td>&lt;</td><td>小于号</td><td><code>&amp;lt;</code></td><td><code>&amp;#60;</code></td></tr><tr><td>&gt;</td><td>大于号</td><td><code>&amp;gt;</code></td><td><code>&amp;#62;</code></td></tr><tr><td>&amp;</td><td>和号</td><td><code>&amp;amp;</code></td><td><code>&amp;#38;</code></td></tr><tr><td>&quot;</td><td>引号</td><td><code>&amp;quot;</code></td><td><code>&amp;#34;</code></td></tr><tr><td>&#39;</td><td>撇号</td><td><code>&amp;apos;</code> (IE不支持)</td><td><code>&amp;#39;</code></td></tr><tr><td>¢</td><td>分（cent）</td><td><code>&amp;cent;</code></td><td><code>&amp;#162;</code></td></tr><tr><td>£</td><td>镑（pound）</td><td><code>&amp;pound;</code></td><td><code>&amp;#163;</code></td></tr><tr><td>¥</td><td>元（yen）</td><td><code>&amp;yen;</code></td><td><code>&amp;#165;</code></td></tr><tr><td>€</td><td>欧元（euro）</td><td><code>&amp;euro;</code></td><td><code>&amp;#8364;</code></td></tr><tr><td>§</td><td>小节</td><td><code>&amp;sect;</code></td><td><code>&amp;#167;</code></td></tr><tr><td>©</td><td>版权（copyright）</td><td><code>&amp;copy;</code></td><td><code>&amp;#169;</code></td></tr><tr><td>®</td><td>注册商标</td><td><code>&amp;reg;</code></td><td><code>&amp;#174;</code></td></tr><tr><td>™</td><td>商标</td><td><code>&amp;trade;</code></td><td><code>&amp;#8482;</code></td></tr><tr><td>×</td><td>乘号</td><td><code>&amp;times;</code></td><td><code>&amp;#215;</code></td></tr><tr><td>÷</td><td>除号</td><td><code>&amp;divide;</code></td><td><code>&amp;#247;</code></td></tr></tbody></table><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><p>HTML 中的注释语法如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 注释内容 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="语义化" tabindex="-1"><a class="header-anchor" href="#语义化" aria-hidden="true">#</a> 语义化</h3><p>顾名思义，语义化就是让标签具有一定的语言含义，HTML 的目的是实现页面的布局，即便不遵照语义化原则对于浏览器渲染基本没有影响。但是语义化布局更具有优势，以至于 HTML5 标准新增大量语义化标签。在 HTML5 之前，语义化布局虽然没有当前灵活，但是语义化布局的观念已经被广为接受，且用于实践</p><ul><li>尽量做到语义化布局，而不是使用无语义的标签</li><li>但是不要误以为<code>&lt;div&gt;</code>或者<code>&lt;span&gt;</code>等无语义话标签已经失去意义，在单纯作为容器的场景下十分有用</li><li>如果需要对文本进行强调，那么建议使用<code>&lt;strong&gt;</code>或者<code>&lt;em&gt;</code>，而不是使用<code>&lt;b&gt;</code>或者<code>&lt;i&gt;</code></li><li><code>&lt;input&gt;</code>标签对应的说明文本尽量使用<code>&lt;label&gt;</code>标签</li><li>如果使用<code>&lt;table&gt;</code>表格，那么尽量发挥表格相关元素的对应作用，比如<code>&lt;th&gt;</code>、<code>&lt;thead&gt;</code>或者<code>&lt;tfoot&gt;</code></li></ul><h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><p>CSS 是一门样式表语言，即不是标记语言，也不是编程语言，仅仅使用 HTML 编写的网页奇丑无比，需要 CSS 来帮助美化，也就是说 CSS 决定了元素的样式如何被渲染的问题</p><p>这是 CSS 的发展史：</p><ol><li>1994 年 CSS 第一次诞生</li><li>1996 年 W3C 发布 CSS1</li><li>1998 年 W3C 发布 CSS2 和 CSS2.1，是浏览器支持最多的版本</li><li>2011 年 W3C 发布 CSS3，逐渐被各大浏览器所支持</li></ol><h3 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h3><ul><li>内嵌样式（行内样式）</li><li>内部样式（内联样式）</li><li>外部样式（外联样式）</li></ul><p>在元素内部使用，通过全局属性<code>style</code>直接将 CSS 代码写到元素身上，不需要选择器，维护性较低，不推荐使用</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>内嵌样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>&lt;head&gt;</code>中定义<code>&lt;style&gt;</code>，将样式代码写入<code>&lt;style&gt;</code>中，需要选择器语法，维护性较高</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">div</span> <span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>内部样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将样式代码写到一个独立的<code>.css</code>文件中，使用<code>&lt;link&gt;</code>引入，文档和样式文件相分离，维护性最好，最推荐使用的方式</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* style.css*/</span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>外部样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种通过<code>@import</code>语法引入 CSS 的方式，它是 CSS 提供的语法规则，只能引用 CSS，从兼容性上来看不如<code>&lt;link&gt;</code>，<code>&lt;link&gt;</code>不仅仅只能引入 CSS。<code>@import</code>引入的 CSS 只会在页面加载完后进行加载，网速太慢可以看到样式未应用的问题，且<code>@import</code>不能够被 JavaScript 所操作，所以慎用</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token atrule"><span class="token rule">@import</span><span class="token punctuation">(</span><span class="token string">&#39;./style.css&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>@import 引入<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，更推荐外部样式表，一个外部 CSS 文件可以被很多网页共用，并且可以提高网页的加载速度。如果一个网页引用了一个 CSS 文件，这个文件多半在缓存区，因为它会被浏览器缓存</p><div class="custom-container danger"><p class="custom-container-title">CSS 加载会堵塞网页吗？</p><p>CSS 加载不会堵塞 DOM 解析，但是会堵塞 DOM 渲染，这是因为会等待 CSS 加载完成，然后按照最终的样式去渲染 DOM，并且 CSS 还会堵塞后面的 JavaScript 脚本执行</p></div><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p>行内样式中的语法就是<code>k: v</code>形式，以<code>;</code>分开</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tag</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">属性1</span><span class="token punctuation">:</span>值1<span class="token punctuation">;</span><span class="token property">属性2</span><span class="token punctuation">:</span>值2<span class="token punctuation">;</span>...</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tag</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而内部和外部中的 CSS 语法构成比较简单，主要有以下两个部分组成：</p><ul><li>选择器</li><li>规则集</li></ul><p>选择器用于匹配对应的元素，选择器的种类众多，且可以组合使用，具体定义匹配元素的样式，由具体的声明构成，声明与声明之间用<code>;</code>分隔，每一条声明由 CSS 属性和对应的属性值构成</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">选择器</span> <span class="token punctuation">{</span>
  <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
  <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
  ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，CSS 中也支持注释语法，但不能嵌套另一个注释</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 注释内容 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="三大特性" tabindex="-1"><a class="header-anchor" href="#三大特性" aria-hidden="true">#</a> 三大特性</h3><p>CSS 三大特性决定着元素的属性是如何生效的：</p><ul><li>层叠性</li><li>继承性</li><li>优先性</li></ul><p><strong>层叠性</strong>是 CSS 处理冲突的一种能力，在同一个 CSS 样式规则中重复使用了某个属性，或不同的选择器选中后都使用了某个属性，才会发生层叠性，优先级较高的就会生效，CSS 全称就是层叠性样式表，由此可见一般</p>`,40),b=a("div",{class:"language-html line-numbers-mode","data-ext":"html"},[a("pre",{class:"language-html"},[a("code",null,[a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("p")]),n(),a("span",{class:"token attr-name"},"class"),a("span",{class:"token attr-value"},[a("span",{class:"token punctuation attr-equals"},"="),a("span",{class:"token punctuation"},'"'),n("example"),a("span",{class:"token punctuation"},'"')]),a("span",{class:"token punctuation"},">")]),n("层叠性"),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("p")]),a("span",{class:"token punctuation"},">")]),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),S=a("div",{class:"language-css line-numbers-mode","data-ext":"css"},[a("pre",{class:"language-css"},[a("code",null,[a("span",{class:"token selector"},"p"),n(),a("span",{class:"token punctuation"},"{"),n(`
  `),a("span",{class:"token property"},"color"),a("span",{class:"token punctuation"},":"),n(" red"),a("span",{class:"token punctuation"},";"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token selector"},".example"),n(),a("span",{class:"token punctuation"},"{"),n(`
  `),a("span",{class:"token property"},"color"),a("span",{class:"token punctuation"},":"),n(" blue"),a("span",{class:"token punctuation"},";"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),y=t('<p>部分父元素的属性会被后代所继承，但不是所有的属性都会被继承，以<code>color/font-/text-/line-/list-/cursor</code>开头的属性会被继承，更好的利用<strong>继承性</strong>可以提高效率</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>&lt;a&gt;</code>标签中的下划线和颜色都不会继承，<code>&lt;h&gt;</code>标签的文字大小也不会继承</p></div><p>当多个选择器选中同一个标签，并且设置相同的属性时，如何层叠就由<strong>优先级</strong>来确定：</p><ul><li>直接选中 - 如果是间接选中，谁离目标近就听谁的</li><li>相同选择器 - 如果都是直接选中，并且都是同类型选择器，谁写在后面就听谁的</li><li>不同选择器 - 如果都是直接选中，并且不是同类型的选择器，则会按照选择器的优先级来层叠</li></ul><p>一般情况下：<code>!important &gt; ID &gt; 类/属性/伪类 &gt; 标签/伪元素 &gt; 通配符 &gt; 继承 &gt; 浏览器默认</code></p><div class="custom-container tip"><p class="custom-container-title">!important</p><p><code>!important</code>用于提升直接选中选择器中的某个属性的优先级，提升为最高，只能用于直接选中</p></div>',6),C=a("div",{class:"language-html line-numbers-mode","data-ext":"html"},[a("pre",{class:"language-html"},[a("code",null,[a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("p")]),n(),a("span",{class:"token attr-name"},"class"),a("span",{class:"token attr-value"},[a("span",{class:"token punctuation attr-equals"},"="),a("span",{class:"token punctuation"},'"'),n("example"),a("span",{class:"token punctuation"},'"')]),a("span",{class:"token punctuation"},">")]),n("优先级"),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("p")]),a("span",{class:"token punctuation"},">")]),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),x=a("div",{class:"language-css line-numbers-mode","data-ext":"css"},[a("pre",{class:"language-css"},[a("code",null,[a("span",{class:"token selector"},"p"),n(),a("span",{class:"token punctuation"},"{"),n(`
  `),a("span",{class:"token property"},"color"),a("span",{class:"token punctuation"},":"),n(" red "),a("span",{class:"token important"},"!important"),a("span",{class:"token punctuation"},";"),n(` 
`),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token selector"},".example"),n(),a("span",{class:"token punctuation"},"{"),n(`
  `),a("span",{class:"token property"},"color"),a("span",{class:"token punctuation"},":"),n(" blue"),a("span",{class:"token punctuation"},";"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),E=t(`<h3 id="权重问题" tabindex="-1"><a class="header-anchor" href="#权重问题" aria-hidden="true">#</a> 权重问题</h3><p>当多个选择器混合在一起使用时，必须通过权重的计算来判断优先级：</p><ol><li>ID 选择器多的优先级高，如果 ID 选择器相同则看类选择器的个数</li><li>类选择器多的优先级高，如果类名选择器相同则看标签选择器的个数</li><li>以此类推...</li><li>如果都一样，则按照优先级第二条处理</li></ol><div class="custom-container warning"><p class="custom-container-title">注意</p><p>只有直接选中的元素才需要进行权重计算，间接选中的不算</p></div><h3 id="媒体相关的样式表" tabindex="-1"><a class="header-anchor" href="#媒体相关的样式表" aria-hidden="true">#</a> 媒体相关的样式表</h3><p>这种样式表可以用于指定的设备媒体类型，当处于某种设备类型时应用该样式表，常见的媒体类型有：</p><ul><li>screen：默认值，可见的屏幕媒体</li><li>print：打印机</li><li>projection：投影</li><li>speech：阅读器</li><li>braile：盲文</li><li>embossed：盲文印刷</li><li>handheld：手持设备</li><li>tty：打字机</li><li>tv：电视类型</li><li>all：所有输出设备</li></ul><p>目前使用最广的就是 all、screen、print</p><p>有两种用法：</p><ul><li>使用<code>link</code>元素的<code>media</code>属性指定类型</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>screen<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>print<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>样式规则中使用<code>@media</code>指定类型</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> screen</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> print</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合 CSS3 中引入的媒体查询就可以形成非常强悍的用法，通过这些技术可以根据设备的属性来应用不同的样式</p><h3 id="元素的默认样式" tabindex="-1"><a class="header-anchor" href="#元素的默认样式" aria-hidden="true">#</a> 元素的默认样式</h3><p>每个 Web 浏览器都有一个内置的 CSS 文件，它决定了每个 HTML 元素的默认样式，可以通过 CSS 来覆盖</p><p>由于 HTML 标签自带一些 CSS 属性，导致在调试样式的时候会出现各种奇怪的问题，尤其是不同核心的浏览器对 CSS 的解析效果呈现各异，导致期望的效果跟浏览器的“理解”效果有偏差，为了大概率避免这些问题需要对 CSS 进行重置（复位），尽量保证元素在不同浏览器下是统一的，下面是一些几种常见的重置 CSS 样式代码：</p>`,17),f={href:"https://github.com/necolas/normalize.css",target:"_blank",rel:"noopener noreferrer"},_={href:"https://gist.github.com/freetonik/b432fa2ea224eca2f2458838049a8e7f",target:"_blank",rel:"noopener noreferrer"},T={href:"https://clarle.github.io/yui3/yui/docs/cssreset/",target:"_blank",rel:"noopener noreferrer"},q=a("h2",{id:"javascript",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#javascript","aria-hidden":"true"},"#"),n(" JavaScript")],-1),M=t(`<h2 id="网页的-seo" tabindex="-1"><a class="header-anchor" href="#网页的-seo" aria-hidden="true">#</a> 网页的 SEO</h2><p>SEO（搜索引擎优化）利用搜索引擎优化的规则提高网站在有关搜索引擎内的自然排名，让网站在搜索引擎的结果内占据领先地位，获得更多流量收益</p><p>title 是搜索引擎收录网站时显示的标题，为了吸引用户点击，合理的设置 title 是非常有必要的</p><p>网页也具有关键词和页面描述，也是非常重要的 SEO 手段，通常使用 meta 标签来设置</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 关键词 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Keywords<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 网页描述 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DeScription<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li>whatwg</li><li>W3C</li><li>MDN</li><li>CSS 权威指南</li><li>CSS 网站布局实录</li><li>精通 CSS</li><li>超越 CSS：Web 设计艺术精髓</li><li>CSS 揭秘</li><li>CSS 禅意花园</li><li>图解 CSS3</li><li>Web 界面设计</li><li>CSS 世界</li><li>设计心理学</li></ul>`,7);function L(H,B){const p=c("CodeDemo"),l=c("ExternalLinkIcon"),o=c("RouterLink");return d(),u("div",null,[k,s(p,{id:"code-demo-322",type:"normal",title:"%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E7%A9%BA%E6%A0%BC",code:"eJyrVsooyc1RslKySckss/NIzcnJVwCB8PyinBQbfZBgTB5CTi0vqbjAGpMsR1auVAsA2p8dXg=="},{default:e(()=>[g]),_:1}),m,s(p,{id:"code-demo-333",type:"normal",title:"%E5%85%B3%E9%94%AE%E5%AD%97%E5%86%B2%E7%AA%81",code:"eJyrVsooyc1RslKyScksswMTz2asf7qv42V774tljc9ntTxb0P587T4bfZBUTB5YhVpOiTWQVksvscarWKkWAJt4L2M="},{default:e(()=>[v]),_:1}),h,s(p,{id:"code-demo-759",type:"normal",title:"%E5%B1%82%E5%8F%A0%E6%80%A7",code:"eJyrVsooyc1RslKyKVBIzkksLraNUUqtSMwtyEmNUbJ7urHpaf+CZw3LbfQL7GLylHSUkouLgYoLFKpj8hQUkvNz8ousFIpSU6xj8mpj8vSgOlFkk3JKUyHSSrUA0yAoSQ=="},{default:e(()=>[b,S]),_:1}),y,s(p,{id:"code-demo-799",type:"normal",title:"!important",code:"eJyrVsooyc1RslKyKVBIzkksLraNUUqtSMwtyEmNUbJ7smfG09aO57uW2+gX2MXkKekoJRcXAxUXKFTH5CkoJOfn5BdZKRSlpigoZuYW5BeVJOaVWCvE5NXG5OlBTUFRmZRTmmoNllaqBQDgvCzB"},{default:e(()=>[C,x]),_:1}),E,a("ul",null,[a("li",null,[a("a",f,[n("https://github.com/necolas/normalize.css"),s(l)])]),a("li",null,[a("a",_,[n("https://gist.github.com/freetonik/b432fa2ea224eca2f2458838049a8e7f"),s(l)])]),a("li",null,[a("a",T,[n("https://clarle.github.io/yui3/yui/docs/cssreset/"),s(l)])])]),q,a("p",null,[n("至于怎么在 HTML 中使用，详见 "),s(o,{to:"/js/#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E9%80%89%E6%8B%A9%E4%B8%8E%E4%BD%BF%E7%94%A8"},{default:e(()=>[n("在浏览器中使用 JavaScript")]),_:1})]),M])}const J=i(r,[["render",L],["__file","index.html.vue"]]);export{J as default};
