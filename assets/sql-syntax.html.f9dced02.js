import{ac as s,A as n,B as a,ae as e}from"./framework.a879f165.js";const t={},p=e(`<p>SQL 是一种结构化查询语言，SQL 是专门和数据库进行沟通的语言，它和其它语言（C，Java，JavaScript）不同的是，没有很多单词，因为 SQL 的目的仅仅是提供一种从数据库读写数据的方法</p><p>无论是什么数据库管理系统，实际上这些数据库管理系统都在遵循 SQL 语言，它类似于一个标准，在整个计算机世界中，最重要的就是数据，SQL 就是直接与数据打交道的语言，而且 SQL 从诞生至今并没有发送太大的变化，相对于其他语言来说，SQL 的半衰期非常长</p><p>SQL 有非常重要的两个标准，分别是 SQL92 和 SQL99，分别代表了 92 年和 99 年颁布的标准，如今使用的 SQL 仍然遵守着这些标准，SQL 是一种通用性强，变化相对少，上手容易的语言</p><p>SQL 并不像其他语言那样，学习需要大量的程序基础，它更像是一门英语，就好像用英语单词向数据库进行对话一样，所以 SQL 语言被分为四个部分：</p><ul><li>DDL（Data Definition Language）数据定义语言，用来定义数据库对象，包括数据库、数据表和列，可以创建、删除和修改数据库和表的结构</li><li>DML（Data Manipulation Language）数据操作语言，用来操作和数据相关的记录，比如增加、删除、修改数据表中的记录</li><li>DCL（Data Control Language）数据控制语言，用来定义访问权限和安全级别</li><li>DQL（Data Query Language）数据查询语言，用来查询想要的记录，它是最重要的一部分，大多数情况下都是在和查询打交道</li></ul><h2 id="ddl" tabindex="-1"><a class="header-anchor" href="#ddl" aria-hidden="true">#</a> DDL</h2><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> CREATE</h3><p><code>CREATE</code>关键字用来创建数据库和表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建数据库</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> database_name<span class="token punctuation">;</span>
<span class="token comment">-- 创建数据库同时指定编码</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> database_name <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集<span class="token punctuation">;</span>
<span class="token comment">-- 如果不存在就创建</span>
<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> database_name
<span class="token comment">-- 创建表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">(</span>
  column_name1 类型 约束<span class="token punctuation">,</span>
  column_name2 类型 约束
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>
  id <span class="token keyword">int</span><span class="token punctuation">,</span>
  stu_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  stu_age <span class="token keyword">int</span><span class="token punctuation">,</span>
  stu_score <span class="token keyword">int</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="alter" tabindex="-1"><a class="header-anchor" href="#alter" aria-hidden="true">#</a> ALTER</h3><p><code>ALTER</code>关键字用来修改数据库和表的操作</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 修改数据库</span>
<span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> database_name <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集
<span class="token comment">-- 添加一列</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> column_name 类型<span class="token punctuation">;</span>
<span class="token comment">-- 删除一列</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DROP</span> column_name 类型<span class="token punctuation">;</span>
<span class="token comment">-- 修改字段类型</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">MODIFY</span> column_name 类型<span class="token punctuation">;</span>
<span class="token comment">-- 修改表名</span>
<span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> curent_table_name <span class="token keyword">to</span> new_table_name<span class="token punctuation">;</span>
<span class="token comment">-- 修改列名</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name CHANGE current_column_name new_column_name 类型<span class="token punctuation">;</span>
<span class="token comment">-- 修改字符集</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示创建表的信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>表的字符集无需特意设置，因为它跟创建数据库时的编码相同</p></div><h3 id="drop" tabindex="-1"><a class="header-anchor" href="#drop" aria-hidden="true">#</a> DROP</h3><p><code>DROP</code>关键字用来删除数据库和表的操作</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 删除数据库</span>
<span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> database_name<span class="token punctuation">;</span>
<span class="token comment">-- 删除表</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">;</span>
<span class="token comment">-- 删除一个字段</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DROP</span> column_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dml" tabindex="-1"><a class="header-anchor" href="#dml" aria-hidden="true">#</a> DML</h2><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> INSERT</h3><p><code>INSERT</code>用来向表中插入数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 插入一条数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> 
<span class="token keyword">VALUE</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 插入多条数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> 
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 可以省略字段名（必须插入所有的字段的值）</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>插入数据时，列名与列值的类型、个数、顺序要一一对应，值不能超过列定义的长度，插入字符串和日期时，必须使用单引号</p></div><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> UPDATE</h3><p><code>UPDATE</code>用来更新表中的数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">-- 根据条件语句修改指定列的值</span>
<span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> <span class="token keyword">column</span> <span class="token operator">=</span> <span class="token keyword">value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> DELETE</h3><p>删除所有记录</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除某一条记录</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">where</span> <span class="token keyword">column</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="truncate" tabindex="-1"><a class="header-anchor" href="#truncate" aria-hidden="true">#</a> TRUNCATE</h3><p>删除所有记录并截断表的结构</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">DELETE 和 TRUNCATE</p><p><code>DELETE</code>只会删除记录，但是表的结构还在 <code>TRUNCATE</code>不仅删除记录，也会删除表的结构，然后创建一个新表，速度比<code>DELETE</code>快</p></div><h2 id="dql" tabindex="-1"><a class="header-anchor" href="#dql" aria-hidden="true">#</a> DQL</h2><p>DQL 语句不会对数据进行改变，这个数据会从数据库中读到内存，以这种表的形式查询出来的数据称为虚拟结果集</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>不要纠结<code>SELECT</code>到底属于 DML 还是 DQL</p></div><p>这个表为下列查询提供：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>
  id <span class="token keyword">int</span><span class="token punctuation">,</span>
  stu_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  stu_age <span class="token keyword">int</span><span class="token punctuation">,</span>
  stu_gender <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  stu_score <span class="token keyword">int</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> SELECT</h3><p><code>*</code>查出所有字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询指定列</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>as</code>将查询出来的字段指定别名，可以省略不写</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column1 <span class="token keyword">AS</span> alias1<span class="token punctuation">,</span> column2 <span class="token keyword">AS</span> alias2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span> 
<span class="token keyword">SELECT</span> column1 alias1<span class="token punctuation">,</span> column2 alias2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>DISTINCT</code>可指定列的查询出来的数据不是重复的</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column1 <span class="token keyword">FROM</span> table_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果查询的列是数字类型就可以返回计算后的结果</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> age <span class="token operator">+</span> <span class="token number">10</span> <span class="token keyword">from</span> table_name
<span class="token comment">-- 和其他列进行计算</span>
<span class="token keyword">SELECT</span> math <span class="token operator">+</span> english <span class="token keyword">from</span> table_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件查询" tabindex="-1"><a class="header-anchor" href="#条件查询" aria-hidden="true">#</a> 条件查询</h3><p>条件查询就是根据<code>where</code>关键字指定的条件进行查询，符合条件的才会被查询出来</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">where</span> <span class="token keyword">column</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运算符不止有<code>=</code>，还有下列可用的运算符：</p><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th><th>解释</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>SELECT * FROM student WHERE stu_name = &#39;zs&#39;</td><td>查询 stu_name 等于 &#39;zs&#39; 的数据</td></tr><tr><td>!=</td><td>不等于</td><td>SELECT * FROM student WHERE stu_name != &#39;zs&#39;</td><td>查询 stu_name 不等于 &#39;zs&#39; 的数据</td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td>SELECT * FROM student WHERE stu_name &lt;&gt; &#39;zs&#39;</td><td>查询 stu_name 不等于 &#39;zs&#39; 的数据</td></tr><tr><td>&lt;</td><td>小于</td><td>SELECT * FROM student WHERE stu_age &lt; 18</td><td>查询 stu_age 小于 18 的数据</td></tr><tr><td>&gt;</td><td>大于</td><td>SELECT * FROM student WHERE stu_age &gt; 18</td><td>查询 stu_age 大于 18 的数据</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>SELECT * FROM student WHERE stu_age &lt;= 18</td><td>查询 stu_age 小于等于 18 的数据</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>SELECT * FROM student WHERE stu_age &gt; 18</td><td>查询 stu_age 大于等于 18 的数据</td></tr><tr><td>BETWEEN...AND...</td><td>值在什么范围</td><td>SELECT * FROM student WHERE id BETWEEN 10001 AND 10003</td><td>查询 id 值 10001 到 10003 之间的数据</td></tr><tr><td>IN(set)</td><td>固定范围值</td><td>SELECT * FROM student WHERE id IN (10001, 10002, 10003)</td><td>查询 id 为<code>10001</code>,<code>10002</code>,<code>10003</code>的值</td></tr><tr><td>IS NULL</td><td>为空</td><td>SELECT * FROM student WHERE stu_age IS NULL</td><td>查询 stu_age 为 NULL 的学生</td></tr><tr><td>AND</td><td>与</td><td>SELECT * FROM student WHERE id = 10001 AND stu_name = &#39;zs&#39;</td><td>查询 id 为 10001 且 stu_name 为 &#39;zs&#39; 的数据</td></tr><tr><td>OR</td><td>或</td><td>SELECT * FROM student WHERE id = 10001 OR stu_name = &#39;zs&#39;</td><td>查询 id 为 10001 或 stu_name 为 &#39;zs&#39; 的数据</td></tr><tr><td>NOT</td><td>非</td><td>SELECT 、* FROM student WHERE stu_gender IS NOT NULL</td><td>查询 stu_gender 不为 NULL 的数据</td></tr></tbody></table><h3 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h3><p>通过一种相对条件比较模糊的方式来查询数据，使用<code>LIKE</code>关键字来构成条件，又在其条件中提供了几个通配符来配合：</p><ul><li><code>_</code>：任意一个字符</li><li><code>%</code>：0 ~ n 个字符</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询任意 2 个字符</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> stu_name <span class="token operator">LIKE</span> <span class="token string">&#39;__&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询以 s 结尾的 2 个字符</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> stu_name <span class="token operator">LIKE</span> <span class="token string">&#39;_s&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询以 z 开头的 2 个字符</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> stu_name <span class="token operator">LIKE</span> <span class="token string">&#39;z_&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询以 z 开头的 n 个字符</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> stu_name <span class="token operator">LIKE</span> <span class="token string">&#39;z%&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询以任意字符开头且第二个字符为 u 的任意个字符</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> stu_name <span class="token operator">LIKE</span> <span class="token string">&#39;_u%&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 查询包含 s 的字符</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> stu_name <span class="token operator">LIKE</span> <span class="token string">&#39;%s%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字段控制" tabindex="-1"><a class="header-anchor" href="#字段控制" aria-hidden="true">#</a> 字段控制</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- DISTINCT 能够对查询的列进行去重</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> stu_name <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
<span class="token comment">-- 列的结果可以做运算得到形成新的列</span>
<span class="token keyword">SELECT</span> stu_age<span class="token punctuation">,</span> stu_score<span class="token punctuation">,</span> stu_score <span class="token operator">+</span> stu_age <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
<span class="token comment">-- 通过 IFNULL() 函数处理为列为空的值，如果为空，则会被视为第二个参数</span>
<span class="token keyword">SELECT</span> stu_age<span class="token punctuation">,</span> stu_score<span class="token punctuation">,</span> IFNULL<span class="token punctuation">(</span>stu_score<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> IFNULL<span class="token punctuation">(</span>stu_age<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h3><p><code>ORDER BY</code>关键字可以对结果进行排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 根据 stu_score 进行升序，默认关键字\`ASC\`可以省略不写</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> stu_score <span class="token keyword">ASC</span><span class="token punctuation">;</span>
<span class="token comment">-- 根据 stu_score 进行降序，添加关键字\`DESC\`</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> stu_score <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以进行组合排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询 stu_score 按降序排列，如果 stu_score 相同就按升序排列</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> stu_score <span class="token keyword">DESC</span><span class="token punctuation">,</span> stu_age <span class="token keyword">ASC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- COUNT() 统计列不为空的记录数</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
<span class="token comment">-- 统计该列不为空的记录数</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>stu_age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
<span class="token comment">-- SUM() 对列进行求和</span>
<span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
<span class="token comment">-- AVG() 求出列的平均值</span>
<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
<span class="token comment">-- MAX() 返回列的最大值</span>
<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
<span class="token comment">-- MAX() 返回列的最小值</span>
<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h3><p><code>GROUP BY</code>可以将列相同的值分为一组，通常和其他查询语句结合使用，单独使用只会查询每组中的第一条数据，意义不大。分组的目的是为了统计，一般会和聚合函数一起使用</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> stu_gender<span class="token punctuation">;</span>
<span class="token comment">-- GROUP_CONCAT() 用于将每个组的列值拼接成一个集合，MAX() 和 SUM() 会分别对每个组的值进行统计</span>
<span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>stu_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>stu_age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> stu_gender<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> stu_gender<span class="token punctuation">,</span> GROUP_CONCAT<span class="token punctuation">(</span>stu_score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> stu_score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> stu_gender <span class="token keyword">HAVING</span> <span class="token function">SUM</span><span class="token punctuation">(</span>stu_score<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">190</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">WHERE 和 HAVING</p><p><code>HAVING</code>作用和<code>WHERE</code>一样，但只能用于<code>GROUP BY</code>，<code>WHERE</code>会在分组之前进行数据筛选，<code>HAVING</code>会在分组之后进行数据筛选，同时可以使用聚合函数，<code>WHERE</code>是不可以的</p></div><h3 id="limit" tabindex="-1"><a class="header-anchor" href="#limit" aria-hidden="true">#</a> limit</h3><p><code>limit</code>可以限制查询记录的条数，常用于分页</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 只查询三条</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">-- 从第 2 条开始，只显示 6 条</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="select-的书写和执行顺序" tabindex="-1"><a class="header-anchor" href="#select-的书写和执行顺序" aria-hidden="true">#</a> SELECT 的书写和执行顺序</h3><ul><li>书写：SELECT -&gt; FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT</li><li>执行：FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</li></ul><h3 id="多表查询" tabindex="-1"><a class="header-anchor" href="#多表查询" aria-hidden="true">#</a> 多表查询</h3><p>将两个<code>SELECT</code>语句的查询结果合并在一起，列数，列类型必须相同</p><ul><li><code>SELECT * FROM 表1 UNION SELECT * FROM 表2</code></li><li><code>SELECT * FROM 表1 UNION ALL SELECT * FROM 表2</code></li></ul><h3 id="连接查询" tabindex="-1"><a class="header-anchor" href="#连接查询" aria-hidden="true">#</a> 连接查询</h3><p><code>SELECT</code>可以同时查询多个表，这时结果会是一个笛卡尔积</p><div class="custom-container tip"><p class="custom-container-title">笛卡尔积</p><p>两个集合 X 和 Y 的笛卡尔积，表示为 X × Y ，第一个对象是 X 的成员而第二个对象是 Y 的所有可能有序对的其中一个成员</p></div><p>查询多个表示，最好主键保持一致，即<code>WHERE 表1.id = 表2.id</code></p><h3 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询" aria-hidden="true">#</a> 子查询</h3><p>一个<code>SELECT</code>语句中包含另一个完整的<code>SELECT</code>语句，或更多。即把一个表的结果当作新表查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表<span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="技巧" tabindex="-1"><a class="header-anchor" href="#技巧" aria-hidden="true">#</a> 技巧</h2><ul><li>蠕虫复制 - 复制一个表的数据到另一个表</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 复制 table_1 的结构</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_1 <span class="token operator">like</span> table_2<span class="token punctuation">;</span>
<span class="token comment">-- 插入 table_1 的数据到 table_2</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_1 <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,93),o=[p];function c(l,d){return n(),a("div",null,o)}const u=s(t,[["render",c],["__file","sql-syntax.html.vue"]]);export{u as default};
