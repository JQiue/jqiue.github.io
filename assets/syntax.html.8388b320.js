import{ac as n,A as s,B as a,ae as t}from"./framework.a879f165.js";const e={},p=t(`<p>这里是 C 的基本语法规则</p><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 单行注释，只能注释单行</span>

<span class="token comment">/*
多行注释
可以注释多行内容
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在单行注释后面加一个末尾<code>\\</code>，会产生行合并，即后面的一行都会被当作注释，可以使用多行注释解决</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 产生行合并 \\
  printf(&quot;hello&quot;);</span>
  <span class="token comment">/* 不会产生行合并 */</span> \\
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// world</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码块和语句" tabindex="-1"><a class="header-anchor" href="#代码块和语句" aria-hidden="true">#</a> 代码块和语句</h2><p>C 采用<code>{}</code>来区分代码之间的层次，每条语句必须以<code>;</code>结束</p><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h2><ul><li>由英文字母，数字和下划线组成，但第一个字符不能是数字</li><li>不能是 C 中的<strong>关键字</strong>和<strong>保留字</strong></li><li>区分大小写</li></ul><h2 id="变量和常量" tabindex="-1"><a class="header-anchor" href="#变量和常量" aria-hidden="true">#</a> 变量和常量</h2><p>C 是一个静态类型语言，必须声明变量的数据类型，但是并没有强制初始化。如果不赋值初始化，访问变量会得到一个无法估测的数据，通过<code>=</code>赋值运算符来初始化或修改变量的值</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> foo<span class="token punctuation">;</span>            <span class="token comment">// 声明</span>
<span class="token keyword">int</span> bar  <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>      <span class="token comment">// 声明同时初始化</span>
<span class="token keyword">int</span> foobar<span class="token punctuation">,</span> barbaz<span class="token punctuation">;</span> <span class="token comment">// 同时声明多个变量</span>
foo <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>           <span class="token comment">// 第一次赋值即初始化</span>
foo <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>           <span class="token comment">// 再次赋值即修改</span>
foo <span class="token operator">=</span> baz <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>     <span class="token comment">// 连续赋值，从右向左结合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C 用<code>const</code>声明只读变量，声明同时必须初始化</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
pi <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span> <span class="token comment">// error，只读变量是不可以被修改的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在函数或块中声明的变量称为局部变量，反之为全局变量</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>对于全局变量来说，如果没有初始化，是可以重新进行声明的</p></div><p><strong>常数</strong>即一眼就能看出它的值，比如<code>3.14</code>就是一个常数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 整数常数</span>
<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">7.</span><span class="token punctuation">;</span>     <span class="token comment">// 整型是可以省略小数点的，也可加上</span>
<span class="token number">0</span>b1111<span class="token punctuation">;</span> <span class="token comment">// 二进制</span>
<span class="token number">027</span><span class="token punctuation">;</span>    <span class="token comment">// 八进制</span>
<span class="token number">0x26</span><span class="token punctuation">;</span>   <span class="token comment">// 十六进制</span>

<span class="token comment">// 浮点常数</span>
<span class="token number">10.2f</span><span class="token punctuation">;</span>  <span class="token comment">// 在 C 中默认是双精度常数，可以通过在常数后加 \`f\` 符号表示单精度</span>
<span class="token number">3.14</span><span class="token punctuation">;</span>   <span class="token comment">// 双精度常数</span>
<span class="token number">.7</span><span class="token punctuation">;</span>     <span class="token comment">// 如果整数为 0 可以省略不写</span>
<span class="token number">4.5e0</span><span class="token punctuation">;</span>  <span class="token comment">// 指数表示形式，大写 E 和小写 e 都可以，e 后面必须是整数，且前面必须有一个数字</span>

<span class="token comment">// 字符常数</span>
<span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token char">&#39;3&#39;</span><span class="token punctuation">;</span>
<span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 转义字符</span>
<span class="token char">&#39;啊&#39;</span><span class="token punctuation">;</span> <span class="token comment">// error，在 c 里面中文字符不算一个字符，必须是 ASCII 码表上的字符</span>

<span class="token comment">// 字符串常数</span>
<span class="token string">&quot;h&quot;</span><span class="token punctuation">;</span>
<span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token string">&quot;你好&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 字符串是可以使用中文的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>C 有 5 种数据类型：整型，浮点型，指针，聚合类型，枚举</p><ul><li>整型 <ul><li>短整型（short）：占 2 byte，表示的整数范围较小</li><li>整型（int）：占 4 byte，表示的整数范围较大</li><li>长整型（long）：占 4 byte，表示的整数范围最大</li></ul></li><li>浮点型 <ul><li>单精度（float）：占 4 byte，小数点后面的精度相对较小</li><li>双精度（double）：占 8 byte，小数点后面的精度相对较大</li><li>长双精度（long double）：</li></ul></li><li>字符型（char）：占 1 byte</li><li>聚合类型 <ul><li>数组</li><li>结构体</li><li>共用体</li></ul></li><li>指针</li><li>枚举</li></ul><div class="custom-container tip"><p class="custom-container-title">不同进制的整数表达方式</p><ul><li>二进制用<code>0b</code>表示</li><li>八进制用<code>0</code>表示</li><li>十进制不需要添加任何额外符号</li><li>十六进制用\`0x表示</li></ul></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>字符在计算机中是按字符的 ASCII 值存储的，本质是个整数，根据格式占位符可得到不同的的显示：<code>%c</code> 按字符输出，<code>%d</code> 按整数输出，如果对字符进行数值运算，实际上是算的 ASCII 码中的对应的数值</p></div><div class="custom-container tip"><p class="custom-container-title">转义字符</p><p>字符也可以用<code>\\</code>开头的特殊序列表示</p><table><thead><tr><th>控制符</th><th>功能</th></tr></thead><tbody><tr><td>\\a</td><td>警报</td></tr><tr><td>\\b</td><td>退格</td></tr><tr><td>\\n</td><td>换行</td></tr><tr><td>\\t</td><td>空格</td></tr><tr><td>|斜杠</td><td></td></tr><tr><td>&#39;</td><td>单引号</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>\\ddd</td><td>1-3 位 8进制表示的字符（用数字替换d）</td></tr><tr><td>\\xhh</td><td>1-2 位 16进制表示的字符（x是固定的只需用数字替换h）</td></tr></tbody></table></div><h3 id="类型检测" tabindex="-1"><a class="header-anchor" href="#类型检测" aria-hidden="true">#</a> 类型检测</h3><p>C 可以使用<code>sizeof</code>来判断数据类型</p><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><ul><li>自动类型转换：编译器根据上下文环境自动判断，通常转换为范围更大的类型</li><li>强制类型转换：显式告诉编译器怎么转换数据类型</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> foo<span class="token punctuation">;</span>
<span class="token keyword">int</span> bar <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

foo <span class="token operator">=</span> bar<span class="token punctuation">;</span>               <span class="token comment">// 发生了自动类型转换，int =&gt; double</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;foo = %f&quot;</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 3.000000</span>
bar <span class="token operator">=</span> <span class="token number">0.123456</span><span class="token punctuation">;</span>          <span class="token comment">// 将浮点型常量赋值给整型变量会舍去精度</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bar = %d&quot;</span><span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>对于<code>printf()</code>函数来说，任何小于<code>int</code>类型的都会被转换成<code>int</code>，<code>float</code>会被自动转换为<code>double</code>，但是<code>scanf()</code>函数不会，<code>scanf()</code>必须要知道输入的数据类型，比如<code>short</code>，就要用<code>%hd</code></p></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>表达式由运算符和运算对象组成，运算对象可以是常量、变量、函数等，或者是多者的结合，但是最重要的一点是表达式一定是有一个结果值</p><h3 id="数学运算" tabindex="-1"><a class="header-anchor" href="#数学运算" aria-hidden="true">#</a> 数学运算</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>/</td><td>除法</td></tr><tr><td>%</td><td>取余</td></tr></tbody></table><h3 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值" aria-hidden="true">#</a> 赋值</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>赋值运算符</td></tr><tr><td>+=</td><td>加且赋值运算符，右操作数和左操作数相加并赋值给左操作数</td></tr><tr><td>-=</td><td>减且赋值运算符，右操作数和左操作数相减并赋值给左操作数</td></tr><tr><td>*=</td><td>乘且赋值运算符，右操作数和左操作数相乘并赋值给左操作数</td></tr><tr><td>/=</td><td>除且赋值运算符，右操作数和左操作数相除并赋值给左操作数</td></tr></tbody></table><h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>判断相等</td></tr><tr><td>!=</td><td>判断不相等</td></tr><tr><td>&gt;</td><td>判断左操作数是否大于右操作数</td></tr><tr><td>&lt;</td><td>判断左操作数是否小于右操作数</td></tr><tr><td>&gt;=</td><td>判断左操作数是否大于等于右操作数</td></tr><tr><td>&lt;=</td><td>判断左操作数是否小于等于右操作数</td></tr></tbody></table><h3 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算" aria-hidden="true">#</a> 逻辑运算</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与，两个操作数都非 0，则为真</td></tr><tr><td>||</td><td>逻辑或，两个操作数有一个非 0，则为真</td></tr><tr><td>!</td><td>逻辑非，逆转操作数的逻辑状态，真则为假，假则为真</td></tr></tbody></table><h3 id="指针运算" tabindex="-1"><a class="header-anchor" href="#指针运算" aria-hidden="true">#</a> 指针运算</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>取地址</td></tr><tr><td>*</td><td>取引用的对象</td></tr></tbody></table><h3 id="其他运算" tabindex="-1"><a class="header-anchor" href="#其他运算" aria-hidden="true">#</a> 其他运算</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>++</td><td>自增</td></tr><tr><td>--</td><td>自减</td></tr><tr><td>,</td><td>从左往右计算，将最右边的结果返回</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">提示</p><p>关系运算符和逻辑运算符都会产生 0 或 1 ，在 C 中，任何非 0 的值就为真</p></div><h3 id="优先级和结合性" tabindex="-1"><a class="header-anchor" href="#优先级和结合性" aria-hidden="true">#</a> 优先级和结合性</h3><p>优先级决定谁先计算，结合性指的是当算子两边的运算符优先级别相同时，则按照结合性来确定哪个表达式谁先计算</p><ul><li>! &gt; 算数 &gt; 关系 &gt; 逻辑 &gt; 赋值</li><li>单目 &gt; 双目</li></ul><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h2><p>C 默认的执行结构，是从上到下逐行逐句执行</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 从函数代码块开始依次执行语句</span>
  <span class="token keyword">int</span> a<span class="token punctuation">;</span>
  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当函数遇到 return 语句时会立即结束运行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件分支" tabindex="-1"><a class="header-anchor" href="#条件分支" aria-hidden="true">#</a> 条件分支</h3><p>通过<code>if</code>关键字来定义，条件满足则执行代码块中的语句</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你已经成年啦！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>if</code>也可以包含一个可选的<code>case</code>块，如果条件不成立，就会执行<code>case</code>代码块中的语句</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你已经成年啦！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;你还没成年呢！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个基础上还可以使用多重<code>if else</code>实现更多分支</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> score<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;良好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;不及格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三元运算符是另一种条件运算，即通过<code>?</code>来构成条件选择，和<code>if else</code>差不多，如果满足就执行第一个结果，否则就执行另外一个结果</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>
c <span class="token operator">=</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> <span class="token number">5</span> <span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 如果 a 大于 b 为真，则将执行第一个表达式，否则执行另一个表达式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>相对于<code>if</code>来说，<code>switch</code>可以更方便的控制多个分支的流程控制，和<code>if</code>不同的是，<code>switch</code>必须精确的匹配一个正确的值才能执行相应的<code>case</code>，而且会从当前<code>case</code>一直执行下去，所以需要给每个<code>case</code>添加<code>break</code>语句来打断后续的执行，当不匹配任何<code>case</code>时就执行<code>default</code>中的语句</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> week<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>week<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>week<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;星期一&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;星期二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;星期三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;星期四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;星期五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;星期六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;星期天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h3><p>C 有<code>while</code>，<code>do...while</code>，<code>for</code>三种循环结构</p><p><code>while</code>常用于已知的循环次数</p><p>如果想要打印 5 遍：<code>hello,world!</code>，如果不用循环：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要打印 100 遍，还需要这个写法吗，而用<code>while</code>就可以这么写：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环一定要有终止条件，否则会导致死循环产生</p><div class="custom-container tip"><p class="custom-container-title">死循环</p><p>循环一直执行，程序无法终止</p></div><p><code>do while</code>循环不管条件是否满足，都会先执行一次才会判断条件</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">警告</p><p>不能忘记这个分号</p></div><p><code>for</code>通常用于循环次数不确定的情况</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>expression <span class="token number">1</span><span class="token punctuation">;</span> 判断条件<span class="token punctuation">;</span> expression <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行流程：</p><ol><li>执行<code>expression 1;</code>，并且只会被执行一次</li><li>判断条件是否为真 <ul><li>为真则执行代码块中的代码，然后执行<code>expression 2</code>，重复 2 - 3 步的操作</li><li>为假则立即结束整个循环</li></ul></li></ol><p><code>expression 1</code>通常用于初始化变量，可以省略，判断条件用于决定循环体是否执行，<code>expression 2</code>用于控制循环的终止条件，也可以省略</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong>只保留两个<code>;</code>时，产生死循环</strong></p></div><p>有时候不需要循环到所有次数才终止，而是在达到某个条件后手动终止整个循环，C 提供了两种打断方式：</p><ul><li>当遇到<code>break</code>语句时，立即退出离<code>break</code>语句最近的一层循环，不继续下一次循环</li><li>当遇到<code>continue</code>语句时，立即退出当前次循环，继续下一次循环</li></ul><h2 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型" aria-hidden="true">#</a> 枚举类型</h2><p>枚举类型是 C 提供的一种特殊类型，通常用于一些有限值范围的类型，用<code>enum</code>关键字声明，必须在函数外部定义，每一个取值都会被当作一个只读变量，默认第一个变量的取值为 0，之后的每一个变量取值会依次递增，如果给某一个位置的成员主动赋值，之后的每一个变量会在这个取值的基础上自增</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">en</span><span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于枚举类型的成员来说，只能在定义的时候赋值，且只能够赋值整型数据，也可以是字符型（因为字符型在内存中是以数字存储的），访问成员时也只需要使用成员标识符即可</p><p>也可以通过枚举类型来定义一个普通变量或指针变量，普通变量也是只读的，最好在定义是初始化，否则会是一个垃圾数据</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">en</span><span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">enum</span> <span class="token class-name">en</span> baz <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">enum</span> <span class="token class-name">en</span> <span class="token operator">*</span>qux <span class="token operator">=</span> <span class="token operator">&amp;</span>baz<span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> baz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>qux<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="别名类型" tabindex="-1"><a class="header-anchor" href="#别名类型" aria-hidden="true">#</a> 别名类型</h2><p><code>typdef</code> 关键字用于将已知的数据类型定义为新的名字，常用于结构体和复杂的类型声明当中</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> SCORE<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  SCORE s1 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment">// 相当于 int s1 = 60;</span>
  SCORE s2 <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅如此，还可以声明多个别名</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  foo s1 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment">// 相当于 int s1 = 60;</span>
  bar s2 <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span> <span class="token comment">// 相当于 int s2 = 70;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">警告</p><p>不能在进行类型别名声明的同时定义变量</p></div>`,94),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","syntax.html.vue"]]);export{u as default};
