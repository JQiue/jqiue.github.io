import{ac as n,A as s,B as a,ae as e}from"./framework.a879f165.js";const t={},o=e(`<p>这里是 Python 的基本语法规则</p><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 注释内容</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
使用 3 个单引号作为注释的开头和结尾
这里的内容都是注释
&#39;&#39;&#39;</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
使用 3 个双引号作为注释的开头和结尾
这里的内容都是注释
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码块和语句" tabindex="-1"><a class="header-anchor" href="#代码块和语句" aria-hidden="true">#</a> 代码块和语句</h2><p>python 并没有采用<code>{}</code>来区分代码块的层次，而是采用缩进和冒号来区分</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;输入年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;未成年&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;已成年&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 是一个对缩进非常敏感的语言，同一个级别的代码块缩进量必须一样，否则会报<code>SyntaxError</code>错误，所以要确定好缩进的数量，一般为 4 个空格</p><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h2><ul><li>由<strong>英文字母</strong>，<strong>数字</strong>和<strong>下划线</strong>组成，但第一个字符不能是数字</li><li>不能是 Python 中的<strong>关键字</strong>和<strong>保留字</strong></li><li>区分大小写</li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>Python 不需要声明变量的数据类型，这也意味着变量可以被不同类型的值修改</p><p>可以通过 <code>=</code> 来给变量赋值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>foo <span class="token operator">=</span> <span class="token number">3</span>
foo <span class="token operator">=</span> <span class="token string">&quot;jqiue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>链式赋值可以为多个变量同时赋予相同的值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>foo <span class="token operator">=</span> bar <span class="token operator">=</span> quz <span class="token operator">=</span> <span class="token number">33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解包赋值可以为按照一定的序列为变量赋值，可以是不同的数据类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>foo<span class="token punctuation">,</span> bar <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">&quot;jqiue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">为什么没有只读变量</p><p>没有语法规则限制一个变量无法被修改</p></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>Python 只会在运行的时候确定数据的类型</p><ul><li>整型（int）</li><li>浮点（float）</li><li>布尔（bool）</li><li>字符串</li><li>列表</li><li>元组</li><li>字典</li><li>集合</li></ul><div class="custom-container tip"><p class="custom-container-title">数字分隔符</p><p>Python 为了提高数字的可读性，允许使用下划线<code>_</code>来分割数字（整数或小数），通常每三个数字添加一个下划线，下划线并不会影响数字本身的值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>foo <span class="token operator">=</span> <span class="token number">8_848_838</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">数字的进制表示</p><p>Python 同样支持多种进制来表示整数</p><ul><li>十进制：由 0 ~ 9 共十个数字排列组合而成（Python 中的数字默认是十进制）</li><li>二进制：由 0 和 1 组成，以<code>0b</code>或<code>0B</code>开头</li><li>八进制：由 0 ~ 7 八位数字组成，以<code>0o</code>或<code>0O</code>开头</li><li>十六进制：由 0 ~ 9 和 A ~ F（a ~ f）组成，以<code>0x</code>或<code>0X</code>开头</li></ul></div><div class="custom-container tip"><p class="custom-container-title">非 0 都是真</p><p>在逻辑运算中，任何非 0 的值都会被当成 True，反之都是 False</p></div><div class="custom-container tip"><p class="custom-container-title">不同类型数据之间的计算</p><p>数值类型之间可以直接计算，如果是<code>bool</code>，会被转换成<code>1</code>或<code>0</code>来计算</p></div><h3 id="类型检测" tabindex="-1"><a class="header-anchor" href="#类型检测" aria-hidden="true">#</a> 类型检测</h3><p>Python 提供了内置函数 <code>type()</code> 来检测数据类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># int</span>
<span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">8.8</span><span class="token punctuation">)</span> <span class="token comment"># float</span>
<span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># bool</span>
<span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">&quot;JQiue&quot;</span><span class="token punctuation">)</span> <span class="token comment"># str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><p>Python 提供了很多函数用于转换数据类型</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>int(x)</td><td>将 x 转换成整数</td></tr><tr><td>float(x)</td><td>将 x 转换成浮点数</td></tr><tr><td>str(x)</td><td>将 x 转换成字符串</td></tr></tbody></table><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h3 id="常见运算符" tabindex="-1"><a class="header-anchor" href="#常见运算符" aria-hidden="true">#</a> 常见运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>1 + 2 = 3</td></tr><tr><td>-</td><td>减</td><td>3 -2 = 1</td></tr><tr><td>/</td><td>不整除</td><td>3 / 2 = 1.5</td></tr><tr><td>//</td><td>整除</td><td>3 / 2 = 1</td></tr><tr><td>%</td><td>取余</td><td>3 / 2 = 1</td></tr><tr><td>**</td><td>幂（乘方）</td><td>2 ** 3 = 8</td></tr><tr><td>==</td><td>判断两个操作数是否相等，如果相等返回 True，否则 False</td><td></td></tr><tr><td>!=</td><td>判断两个操作数是否不相等，如果不相等返回 True，否则 False</td><td></td></tr></tbody></table><blockquote><p>|判断左操作数是否大于右操作数，如果大于返回 True，否则 False &lt;|判断左操作数是否小于右操作数，如果小于返回 True，否则 False =|判断左操作数是否大于等于右操作数，如果大于返回 True，否则 False &lt;=|判断左操作数是否小于等于右操作数，如果大于返回 True，否则 False and|逻辑与，只有条件都满足才返回 True or|逻辑或，只要有一个条件满足就会返回 True not|将结果进行取反 +=|将左操作数和右操作数相加再赋值给左边 -=|将左操作数和右操作数相减再赋值给左边 *=|将左操作数和右操作数相乘再赋值给左边 /=|将左操作数和右操作数相除再赋值给左边 //=|将左操作数和右操作数整除再赋值给左边 %=|将左操作数和右操作数取余再赋值给左边 **=|将左操作数和右操作数进行乘方再赋值给左边</p></blockquote><h3 id="其他运算符" tabindex="-1"><a class="header-anchor" href="#其他运算符" aria-hidden="true">#</a> 其他运算符</h3><ul><li>in：in会判断左操作数是否存在迭代元素中，存在则返回 True，否则 False</li><li>not in：判断左操作数是否在迭代元素中不存在，不存在则返回 True，否则 False</li><li>+：连接两个有序序列，<code>&quot;hello&quot; + &quot;world&quot;</code> = <code>&quot;helloworld&quot;</code></li><li>*：将有序序列按照一定次数重复拼接，<code>&quot;hello&quot; * 3</code> = <code>&quot;hellohellohello&quot;</code></li><li>[]：切片操作符</li></ul><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h2><p>python 中只有<strong>顺序结构</strong>，<strong>分支结构</strong>，<strong>循环结构</strong>这三种语句执行流程</p><h3 id="条件分支" tabindex="-1"><a class="header-anchor" href="#条件分支" aria-hidden="true">#</a> 条件分支</h3><p>通过<code>if</code>关键字来定义，条件满足则执行缩进代码块中的语句</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;你已经成年啦！&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 else 关键字与 if 匹配，如果 if 条件不满足，则执行 else 代码块中的语句，且 else 不需要判断条件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;你已经成年啦！&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;你还没成年呢！&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要每一个分支都判断条件，则使用 elif 关键字</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>score <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的分数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;优秀&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;良好&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;及格&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;不及格&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h3><p>while 常用于已知的循环次数</p><p>如果想要打印 5 遍：<code>hello,world!</code>，如果不用循环：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要打印 100 遍，还需要这个写法吗，而用 while 就可以这么写：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world!&quot;</span><span class="token punctuation">)</span>
   i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环一定要有终止条件，否则会导致死循环产生</p><div class="custom-container tip"><p class="custom-container-title">死循环</p><p>即开发人员忘记修改循环体内的判断条件，导致循环一直执行，程序无法终止</p></div><p>for 常用于一些可迭代类型的循环遍历，比如字符串、列表、元组、字典等，常和 in 关键字搭配使用，并指明一个变量接受数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> 迭代变量 <span class="token keyword">in</span> 迭代对象<span class="token punctuation">:</span>
    代码块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有时候不需要循环到一定次数才终止，所以需要手动终止循环，Python 提供了两种打断方式：</p><ul><li>当遇到<code>break</code>语句时，立即退出当前层循环，不继续下一次循环</li><li>当遇到<code>continue</code>语句时，立即退出当前次循环，继续下一次循环</li></ul>`,58),p=[o];function i(l,c){return s(),a("div",null,p)}const r=n(t,[["render",i],["__file","syntax.html.vue"]]);export{r as default};
