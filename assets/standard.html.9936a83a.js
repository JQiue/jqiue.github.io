import{ac as s,A as a,B as t,E as e,ae as n}from"./framework.a879f165.js";const p={},o=n(`<p>这里是 JavaScript 中提供的一些标准功能</p><h2 id="包装对象" tabindex="-1"><a class="header-anchor" href="#包装对象" aria-hidden="true">#</a> 包装对象</h2><p>很多语言都有包装对象的设计，目的是为了让基本类型获得构造函数上的方法</p><ul><li><code>String()</code>：将一个字符串转换为字符串对象，如果是<code>undefined</code>则返回<code>undefined</code></li><li><code>Number()</code>：将一个数值转换为数值对象，如果是<code>undefined</code>则返回<code>NaN</code></li><li><code>Boolean()</code>：将一个布尔值转换为布尔对象</li></ul><h2 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> Math</h2><p><code>Math</code>是用来进行数值运算的对象，它不是构造器</p><ul><li>Math.PI</li><li>Math.pow(x, y)：返回 x 的 y 次幂</li><li>Math.sqrt(x)：返回 x 的平方根</li><li>Math.ceil(x)：返回大于或等于 x 的最小整数</li><li>Math.floor(x)：返回小于或等于 x 的最大整数</li><li>Math.round(x)：返回四舍五入后最接近的整数</li><li>Math.random()：返回包括 0 到不包括 1 之间的浮点数</li><li>Math.abs(x)：返回 x 的绝对值</li><li>Math.max(value1, value2, ...)：返回一组数中的最大值</li><li>Math.min(value1, value2, ...)：返回一组数中的最小值</li></ul><h2 id="时间" tabindex="-1"><a class="header-anchor" href="#时间" aria-hidden="true">#</a> 时间</h2><p>一个时间对象是由<code>Date</code>构造函数产生的，如果不带参数会表示当前的日期和时间</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示当前的日期和时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果传入了一个整数<code>n</code>，则表示 1970 年 1 月 1 日 UTC + <code>n</code> 之后经过的毫秒数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1970-01-01T00:00:00.000Z</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1970-01-01T00:00:1.000Z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果传入了一个字符串，它会自动解析</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;2021-6-21&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2021-06-20T16:00:00.000Z or 2021-06-21T11:00:00.000Z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有传入时间，则会按照格林尼治标准时间的午夜来设定时间，并根据运行代码后的时区进行调整</p><p>当<code>new Date(year, month, date, hours, minutes, seconds, ms)</code>是这种形式时，就会根据给定参数创建日期和时间，其中前两个参数是必须的：</p><ul><li>year 必须是四位数</li><li>month 从 0（一月）开始，到 11（十二月）结束</li><li>date 是当月的某一天，如果缺失默认为 1</li><li>如果 hours/minutes/seconds/ms 缺失则默认为 0</li></ul><p>时间对象也提供了各种方法来访问年月等信息</p><ul><li>getFullYear()</li><li>getMonth()</li><li>getDate()</li><li>getDay()</li><li>getHours()，getMinutes()，getSeconds()，getMilliseconds()</li><li>setFullYear()</li><li>setMonth()</li><li>setDate()</li><li>setHours(hour)，setMinutes(min)，setSeconds(sec)，setMilliseconds(ms)</li><li>getTime() - 时间戳</li></ul><p>时间对象还会自动校准，如果设置了超出范围的值，会自动校准，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2021-02-01</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这说明超出的时间会被自动分配，这个特性通常用来获取给定时间段后的日期</p><p>当事件对象转换为数字时，得到的是对应的时间戳，有一个非常重要的作用，可以用来相减测量某个代码的执行时间</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开始测量时间</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> doSomething <span class="token operator">=</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结束测量时间</span>

<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The loop took </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>end <span class="token operator">-</span> start<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ms</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要测量时间间隔，也可以用<code>Date.now()</code>，它同样返回的是当前的时间戳，但是它不会创建中间对象，因此程序的速度更快</p><p><code>Date.parse(str)</code>可以从一个字符串中读取日期，但是字符串的格式应该为：<code>YYYY-MM-DDTHH:mm:ss:sssZ</code>，这样该方法会返回该时间段的时间戳，因此可以通过该方法来立即创建一个对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;2021-06-21T23:30:00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>T</code>代表分隔符，<code>Z</code>代表 UTC + 0 时区</p></div><p>这是一个求出高考时间的小例子：</p><p>::: demo 高考时间</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>高考倒计时：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> h1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> nd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> td <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> diff <span class="token operator">=</span> td <span class="token operator">-</span> nd<span class="token punctuation">;</span>
  <span class="token keyword">let</span> day <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> hours <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>diff <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> minutes <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>diff <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> seconds <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>diff <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  span<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">天</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hours<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">小时</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>minutes<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">分钟</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>seconds<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">秒</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h2><p>JSON 是表示值和对象的通用格式，它是为 JavaScript 而设计的，但是很多语言都有用来处理它的库，通常用来进行数据交换，JavaScript 提供了下列方法用来处理 JSON 数据：</p><ul><li>JSON.stringify()：将对象转换为 JSON</li><li>JSON.parse()：将 JSON 转换为对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">wife</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;name&quot;:&quot;foo&quot;,&quot;age&quot;:18,&quot;wife&quot;:null}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到的 JSON 字符串是一个被称为 JSON 编码的对象，和普通对象区别在于：</p><ol><li>对象的键会被处理成双引号</li><li>且所有的字符串都转换为双引号</li></ol><p>JSON 是一种语言无关的数据规范，一些特殊的对象属性会被<code>JSON.stringify()</code>跳过：</p><ol><li>函数属性</li><li>Symbol 属性</li><li>值为<code>undefined</code>的属性</li></ol><p>JSON 也支持嵌套转换，另外，<code>stringify</code>其实支持三个参数，第一个参数是需要被编码的值，第二个是用于指定要编码的属性，第三个是用于格式化空格的数量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">wife</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">room</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token literal-property property">participants</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ann&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 仅对 name 和 age 键进行编码</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {&quot;name&quot;:&quot;foo&quot;,&quot;age&quot;:18}</span>


<span class="token comment">// 缩进 2 个空格</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">/* 
{
  &quot;name&quot;: &quot;foo&quot;,
  &quot;age&quot;: 18
}
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JSON 也支持自定义的格式，就像<code>toString</code>一样，只要为对象添加<code>toJSON</code>方法，如果可用，那么<code>JSON.stringify</code>就会调用它</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token literal-property property">wife</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;1&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要解码 JSON 对象就要用到<code>JSON.parse</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;:&quot;foo&quot;,&quot;age&quot;:18,&quot;tag&quot;:[&quot;person&quot;,&quot;student&quot;]}&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;foo&#39;, age: 18, tag: [ &#39;person&#39;, &#39;student&#39; ] }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 JSON 中包含日期，会被解析为字符串，而不是日期对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;:&quot;foo&quot;,&quot;age&quot;:18,&quot;tag&quot;:[&quot;person&quot;,&quot;student&quot;],&quot;date&quot;:&quot;2021-06-21T12:00:00&quot;}&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 此时的 date 是一个字符串</span>
console<span class="token punctuation">.</span><span class="token function">lot</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// TypeError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此就必须借助第二个参数来对转换值进行映射：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;:&quot;foo&quot;,&quot;age&quot;:18,&quot;tag&quot;:[&quot;person&quot;,&quot;student&quot;],&quot;date&quot;:&quot;2021-06-21T12:00:00&quot;}&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 当 key 为 date 时进行值类型的转换</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">&#39;date&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 此时的 date 是一个日期对象，可以正常调用</span>
console<span class="token punctuation">.</span><span class="token function">lot</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2021</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><p>在 JavaScript中，正则表达式也是对象，可以使用两种方式来创建一个正则表达式。两种方式都是等价的，在实际应用中，通常使用字面量表达式，构建时还可以添加第二个参数，表示修饰符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 字面量</span>
<span class="token keyword">const</span> re1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>
<span class="token comment">// 构造函数</span>
<span class="token keyword">const</span> re2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正则对象有修饰符相关属性</p><ul><li><code>ignoreCase</code>：是否设置了<code>i</code></li><li><code>global</code>：是否设置了<code>g</code></li><li><code>multiline</code>：是否设置了<code>m</code></li><li><code>flags</code>：返回包含已设置的修饰符，按字母排序</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">abc</span><span class="token regex-delimiter">/</span><span class="token regex-flags">igm</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>ignoreCase<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>multiline<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// gim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与修饰符无关的属性</p><ul><li><code>lastIndex</code>：表示下一次搜索的位置</li><li><code>source</code>：返回正则表达式的字符串形式，不包括反斜杠</li></ul><p>实例方法</p><ul><li><code>test(str)</code>：是否能匹配当前字符串</li><li><code>exec(str)</code>：返回匹配结果</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;abcabc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果带有<code>g</code>修饰符，每一次<code>test</code>方法都会从上一次结束位置开始向后匹配</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> <span class="token string">&#39;abcabc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, true</span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> <span class="token string">&#39;abcabc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, true </span>
reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> <span class="token string">&#39;abcabc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4, false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>带有<code>g</code>修饰符时，正则对象的<code>lastIndex</code>可以指定开始搜索的位置</p><p><code>exec</code>方法会返回一个数组，成员是匹配成功的字符串，否则返回<code>null</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;abcabc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;a&#39;, index: 0, input: &#39;abcabc&#39;, groups: undefined ]</span>
reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;bcd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功时还包含两个属性</p><ul><li><code>input</code>：匹配到的字符串</li><li><code>index</code>：匹配成功的开始位置</li></ul><p>如果正则表达式加上了<code>g</code>修饰符，就可以使用多次<code>exec</code>方法，下一次搜索的位置从上一次匹配成功结束的位置开始</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;abcabc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以在<code>g</code>修饰符允许匹配多次的情况下，可以利用循环完成全部匹配</p><p>对一个正则对象使用<code>typeof</code>会得到<code>object</code></p>`,73),c=n(`<h2 id="eval" tabindex="-1"><a class="header-anchor" href="#eval" aria-hidden="true">#</a> eval</h2><p><code>eval()</code>是一个很强大的函数，它的作用是计算一个字符串，并转换为对应的表达式或语句执行，它本身并不返回什么数据，目的就是执行字符串中的表达式或语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;f&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;oo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会变成 foo，并访问 foo 变量的值返回</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;console.log(&quot;bar&quot;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 bar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="uri" tabindex="-1"><a class="header-anchor" href="#uri" aria-hidden="true">#</a> URI</h2><p>JavaScript 提供了用来处理 URI 的函数</p><ul><li><code>encodeURI()</code>用于将一个字符串编码成一个有效的 URI</li><li><code>decodeURI()</code>则是对已经编码的字符串进行解码</li><li><code>encodeURIComponent()</code>和<code>decodeURIComponent()</code>也是如此，它们区别在于编码和解码的特殊字符</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> strURI <span class="token operator">=</span> <span class="token string">&#39;https://jinqiu.wang/index?foo=张三&amp;bar=33&#39;</span><span class="token punctuation">;</span>
<span class="token function">encodeURI</span><span class="token punctuation">(</span>strURI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://jinqiu.wang/index?foo=%E5%BC%A0%E4%B8%89&amp;bar=33</span>
<span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token function">encodeURI</span><span class="token punctuation">(</span>strURI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://jinqiu.wang/index?foo=张三&amp;bar=33</span>
<span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>strURI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https%3A%2F%2Fjinqiu.wang%2Findex%3Ffoo%3D%E5%BC%A0%E4%B8%89%26bar%3D33</span>
<span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>strURI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https://jinqiu.wang/index?foo=张三&amp;bar=33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这对于向服务器发送数据有用，因为用户输入的数据可能包含一些非法的数据导致服务器无法解析，所以要进行编码</p><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><ul><li><code>parseFloat()</code>：将一个字符串转换为浮点数，而且会解析字符串中的数字，直到不是数字部分的字符。如果字符串不是以一个有效的数字开头，则返回<code>NaN</code>，有效数字前的空格会被忽略</li><li><code>parseInt()</code>：将一个字符串转换为整数，而且会解析字符串中的数字，直到不是数字部分的字符。如果字符串不是以一个有效的数字开头，则返回<code>NaN</code>，有效数字前的空格会被忽略</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;2.3&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;174cm&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> qux <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>

<span class="token function">parseFloat</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2.3</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 174</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span>qux<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="判断" tabindex="-1"><a class="header-anchor" href="#判断" aria-hidden="true">#</a> 判断</h2><ul><li><code>isFinite()</code>：判断一个数值是否为有限数，是就返回<code>true</code></li><li><code>isNaN()</code>：判断一个数值是否不是数字，是就是返回<code>true</code></li></ul>`,13);function l(i,u){return a(),t("div",null,[o,e(" more "),c])}const d=s(p,[["render",l],["__file","standard.html.vue"]]);export{d as default};
