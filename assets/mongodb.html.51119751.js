const n=JSON.parse(`{"key":"v-d6152b3c","path":"/database/mongodb.html","title":"MongoDB","lang":"zh-CN","frontmatter":{"title":"MongoDB","category":["数据库"],"article":false,"description":"MongoDB 是面向文档的非关系型数据库管理系统，并不是传统的关系数据库，基本的思路就是将“行”（row）的概念换成更加灵活的“文档”（document）模型。MongoDB 是基于 JSON，而面向文档的方式可以将文档或数组内嵌进来，所以一条记录可以表示非常复杂的关系。学习 MongoDB 需要具备一定的 JavaScript 和 JSON 基础 在开始操作之前必须先了解几个概念： 数据库（Database） 集合（Collection）：相当于关系型数据库中的表 文档（Document）：相当于关系型数据库中的记录 在 NoSQL 中，操作数据库都是通过指令或程序语言来完成的，在 MongoDB 中就是使用 JavaScript 来完成大部分操作 # 基本操作 首先在终端上输入mongo命令进入 MongoDB 命令行程序，退出使用eixt命令 输入show databases用于显示已创建的数据库，也可以使用缩写形式show dbs，如果没有出现意外，将得到三个默认的数据库： admin config local 使用use关键字切换当前使用的数据库，当use不存在的数据库时不会报错，会隐式的创建一个数据库，但只有在创建集合的时候才会显示这个数据库，所以这个时候使用show databases是不会显示的 use database_name db.stats()方法会将该数据库的状态返回，这里db就代表之前use过的数据库，是的，这和程序语言中的对象一样。db.dropDatabase()用于删除当前数据库 db.createCollection(name)方法会在当前数据库下创建一个集合，现在这个数据库中已经具有了结构，可以使用show dbs查看了，相应的，show collections会显示当前数据库中所有的集合 如果对集合名字不满意，可以使用db.集合名.renameCollection(新集合名)进行修改。注意，之前创建的集合，相当于当前db的属性了，这超级简单，那么删除该集合也是类似的写法，db.集合名.drop()。对应的，想要查看当前集合的状态，也可以使用db.集合名.stats() db.集合名.insert()可以插入一条数据，格式为键值对形式，为了方便，MongoDB 允许插入时 key 不加引号，会自动加上 db.users.insert({name: 'zs', age: 23, gender: '男'}); 提示 如果没有创建数据库以及集合，这条语句也会隐式的创建一个数据库和对应的集合，非常高效 db.集合名.find()会查询该集合下的所有数据，不出意外的情况下，上述插入命令后的结果应该是这样的： { \\"_id\\" : ObjectId(\\"6121b78bd865c5bcee1308af\\"), \\"name\\" : \\"zs\\", \\"age\\" : 23, \\"gender\\" : \\"男\\" } 发现除了自己指定的数据以外还有一个自动生成的_id键，如果不指定这个键，MongoDB 会为每条数据添加一个唯一的_id键，但并不推荐手动指定它 _id 的组成 _id的值由时间戳，机器码，PID，计数器组成，所以它是全球唯一的都不过分 也可以使用传递数组的方式来插入多条数据： db.集合名.insert([ {}, {}, ... ]) 现在db.集合名具有的方法： count()：返回文档数量 stats()：返回集合的状态 remove()：删除数据 find()：查询数据 # JavaScript 支持 MongoDB 底层是用 JavaScript 引擎实现的，支持部分 JavaScript 语法，于是： for (let i = 1; i &lt; 10; i++){ db.集合名.insert(...); } # 带条件的操作 db.集合名.find()可以查看该集合中的数据，如果不传入参数，将会查询所有的数据，现在开始对下面的数据进行待条件的查询 db.users.insert([ { name: 'zs', age: 23, gender: '男', job: 'IT' }, { name: 'ls', age: 24, gender: '男', job: '金融' }, { name: 'ww', age: 25, gender: '女', job: 'IT' }, { name: 'foo', age: 18, gender: '男', job: '学生' }, { name: 'bar', age: 18, gender: '女', job: '学生' }, ]) find()方法的第一个参数用来进行条件查询，传入一个对象，比如： 查询指定的数据：db.users.find({name: 'zs'}) 查询某个范围的数据：db.users.find({age: {$gt: 18}}) 这是一部分运算符： 运算符 作用 $gt 大于 $gte 大于等于 $lt 小于 $lte 小于等于 $ne 不等于 $in 值在一个范围内（数组） $nin 值不在一个范围中（数组） $inc 递增 $rename 重命名列 $set 修改列值 $unset 删除列 /Reg/ 正则表达式 $or 或 第二个参数可以控制查询的返回列，如果{列名:1/true}，则只查询该列数据，如果{列名:0/false}，则查询除了该列以外的所有列的数据。当条件参数省略时，必须传入一个空对象，比如db.集合名.find({}, {列名:0})，如果想要去除_id，则应该这样db.集合名.find({}, {_id: 0}) 还有一个特殊的方法distinct(列)用来查询该列中所有不同的值，有相同的值会去除 db.users.distinct(\\"job\\") /* Result */ [ \\"IT\\", \\"学生\\", \\"金融\\" ] 既然是用对象来控制查询方式，而对象是一种复杂结构，也就存在复杂的查询条件 /* age 大于 18，并且 job 为 'IT' 的数据 */ db.users.find({ age: {$gt: 18}, job: 'IT' }) /* age 大于 18，或者 job 为 'IT' 的数据 */ db.users.find({ $or: [ {age: {$gt: 18}}, {job: 'IT'} ] }) # 文档方法 sort()会根据指定字段进行升序或降序排序 /* 按照 age 升序 */ db.users.find().sort(age: 1) { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641b\\"), \\"name\\" : \\"foo\\", \\"age\\" : 18, \\"gender\\" : \\"男\\", \\"job\\" : \\"学生\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641c\\"), \\"name\\" : \\"bar\\", \\"age\\" : 18, \\"gender\\" : \\"女\\", \\"job\\" : \\"学生\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c6418\\"), \\"name\\" : \\"zs\\", \\"age\\" : 23, \\"gender\\" : \\"男\\", \\"job\\" : \\"IT\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c6419\\"), \\"name\\" : \\"ls\\", \\"age\\" : 24, \\"gender\\" : \\"男\\", \\"job\\" : \\"金融\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641a\\"), \\"name\\" : \\"ww\\", \\"age\\" : 25, \\"gender\\" : \\"女\\", \\"job\\" : \\"IT\\" } /* 按照 age 降序 */ db.users.find().sort(age: -1) { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641a\\"), \\"name\\" : \\"ww\\", \\"age\\" : 25, \\"gender\\" : \\"女\\", \\"job\\" : \\"IT\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c6419\\"), \\"name\\" : \\"ls\\", \\"age\\" : 24, \\"gender\\" : \\"男\\", \\"job\\" : \\"金融\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c6418\\"), \\"name\\" : \\"zs\\", \\"age\\" : 23, \\"gender\\" : \\"男\\", \\"job\\" : \\"IT\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641b\\"), \\"name\\" : \\"foo\\", \\"age\\" : 18, \\"gender\\" : \\"男\\", \\"job\\" : \\"学生\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641c\\"), \\"name\\" : \\"bar\\", \\"age\\" : 18, \\"gender\\" : \\"女\\", \\"job\\" : \\"学生\\" } limit()用来截取指定的数据，当为正数时，正着取，为负时倒着取 skip()用来绕过一些数据，当为正数时，正着绕，为负时倒着绕 findOne()和find()相比它只查询一条数据，其他的没有什么区别 # 更新数据 update(&lt;filter&gt;, &lt;update&gt;, &lt;option&gt;)方法用于更新数据，&lt;filter&gt;用于过滤一些信息，如果传入空对象会对所有的数据进行更新，&lt;update&gt;用于设置需要更新的数据 /* 更新 name 为 bar 的 age 为 19 */ db.users.update( { name: 'bar' }, { $set: {age: 19}} ) 注意，不使用$set运算符直接更新字段的数据，会导致该数据的所有字段变成指定的样子，这非常危险，除_id以外的字段都会变成新的 /* 更新 name 为 bar 的字段，该数据的所有字段都被清除，只剩下 age: 19 */ db.users.update( { name: 'bar' }, { age: 19 } ) update方法只会更新匹配到所有数据中的第一条，如果想要更新匹配到的所有数据，就要添加第三个参数{ multi: true } db.users.update( { job: 'IT' }, { $set: { job: '程序员' }}, { multi: true } ) # 建立索引","head":[["meta",{"property":"og:url","content":"https://jqiue.github.io/database/mongodb.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"MongoDB"}],["meta",{"property":"og:description","content":"MongoDB 是面向文档的非关系型数据库管理系统，并不是传统的关系数据库，基本的思路就是将“行”（row）的概念换成更加灵活的“文档”（document）模型。MongoDB 是基于 JSON，而面向文档的方式可以将文档或数组内嵌进来，所以一条记录可以表示非常复杂的关系。学习 MongoDB 需要具备一定的 JavaScript 和 JSON 基础 在开始操作之前必须先了解几个概念： 数据库（Database） 集合（Collection）：相当于关系型数据库中的表 文档（Document）：相当于关系型数据库中的记录 在 NoSQL 中，操作数据库都是通过指令或程序语言来完成的，在 MongoDB 中就是使用 JavaScript 来完成大部分操作 # 基本操作 首先在终端上输入mongo命令进入 MongoDB 命令行程序，退出使用eixt命令 输入show databases用于显示已创建的数据库，也可以使用缩写形式show dbs，如果没有出现意外，将得到三个默认的数据库： admin config local 使用use关键字切换当前使用的数据库，当use不存在的数据库时不会报错，会隐式的创建一个数据库，但只有在创建集合的时候才会显示这个数据库，所以这个时候使用show databases是不会显示的 use database_name db.stats()方法会将该数据库的状态返回，这里db就代表之前use过的数据库，是的，这和程序语言中的对象一样。db.dropDatabase()用于删除当前数据库 db.createCollection(name)方法会在当前数据库下创建一个集合，现在这个数据库中已经具有了结构，可以使用show dbs查看了，相应的，show collections会显示当前数据库中所有的集合 如果对集合名字不满意，可以使用db.集合名.renameCollection(新集合名)进行修改。注意，之前创建的集合，相当于当前db的属性了，这超级简单，那么删除该集合也是类似的写法，db.集合名.drop()。对应的，想要查看当前集合的状态，也可以使用db.集合名.stats() db.集合名.insert()可以插入一条数据，格式为键值对形式，为了方便，MongoDB 允许插入时 key 不加引号，会自动加上 db.users.insert({name: 'zs', age: 23, gender: '男'}); 提示 如果没有创建数据库以及集合，这条语句也会隐式的创建一个数据库和对应的集合，非常高效 db.集合名.find()会查询该集合下的所有数据，不出意外的情况下，上述插入命令后的结果应该是这样的： { \\"_id\\" : ObjectId(\\"6121b78bd865c5bcee1308af\\"), \\"name\\" : \\"zs\\", \\"age\\" : 23, \\"gender\\" : \\"男\\" } 发现除了自己指定的数据以外还有一个自动生成的_id键，如果不指定这个键，MongoDB 会为每条数据添加一个唯一的_id键，但并不推荐手动指定它 _id 的组成 _id的值由时间戳，机器码，PID，计数器组成，所以它是全球唯一的都不过分 也可以使用传递数组的方式来插入多条数据： db.集合名.insert([ {}, {}, ... ]) 现在db.集合名具有的方法： count()：返回文档数量 stats()：返回集合的状态 remove()：删除数据 find()：查询数据 # JavaScript 支持 MongoDB 底层是用 JavaScript 引擎实现的，支持部分 JavaScript 语法，于是： for (let i = 1; i &lt; 10; i++){ db.集合名.insert(...); } # 带条件的操作 db.集合名.find()可以查看该集合中的数据，如果不传入参数，将会查询所有的数据，现在开始对下面的数据进行待条件的查询 db.users.insert([ { name: 'zs', age: 23, gender: '男', job: 'IT' }, { name: 'ls', age: 24, gender: '男', job: '金融' }, { name: 'ww', age: 25, gender: '女', job: 'IT' }, { name: 'foo', age: 18, gender: '男', job: '学生' }, { name: 'bar', age: 18, gender: '女', job: '学生' }, ]) find()方法的第一个参数用来进行条件查询，传入一个对象，比如： 查询指定的数据：db.users.find({name: 'zs'}) 查询某个范围的数据：db.users.find({age: {$gt: 18}}) 这是一部分运算符： 运算符 作用 $gt 大于 $gte 大于等于 $lt 小于 $lte 小于等于 $ne 不等于 $in 值在一个范围内（数组） $nin 值不在一个范围中（数组） $inc 递增 $rename 重命名列 $set 修改列值 $unset 删除列 /Reg/ 正则表达式 $or 或 第二个参数可以控制查询的返回列，如果{列名:1/true}，则只查询该列数据，如果{列名:0/false}，则查询除了该列以外的所有列的数据。当条件参数省略时，必须传入一个空对象，比如db.集合名.find({}, {列名:0})，如果想要去除_id，则应该这样db.集合名.find({}, {_id: 0}) 还有一个特殊的方法distinct(列)用来查询该列中所有不同的值，有相同的值会去除 db.users.distinct(\\"job\\") /* Result */ [ \\"IT\\", \\"学生\\", \\"金融\\" ] 既然是用对象来控制查询方式，而对象是一种复杂结构，也就存在复杂的查询条件 /* age 大于 18，并且 job 为 'IT' 的数据 */ db.users.find({ age: {$gt: 18}, job: 'IT' }) /* age 大于 18，或者 job 为 'IT' 的数据 */ db.users.find({ $or: [ {age: {$gt: 18}}, {job: 'IT'} ] }) # 文档方法 sort()会根据指定字段进行升序或降序排序 /* 按照 age 升序 */ db.users.find().sort(age: 1) { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641b\\"), \\"name\\" : \\"foo\\", \\"age\\" : 18, \\"gender\\" : \\"男\\", \\"job\\" : \\"学生\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641c\\"), \\"name\\" : \\"bar\\", \\"age\\" : 18, \\"gender\\" : \\"女\\", \\"job\\" : \\"学生\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c6418\\"), \\"name\\" : \\"zs\\", \\"age\\" : 23, \\"gender\\" : \\"男\\", \\"job\\" : \\"IT\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c6419\\"), \\"name\\" : \\"ls\\", \\"age\\" : 24, \\"gender\\" : \\"男\\", \\"job\\" : \\"金融\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641a\\"), \\"name\\" : \\"ww\\", \\"age\\" : 25, \\"gender\\" : \\"女\\", \\"job\\" : \\"IT\\" } /* 按照 age 降序 */ db.users.find().sort(age: -1) { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641a\\"), \\"name\\" : \\"ww\\", \\"age\\" : 25, \\"gender\\" : \\"女\\", \\"job\\" : \\"IT\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c6419\\"), \\"name\\" : \\"ls\\", \\"age\\" : 24, \\"gender\\" : \\"男\\", \\"job\\" : \\"金融\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c6418\\"), \\"name\\" : \\"zs\\", \\"age\\" : 23, \\"gender\\" : \\"男\\", \\"job\\" : \\"IT\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641b\\"), \\"name\\" : \\"foo\\", \\"age\\" : 18, \\"gender\\" : \\"男\\", \\"job\\" : \\"学生\\" } { \\"_id\\" : ObjectId(\\"6121c02f7f81f8150f9c641c\\"), \\"name\\" : \\"bar\\", \\"age\\" : 18, \\"gender\\" : \\"女\\", \\"job\\" : \\"学生\\" } limit()用来截取指定的数据，当为正数时，正着取，为负时倒着取 skip()用来绕过一些数据，当为正数时，正着绕，为负时倒着绕 findOne()和find()相比它只查询一条数据，其他的没有什么区别 # 更新数据 update(&lt;filter&gt;, &lt;update&gt;, &lt;option&gt;)方法用于更新数据，&lt;filter&gt;用于过滤一些信息，如果传入空对象会对所有的数据进行更新，&lt;update&gt;用于设置需要更新的数据 /* 更新 name 为 bar 的 age 为 19 */ db.users.update( { name: 'bar' }, { $set: {age: 19}} ) 注意，不使用$set运算符直接更新字段的数据，会导致该数据的所有字段变成指定的样子，这非常危险，除_id以外的字段都会变成新的 /* 更新 name 为 bar 的字段，该数据的所有字段都被清除，只剩下 age: 19 */ db.users.update( { name: 'bar' }, { age: 19 } ) update方法只会更新匹配到所有数据中的第一条，如果想要更新匹配到的所有数据，就要添加第三个参数{ multi: true } db.users.update( { job: 'IT' }, { $set: { job: '程序员' }}, { multi: true } ) # 建立索引"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-03-05T05:53:26.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-03-05T05:53:26.000Z"}]]},"excerpt":"<p>MongoDB 是面向文档的非关系型数据库管理系统，并不是传统的关系数据库，基本的思路就是将“行”（row）的概念换成更加灵活的“文档”（document）模型。MongoDB 是基于 JSON，而面向文档的方式可以将文档或数组内嵌进来，所以一条记录可以表示非常复杂的关系。学习 MongoDB 需要具备一定的 JavaScript 和 JSON 基础</p>\\n<p>在开始操作之前必须先了解几个概念：</p>\\n<ul>\\n<li>数据库（Database）</li>\\n<li>集合（Collection）：相当于关系型数据库中的表</li>\\n<li>文档（Document）：相当于关系型数据库中的记录</li>\\n</ul>\\n<p>在 NoSQL 中，操作数据库都是通过指令或程序语言来完成的，在 MongoDB 中就是使用 JavaScript 来完成大部分操作</p>\\n<h2 id=\\"基本操作\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#基本操作\\" aria-hidden=\\"true\\">#</a> 基本操作</h2>\\n<p>首先在终端上输入<code v-pre>mongo</code>命令进入 MongoDB 命令行程序，退出使用<code v-pre>eixt</code>命令</p>\\n<p>输入<code v-pre>show databases</code>用于显示已创建的数据库，也可以使用缩写形式<code v-pre>show dbs</code>，如果没有出现意外，将得到三个默认的数据库：</p>\\n<ul>\\n<li>admin</li>\\n<li>config</li>\\n<li>local</li>\\n</ul>\\n<p>使用<code v-pre>use</code>关键字切换当前使用的数据库，当<code v-pre>use</code>不存在的数据库时不会报错，会隐式的创建一个数据库，但只有在创建集合的时候才会显示这个数据库，所以这个时候使用<code v-pre>show databases</code>是不会显示的</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-ext=\\"sql\\"><pre v-pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">use</span> database_name\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p><code v-pre>db.stats()</code>方法会将该数据库的状态返回，这里<code v-pre>db</code>就代表之前<code v-pre>use</code>过的数据库，是的，这和程序语言中的对象一样。<code v-pre>db.dropDatabase()</code>用于删除当前数据库</p>\\n<p><code v-pre>db.createCollection(name)</code>方法会在当前数据库下创建一个集合，现在这个数据库中已经具有了结构，可以使用<code v-pre>show dbs</code>查看了，相应的，<code v-pre>show collections</code>会显示当前数据库中所有的集合</p>\\n<p>如果对集合名字不满意，可以使用<code v-pre>db.集合名.renameCollection(新集合名)</code>进行修改。注意，之前创建的集合，相当于当前<code v-pre>db</code>的属性了，这超级简单，那么删除该集合也是类似的写法，<code v-pre>db.集合名.drop()</code>。对应的，想要查看当前集合的状态，也可以使用<code v-pre>db.集合名.stats()</code></p>\\n<p><code v-pre>db.集合名.insert()</code>可以插入一条数据，格式为键值对形式，为了方便，MongoDB 允许插入时 key 不加引号，会自动加上</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>db<span class=\\"token punctuation\\">.</span>users<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'zs'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">gender</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'男'</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>如果没有创建数据库以及集合，这条语句也会隐式的创建一个数据库和对应的集合，非常高效</p>\\n</div>\\n<p><code v-pre>db.集合名.find()</code>会查询该集合下的所有数据，不出意外的情况下，上述插入命令后的结果应该是这样的：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121b78bd865c5bcee1308af\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"zs\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"男\\"</span> <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>发现除了自己指定的数据以外还有一个自动生成的<code v-pre>_id</code>键，如果不指定这个键，MongoDB 会为每条数据添加一个唯一的<code v-pre>_id</code>键，但并不推荐手动指定它</p>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">_id 的组成</p>\\n<p><code v-pre>_id</code>的值由时间戳，机器码，PID，计数器组成，所以它是全球唯一的都不过分</p>\\n</div>\\n<p>也可以使用传递数组的方式来插入多条数据：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>db<span class=\\"token punctuation\\">.</span>集合名<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>\\n  <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token operator\\">...</span>\\n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>现在<code v-pre>db.集合名</code>具有的方法：</p>\\n<ul>\\n<li>count()：返回文档数量</li>\\n<li>stats()：返回集合的状态</li>\\n<li>remove()：删除数据</li>\\n<li>find()：查询数据</li>\\n</ul>\\n<h2 id=\\"javascript-支持\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#javascript-支持\\" aria-hidden=\\"true\\">#</a> JavaScript 支持</h2>\\n<p>MongoDB 底层是用 JavaScript 引擎实现的，支持部分 JavaScript 语法，于是：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  db<span class=\\"token punctuation\\">.</span>集合名<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">...</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h2 id=\\"带条件的操作\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#带条件的操作\\" aria-hidden=\\"true\\">#</a> 带条件的操作</h2>\\n<p><code v-pre>db.集合名.find()</code>可以查看该集合中的数据，如果不传入参数，将会查询所有的数据，现在开始对下面的数据进行待条件的查询</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>db<span class=\\"token punctuation\\">.</span>users<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">insert</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'zs'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">gender</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'男'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">job</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'IT'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'ls'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">24</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">gender</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'男'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">job</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'金融'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'ww'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">gender</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'女'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">job</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'IT'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">gender</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'男'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">job</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'学生'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'bar'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">gender</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'女'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">job</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'学生'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><code v-pre>find()</code>方法的第一个参数用来进行条件查询，传入一个对象，比如：</p>\\n<ul>\\n<li>查询指定的数据：<code v-pre>db.users.find({name: 'zs'})</code></li>\\n<li>查询某个范围的数据：<code v-pre>db.users.find({age: {$gt: 18}})</code></li>\\n</ul>\\n<p>这是一部分运算符：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>运算符</th>\\n<th>作用</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>$gt</td>\\n<td>大于</td>\\n</tr>\\n<tr>\\n<td>$gte</td>\\n<td>大于等于</td>\\n</tr>\\n<tr>\\n<td>$lt</td>\\n<td>小于</td>\\n</tr>\\n<tr>\\n<td>$lte</td>\\n<td>小于等于</td>\\n</tr>\\n<tr>\\n<td>$ne</td>\\n<td>不等于</td>\\n</tr>\\n<tr>\\n<td>$in</td>\\n<td>值在一个范围内（数组）</td>\\n</tr>\\n<tr>\\n<td>$nin</td>\\n<td>值不在一个范围中（数组）</td>\\n</tr>\\n<tr>\\n<td>$inc</td>\\n<td>递增</td>\\n</tr>\\n<tr>\\n<td>$rename</td>\\n<td>重命名列</td>\\n</tr>\\n<tr>\\n<td>$set</td>\\n<td>修改列值</td>\\n</tr>\\n<tr>\\n<td>$unset</td>\\n<td>删除列</td>\\n</tr>\\n<tr>\\n<td>/Reg/</td>\\n<td>正则表达式</td>\\n</tr>\\n<tr>\\n<td>$or</td>\\n<td>或</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>第二个参数可以控制查询的返回列，如果<code v-pre>{列名:1/true}</code>，则只查询该列数据，如果<code v-pre>{列名:0/false}</code>，则查询除了该列以外的所有列的数据。当条件参数省略时，必须传入一个空对象，比如<code v-pre>db.集合名.find({}, {列名:0})</code>，如果想要去除<code v-pre>_id</code>，则应该这样<code v-pre>db.集合名.find({}, {_id: 0})</code></p>\\n<p>还有一个特殊的方法<code v-pre>distinct(列)</code>用来查询该列中所有不同的值，有相同的值会去除</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>db<span class=\\"token punctuation\\">.</span>users<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">distinct</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"job\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">/* Result */</span>\\n<span class=\\"token punctuation\\">[</span> <span class=\\"token string\\">\\"IT\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"学生\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"金融\\"</span> <span class=\\"token punctuation\\">]</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>既然是用对象来控制查询方式，而对象是一种复杂结构，也就存在复杂的查询条件</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">/* age 大于 18，并且 job 为 'IT' 的数据 */</span>\\ndb<span class=\\"token punctuation\\">.</span>users<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">find</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">$gt</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> \\n  <span class=\\"token literal-property property\\">job</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'IT'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">/* age 大于 18，或者 job 为 'IT' 的数据 */</span>\\ndb<span class=\\"token punctuation\\">.</span>users<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">find</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">$or</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span> \\n    <span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">$gt</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">job</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'IT'</span><span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h2 id=\\"文档方法\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#文档方法\\" aria-hidden=\\"true\\">#</a> 文档方法</h2>\\n<p><code v-pre>sort()</code>会根据指定字段进行升序或降序排序</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">/* 按照 age 升序 */</span>\\ndb<span class=\\"token punctuation\\">.</span>users<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">find</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span></span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121c02f7f81f8150f9c641b\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"foo\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"男\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"job\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"学生\\"</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121c02f7f81f8150f9c641c\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"bar\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"女\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"job\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"学生\\"</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121c02f7f81f8150f9c6418\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"zs\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"男\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"job\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"IT\\"</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121c02f7f81f8150f9c6419\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"ls\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">24</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"男\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"job\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"金融\\"</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121c02f7f81f8150f9c641a\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"ww\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"女\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"job\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"IT\\"</span> <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/* 按照 age 降序 */</span>\\ndb<span class=\\"token punctuation\\">.</span>users<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">find</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span></span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121c02f7f81f8150f9c641a\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"ww\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"女\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"job\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"IT\\"</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121c02f7f81f8150f9c6419\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"ls\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">24</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"男\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"job\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"金融\\"</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121c02f7f81f8150f9c6418\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"zs\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"男\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"job\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"IT\\"</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121c02f7f81f8150f9c641b\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"foo\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"男\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"job\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"学生\\"</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">\\"_id\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">ObjectId</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"6121c02f7f81f8150f9c641c\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"name\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"bar\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"age\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"gender\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"女\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">\\"job\\"</span> <span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"学生\\"</span> <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><code v-pre>limit()</code>用来截取指定的数据，当为正数时，正着取，为负时倒着取</p>\\n<p><code v-pre>skip()</code>用来绕过一些数据，当为正数时，正着绕，为负时倒着绕</p>\\n<p><code v-pre>findOne()</code>和<code v-pre>find()</code>相比它只查询一条数据，其他的没有什么区别</p>\\n<h2 id=\\"更新数据\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#更新数据\\" aria-hidden=\\"true\\">#</a> 更新数据</h2>\\n<p><code v-pre>update(&lt;filter&gt;, &lt;update&gt;, &lt;option&gt;)</code>方法用于更新数据，<code v-pre>&lt;filter&gt;</code>用于过滤一些信息，如果传入空对象会对所有的数据进行更新，<code v-pre>&lt;update&gt;</code>用于设置需要更新的数据</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">/* 更新 name 为 bar 的 age 为 19 */</span>\\ndb<span class=\\"token punctuation\\">.</span>users<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">update</span><span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'bar'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> \\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">$set</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">19</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>注意，不使用<code v-pre>$set</code>运算符直接更新字段的数据，会导致该数据的所有字段变成指定的样子，这非常危险，除<code v-pre>_id</code>以外的字段都会变成新的</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">/* 更新 name 为 bar 的字段，该数据的所有字段都被清除，只剩下 age: 19 */</span>\\ndb<span class=\\"token punctuation\\">.</span>users<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">update</span><span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'bar'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> \\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">19</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><code v-pre>update</code>方法只会更新匹配到所有数据中的第一条，如果想要更新匹配到的所有数据，就要添加第三个参数<code v-pre>{ multi: true }</code></p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>db<span class=\\"token punctuation\\">.</span>users<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">update</span><span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">job</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'IT'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">$set</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">job</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'程序员'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">multi</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h2 id=\\"建立索引\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#建立索引\\" aria-hidden=\\"true\\">#</a> 建立索引</h2>\\n","headers":[{"level":2,"title":"基本操作","slug":"基本操作","link":"#基本操作","children":[]},{"level":2,"title":"JavaScript 支持","slug":"javascript-支持","link":"#javascript-支持","children":[]},{"level":2,"title":"带条件的操作","slug":"带条件的操作","link":"#带条件的操作","children":[]},{"level":2,"title":"文档方法","slug":"文档方法","link":"#文档方法","children":[]},{"level":2,"title":"更新数据","slug":"更新数据","link":"#更新数据","children":[]},{"level":2,"title":"建立索引","slug":"建立索引","link":"#建立索引","children":[]}],"git":{"createdTime":1646459606000,"updatedTime":1646459606000,"contributors":[{"name":"JQiue","email":"861947542@qq.com","commits":1}]},"readingTime":{"minutes":6.34,"words":1901},"autoDesc":true,"localizedDate":"2022年3月5日","filePathRelative":"database/mongodb.md"}`);export{n as data};
