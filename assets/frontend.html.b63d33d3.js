const n=JSON.parse(`{"key":"v-512f5050","path":"/sundry/frontend.html","title":"关于 Web 前端的一切","lang":"zh-CN","frontmatter":{"title":"关于 Web 前端的一切","category":["Web"],"article":false,"description":"这里主要记录前端开发中的所有工程技术 # Lint 在计算机科学中，lint 是一种工具的名称，用来标记代码中，某些可疑的，不具有结构性的语句，是一种静态程序分析工具 Lint 工具的优势： 避免低级bug，找出可能发生的语法错误 提示删除多余的代码 确保代码遵循最佳实践 统一团队的代码风格 # JavaScriptLint 在 JavaScript 发展的过程中出现过很多很多 lint 工具，比如： JSLint JSHint ESLint JSLint 可以说是最早出现的 JavaScript 的 lint 工具，但是它及其具有个人风格，这让自由的人很难接受，虽然它仍然还在更新。由于 JSLint 的规则让人无法接受，所以基于 JSLint 的 JSHint 出现了，在 JSLint 的基础上增加了很多配置项，给了开发者很大的自由 ESLint 是下一代 JS Linter 工具，但是速度远远不如 JSLint。随着 ES6 的出现，由于 JSLint 短期内无法提供支持，而 ESLint 只需要有合适的解析器就能进行语法检查，这时 Babel 为 ESLint 提供了支持，让 ESLint 最快的成为了支持 ES6 语法的 lint 工具 npm install -g eslint 在项目中使用eslint --init，一问一答后就会在根目录中生成.eslintrc.js文件 此时使用ESlint &lt;file/folder&gt;可对目录中的代码进行检查 # CSSLint # prettier 是一款代码格式化工具，它不同于 Lint，只是做一些代码风格检查 # CSS 预处理器 众所周知，CSS 具有大量重复的代码，这看起来很不优雅，CSS 预处理器帮忙做到了简化，常见的预处理器有： Sass Less Sass 是最成熟的预处理器，它的后缀文件一般为scss或sass，sass以严格的缩进语法来书写，省略了大括号和分号，而scss和平常的css类似 嵌套规则： /* css */ .header span { color: red; } /* scss */ .header { span { color: red; } } /* sass */ .header span color: red 在嵌套规则中引用父选择器 /* css */ .header span {} .header span:active {} .header span:hover {} /* scss */ .header { span { &amp;:active {} &amp;:hover {} } } /* sass */ .header span &amp;:active &amp;:hover 变量 - 任何符合 CSS 取值都可以定义，甚至能参与表达式计算 /* css */ .title { color: #666; } .subtitle { color: #666; } .titletitle { color: #666; } /* scss */ $text-color: #666; .title { color: $text-color; } .subtitle { color: $text-color; } .titletitle { color: $text-color; } 当一个代码很大的时候，可以被拆分一个单独的 Sass 文件引入，文件最好以_开头，否则会单独编译出一个 CSS 文件，通过@import语法导入 /* foo.scss */ span { color: red; } 引入时不需要加_ @import 'foo' 混入 - 抽取公共的代码样式 /* scss */ @mixin singleline-ellipsis { overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .text { width: 600px; @include singleline-ellipsis; } .content-text { width: 1000px; @include singleline-ellipsis; } /* css */ .text { width: 600px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .content-text { width: 1000px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } 且支持传参，使用$定义 /* scss */ @mixin singleline-ellipsis($width) { width: $width; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .text { @include singleline-ellipsis(600px); } .content-text { @include singleline-ellipsis(1000px); } /* css */ .text { width: 600px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .content-text { width: 1000px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } 还可以搭配@content语法，它在被导入的时候被内容所填充 /* scss */ @mixin ipad { @media screen and(min-width: 768px) { @content; } } .text { color: red; @include ipad { color: pink; } } /* css */ .text { color: red; } @media screen and (min-width: 768px) { .text { color: pink; } } # babel Babel 是一个 JavaScript 转义器，它将使用了最新的 ECMAScript 特性代码转换成了使用最广泛支持的 ES5 特性的等价代码，让开发人员享受新特性带来的爽点同时，避免了大部分兼容性问题 npm install --save-dev @babel/core @babel/cli @babel/preset-env babel.config.json文件配置 { \\"presets\\": [\\"@babel/preset-env\\"] } 启动 babel src --out-dir dist # webpack 模块化虽然解决了代码了维护性和复用性，但是由于导入资源变多了，请求次数变多了，网页性能也就变差了，因此需要一个打包工具将所有的模块合并到一个文件中，再引入到网页中去，而 webpack 恰恰就是这样的工具 webpack 是一套基于 Node.js 的&quot;模块打包工具&quot;，在刚推出的时候就是一个单纯的 JS 模块打包工具，可以将多个模块的 JS 文件合并打包到一个文件中，但是随着时间的推移、众多开发者的追捧和众多开发者的贡献，现在 webpack 不仅仅能够打包 JS 模块, 还可以打包 CSS/LESS/SCSS/图片等其它文件 不推荐全局安装 webpack，在使用不同版本的 webpack 版本打包的项目中，这可能会导致构建失败 npm i webpack webpack-cli --save-dev 提示 webpack 4+ 版本后，需要额外的安装 CLI webpack 处理模块时，它递归构建一个关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 bundle，但是仍需告诉 webpack 该从哪里开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点依赖的，每个依赖项随即被处理，最后输出到称之为 bundles 的文件中 这里需要理解四个核心概念： 模式 - 模式会应用不同的打包优化 入口 - 入口指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始 loader - 通过 loader 也可以打包非 JavaScript 文件 插件 - 插件可以用于执行更为广泛的任务，比如打包优化和压缩，可以处理各种各样的任务 输出 - 出口告诉 webpack 应该在哪里输出它创建的 bundle，以及如何命名这些文件 假设已经初始化了一个项目，且安装好了 webpack 在项目中创建一个src/index.js文件，随便写点代码，终端中直接执行npx webpack，不用理会终端中的信息，此时 webpack 会在根目录创建一个dist文件夹，里面是一个打包好的main.js文件，这个文件和src/index.js中的代码是一样的 然而还没完，webpack 可是一个模块打包器，才打包一个文件根本看不出来什么，继续在src中创建一个foo.js文件，随便写点代码，在src/index.js中使用模块语法引入，在进行一次打包，此时发现还是生成了一个dist/main.js文件，然后创建一个src/index.html，写好 HTML 基本结构，并引入main.js就可以看到代码效果了 提示 Webpack 支持 ES module, CommonJS, AMD 等模块化规范，随便使用 上面是默认的配置，如果不按照默认的配置进行创建文件，就无法打包成功。而 webpack 提供了一个配置文件用来控制打包行为，执行npx webpack首先会看根目录是否有webpack.config.js文件，如果有就按照配置打包，没有就按照默认的方式进行打包 webpack.config.js掌控着 webpack 的一切行为，这里可以配置入口，输出，loader，插件，模式： const path = require('path'); module.exports = { mode: 'development', entry: './src/index.js', output: { filename: 'main.js', path: path.resolve(__dirname, 'dist') }, module: {}, plugins: [], }; 对于mode来说用来控制开发环境和生产环境的打包策略，具有两种取值development/production entry则告知入口文件的位置，相对于配置文件。output控制输出目录以及打包后的文件，这里使用的 Node.js 的path模块来进行路径拼接 loader 让 webpack 处理非 JS 文件的模块，有各种各样的 loader，有官方开发的，社区开发的等等，所以每个 loader 都是一个独立的模块需要被安装，webpack 会根据module中的规则来匹配对应的 loader，并应用它。假如想要在 webpack 中使用 babel，则可以使用 babel-loader const path = require('path'); module.exports = { mode: 'development', entry: './src/main.js', output: { filename: 'main.js', path: path.resolve(__dirname, 'dist') }, module: { rules: [ { test: /\\\\.js$/, exclude: /node_modules/, loader: 'babel-loader' } ] }, plugins: [], }; rules通过test来匹配对应文件，并应用对应的 loader 程序，exclude是排除 loader 对一些文件的操作 插件比 loader 的范围更加广泛，有官方插件和社区插件等，都是独立的模块，一般插件都是提供的构造函数，插件的用法要看具体的插件文档。比如打包完成后通常需要手动引入 js 文件到 HTML 中，而一些插件，比如html-webpack-plugin会自动完成这些工作 const path = require('path'); const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = { mode: 'development', entry: './src/main.js', output: { filename: 'main.js', path: path.resolve(__dirname, 'dist') }, module: {}, plugins: [ new HtmlWebpackPlugin({ template: './index.html' }) ], }; webpack 允许多个入口，比如说有两个 HTML 文件，配合html-webpack-plugin应该这么用 const path = require('path'); const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = { mode: 'development', // 配置多个入口 entry: { index: './src/index.js', page: './src/page.js' }, output: { filename: '[name].js', // 自动生成对应的文件名 path: path.resolve(__dirname, 'dist') }, plugins: [ // 第一个 HTML 文件所需要的选项 new HtmlWebpackPlugin({ template: 'index.html', filename: 'index.html', // 输出的文件名 chunks: ['index'] // 指定某个入口合并在 HTML 中 }), // 第二个 HTML 文件所需要的选项 new HtmlWebpackPlugin({ template: 'page.html', filename: 'page.html', chunks: ['index'] }), ], }; 每次手动输入webpack打包太繁琐，虽然可以直接配置script用来简化操作，但这仍然解决不了需要手动进行打包的过程。webpack 提供了一个--watch的额外参数用来监听文件的改变，一旦发生改变就会自动打包，这很是方便，已经实现打包自动化。但这仍然需要手动刷新网页查看效果，此时就需要用到webpack-dev-server，不仅具备自动打包功能，还能自动打开生成的index.html，同时能够实时重新加载，而不必按下 f5 刷新网页，需要进行额外的安装 npm install --save-dev webpack-dev-server 执行npx webpack-dev-server --open即可，为了避免手动输入，在 package.json 的script项配置&quot;serve&quot;: &quot;webpack-dev-server --open&quot;即可 # 很棒的 plugins","head":[["meta",{"property":"og:url","content":"https://jqiue.github.io/sundry/frontend.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"关于 Web 前端的一切"}],["meta",{"property":"og:description","content":"这里主要记录前端开发中的所有工程技术 # Lint 在计算机科学中，lint 是一种工具的名称，用来标记代码中，某些可疑的，不具有结构性的语句，是一种静态程序分析工具 Lint 工具的优势： 避免低级bug，找出可能发生的语法错误 提示删除多余的代码 确保代码遵循最佳实践 统一团队的代码风格 # JavaScriptLint 在 JavaScript 发展的过程中出现过很多很多 lint 工具，比如： JSLint JSHint ESLint JSLint 可以说是最早出现的 JavaScript 的 lint 工具，但是它及其具有个人风格，这让自由的人很难接受，虽然它仍然还在更新。由于 JSLint 的规则让人无法接受，所以基于 JSLint 的 JSHint 出现了，在 JSLint 的基础上增加了很多配置项，给了开发者很大的自由 ESLint 是下一代 JS Linter 工具，但是速度远远不如 JSLint。随着 ES6 的出现，由于 JSLint 短期内无法提供支持，而 ESLint 只需要有合适的解析器就能进行语法检查，这时 Babel 为 ESLint 提供了支持，让 ESLint 最快的成为了支持 ES6 语法的 lint 工具 npm install -g eslint 在项目中使用eslint --init，一问一答后就会在根目录中生成.eslintrc.js文件 此时使用ESlint &lt;file/folder&gt;可对目录中的代码进行检查 # CSSLint # prettier 是一款代码格式化工具，它不同于 Lint，只是做一些代码风格检查 # CSS 预处理器 众所周知，CSS 具有大量重复的代码，这看起来很不优雅，CSS 预处理器帮忙做到了简化，常见的预处理器有： Sass Less Sass 是最成熟的预处理器，它的后缀文件一般为scss或sass，sass以严格的缩进语法来书写，省略了大括号和分号，而scss和平常的css类似 嵌套规则： /* css */ .header span { color: red; } /* scss */ .header { span { color: red; } } /* sass */ .header span color: red 在嵌套规则中引用父选择器 /* css */ .header span {} .header span:active {} .header span:hover {} /* scss */ .header { span { &amp;:active {} &amp;:hover {} } } /* sass */ .header span &amp;:active &amp;:hover 变量 - 任何符合 CSS 取值都可以定义，甚至能参与表达式计算 /* css */ .title { color: #666; } .subtitle { color: #666; } .titletitle { color: #666; } /* scss */ $text-color: #666; .title { color: $text-color; } .subtitle { color: $text-color; } .titletitle { color: $text-color; } 当一个代码很大的时候，可以被拆分一个单独的 Sass 文件引入，文件最好以_开头，否则会单独编译出一个 CSS 文件，通过@import语法导入 /* foo.scss */ span { color: red; } 引入时不需要加_ @import 'foo' 混入 - 抽取公共的代码样式 /* scss */ @mixin singleline-ellipsis { overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .text { width: 600px; @include singleline-ellipsis; } .content-text { width: 1000px; @include singleline-ellipsis; } /* css */ .text { width: 600px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .content-text { width: 1000px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } 且支持传参，使用$定义 /* scss */ @mixin singleline-ellipsis($width) { width: $width; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .text { @include singleline-ellipsis(600px); } .content-text { @include singleline-ellipsis(1000px); } /* css */ .text { width: 600px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .content-text { width: 1000px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } 还可以搭配@content语法，它在被导入的时候被内容所填充 /* scss */ @mixin ipad { @media screen and(min-width: 768px) { @content; } } .text { color: red; @include ipad { color: pink; } } /* css */ .text { color: red; } @media screen and (min-width: 768px) { .text { color: pink; } } # babel Babel 是一个 JavaScript 转义器，它将使用了最新的 ECMAScript 特性代码转换成了使用最广泛支持的 ES5 特性的等价代码，让开发人员享受新特性带来的爽点同时，避免了大部分兼容性问题 npm install --save-dev @babel/core @babel/cli @babel/preset-env babel.config.json文件配置 { \\"presets\\": [\\"@babel/preset-env\\"] } 启动 babel src --out-dir dist # webpack 模块化虽然解决了代码了维护性和复用性，但是由于导入资源变多了，请求次数变多了，网页性能也就变差了，因此需要一个打包工具将所有的模块合并到一个文件中，再引入到网页中去，而 webpack 恰恰就是这样的工具 webpack 是一套基于 Node.js 的&quot;模块打包工具&quot;，在刚推出的时候就是一个单纯的 JS 模块打包工具，可以将多个模块的 JS 文件合并打包到一个文件中，但是随着时间的推移、众多开发者的追捧和众多开发者的贡献，现在 webpack 不仅仅能够打包 JS 模块, 还可以打包 CSS/LESS/SCSS/图片等其它文件 不推荐全局安装 webpack，在使用不同版本的 webpack 版本打包的项目中，这可能会导致构建失败 npm i webpack webpack-cli --save-dev 提示 webpack 4+ 版本后，需要额外的安装 CLI webpack 处理模块时，它递归构建一个关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 bundle，但是仍需告诉 webpack 该从哪里开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点依赖的，每个依赖项随即被处理，最后输出到称之为 bundles 的文件中 这里需要理解四个核心概念： 模式 - 模式会应用不同的打包优化 入口 - 入口指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始 loader - 通过 loader 也可以打包非 JavaScript 文件 插件 - 插件可以用于执行更为广泛的任务，比如打包优化和压缩，可以处理各种各样的任务 输出 - 出口告诉 webpack 应该在哪里输出它创建的 bundle，以及如何命名这些文件 假设已经初始化了一个项目，且安装好了 webpack 在项目中创建一个src/index.js文件，随便写点代码，终端中直接执行npx webpack，不用理会终端中的信息，此时 webpack 会在根目录创建一个dist文件夹，里面是一个打包好的main.js文件，这个文件和src/index.js中的代码是一样的 然而还没完，webpack 可是一个模块打包器，才打包一个文件根本看不出来什么，继续在src中创建一个foo.js文件，随便写点代码，在src/index.js中使用模块语法引入，在进行一次打包，此时发现还是生成了一个dist/main.js文件，然后创建一个src/index.html，写好 HTML 基本结构，并引入main.js就可以看到代码效果了 提示 Webpack 支持 ES module, CommonJS, AMD 等模块化规范，随便使用 上面是默认的配置，如果不按照默认的配置进行创建文件，就无法打包成功。而 webpack 提供了一个配置文件用来控制打包行为，执行npx webpack首先会看根目录是否有webpack.config.js文件，如果有就按照配置打包，没有就按照默认的方式进行打包 webpack.config.js掌控着 webpack 的一切行为，这里可以配置入口，输出，loader，插件，模式： const path = require('path'); module.exports = { mode: 'development', entry: './src/index.js', output: { filename: 'main.js', path: path.resolve(__dirname, 'dist') }, module: {}, plugins: [], }; 对于mode来说用来控制开发环境和生产环境的打包策略，具有两种取值development/production entry则告知入口文件的位置，相对于配置文件。output控制输出目录以及打包后的文件，这里使用的 Node.js 的path模块来进行路径拼接 loader 让 webpack 处理非 JS 文件的模块，有各种各样的 loader，有官方开发的，社区开发的等等，所以每个 loader 都是一个独立的模块需要被安装，webpack 会根据module中的规则来匹配对应的 loader，并应用它。假如想要在 webpack 中使用 babel，则可以使用 babel-loader const path = require('path'); module.exports = { mode: 'development', entry: './src/main.js', output: { filename: 'main.js', path: path.resolve(__dirname, 'dist') }, module: { rules: [ { test: /\\\\.js$/, exclude: /node_modules/, loader: 'babel-loader' } ] }, plugins: [], }; rules通过test来匹配对应文件，并应用对应的 loader 程序，exclude是排除 loader 对一些文件的操作 插件比 loader 的范围更加广泛，有官方插件和社区插件等，都是独立的模块，一般插件都是提供的构造函数，插件的用法要看具体的插件文档。比如打包完成后通常需要手动引入 js 文件到 HTML 中，而一些插件，比如html-webpack-plugin会自动完成这些工作 const path = require('path'); const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = { mode: 'development', entry: './src/main.js', output: { filename: 'main.js', path: path.resolve(__dirname, 'dist') }, module: {}, plugins: [ new HtmlWebpackPlugin({ template: './index.html' }) ], }; webpack 允许多个入口，比如说有两个 HTML 文件，配合html-webpack-plugin应该这么用 const path = require('path'); const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = { mode: 'development', // 配置多个入口 entry: { index: './src/index.js', page: './src/page.js' }, output: { filename: '[name].js', // 自动生成对应的文件名 path: path.resolve(__dirname, 'dist') }, plugins: [ // 第一个 HTML 文件所需要的选项 new HtmlWebpackPlugin({ template: 'index.html', filename: 'index.html', // 输出的文件名 chunks: ['index'] // 指定某个入口合并在 HTML 中 }), // 第二个 HTML 文件所需要的选项 new HtmlWebpackPlugin({ template: 'page.html', filename: 'page.html', chunks: ['index'] }), ], }; 每次手动输入webpack打包太繁琐，虽然可以直接配置script用来简化操作，但这仍然解决不了需要手动进行打包的过程。webpack 提供了一个--watch的额外参数用来监听文件的改变，一旦发生改变就会自动打包，这很是方便，已经实现打包自动化。但这仍然需要手动刷新网页查看效果，此时就需要用到webpack-dev-server，不仅具备自动打包功能，还能自动打开生成的index.html，同时能够实时重新加载，而不必按下 f5 刷新网页，需要进行额外的安装 npm install --save-dev webpack-dev-server 执行npx webpack-dev-server --open即可，为了避免手动输入，在 package.json 的script项配置&quot;serve&quot;: &quot;webpack-dev-server --open&quot;即可 # 很棒的 plugins"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-09T06:05:45.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-12-09T06:05:45.000Z"}]]},"excerpt":"<p>这里主要记录前端开发中的所有工程技术</p>\\n<h2 id=\\"lint\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#lint\\" aria-hidden=\\"true\\">#</a> Lint</h2>\\n<p>在计算机科学中，lint 是一种工具的名称，用来标记代码中，某些可疑的，不具有结构性的语句，是一种静态程序分析工具</p>\\n<p>Lint 工具的优势：</p>\\n<ul>\\n<li>避免低级bug，找出可能发生的语法错误</li>\\n<li>提示删除多余的代码</li>\\n<li>确保代码遵循最佳实践</li>\\n<li>统一团队的代码风格</li>\\n</ul>\\n<h3 id=\\"javascriptlint\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#javascriptlint\\" aria-hidden=\\"true\\">#</a> JavaScriptLint</h3>\\n<p>在 JavaScript 发展的过程中出现过很多很多 lint 工具，比如：</p>\\n<ul>\\n<li>JSLint</li>\\n<li>JSHint</li>\\n<li>ESLint</li>\\n</ul>\\n<p>JSLint 可以说是最早出现的 JavaScript 的 lint 工具，但是它及其具有个人风格，这让自由的人很难接受，虽然它仍然还在更新。由于 JSLint 的规则让人无法接受，所以基于 JSLint 的 JSHint 出现了，在 JSLint 的基础上增加了很多配置项，给了开发者很大的自由</p>\\n<p>ESLint 是下一代 JS Linter 工具，但是速度远远不如 JSLint。随着 ES6 的出现，由于 JSLint 短期内无法提供支持，而 ESLint 只需要有合适的解析器就能进行语法检查，这时 Babel 为 ESLint 提供了支持，让 ESLint 最快的成为了支持 ES6 语法的 lint 工具</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre v-pre class=\\"language-bash\\"><code><span class=\\"token function\\">npm</span> <span class=\\"token function\\">install</span> <span class=\\"token parameter variable\\">-g</span> eslint\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>在项目中使用<code v-pre>eslint --init</code>，一问一答后就会在根目录中生成<code v-pre>.eslintrc.js</code>文件</p>\\n<p>此时使用<code v-pre>ESlint &lt;file/folder&gt;</code>可对目录中的代码进行检查</p>\\n<h3 id=\\"csslint\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#csslint\\" aria-hidden=\\"true\\">#</a> CSSLint</h3>\\n<h2 id=\\"prettier\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#prettier\\" aria-hidden=\\"true\\">#</a> prettier</h2>\\n<p>是一款代码格式化工具，它不同于 Lint，只是做一些代码风格检查</p>\\n<h2 id=\\"css-预处理器\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#css-预处理器\\" aria-hidden=\\"true\\">#</a> CSS 预处理器</h2>\\n<p>众所周知，CSS 具有大量重复的代码，这看起来很不优雅，CSS 预处理器帮忙做到了简化，常见的预处理器有：</p>\\n<ul>\\n<li>Sass</li>\\n<li>Less</li>\\n</ul>\\n<p>Sass 是最成熟的预处理器，它的后缀文件一般为<code v-pre>scss</code>或<code v-pre>sass</code>，<code v-pre>sass</code>以严格的缩进语法来书写，省略了大括号和分号，而<code v-pre>scss</code>和平常的<code v-pre>css</code>类似</p>\\n<p>嵌套规则：</p>\\n<div class=\\"language-scss line-numbers-mode\\" data-ext=\\"scss\\"><pre v-pre class=\\"language-scss\\"><code><span class=\\"token comment\\">/* css */</span>\\n<span class=\\"token selector\\">.header span </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> red<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/* scss */</span>\\n<span class=\\"token selector\\">.header </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token selector\\">span </span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> red<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/* sass */</span>\\n.header\\n  span\\n    <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> red\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>在嵌套规则中引用父选择器</p>\\n<div class=\\"language-scss line-numbers-mode\\" data-ext=\\"scss\\"><pre v-pre class=\\"language-scss\\"><code><span class=\\"token comment\\">/* css */</span>\\n<span class=\\"token selector\\">.header span </span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">.header span:active </span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">.header span:hover </span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/* scss */</span>\\n<span class=\\"token selector\\">.header </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token selector\\">span </span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token selector\\"><span class=\\"token parent important\\">&amp;</span>:active </span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token selector\\"><span class=\\"token parent important\\">&amp;</span>:hover </span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/* sass */</span>\\n.header\\n  span\\n    &amp;<span class=\\"token punctuation\\">:</span>active\\n    &amp;<span class=\\"token punctuation\\">:</span>hover\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>变量 - 任何符合 CSS 取值都可以定义，甚至能参与表达式计算</p>\\n<div class=\\"language-scss line-numbers-mode\\" data-ext=\\"scss\\"><pre v-pre class=\\"language-scss\\"><code><span class=\\"token comment\\">/* css */</span>\\n<span class=\\"token selector\\">.title </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> #666<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">.subtitle </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> #666<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">.titletitle </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> #666<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/* scss */</span>\\n<span class=\\"token property\\"><span class=\\"token variable\\">$text-color</span></span><span class=\\"token punctuation\\">:</span> #666<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token selector\\">.title </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> <span class=\\"token variable\\">$text-color</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">.subtitle </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> <span class=\\"token variable\\">$text-color</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">.titletitle </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> <span class=\\"token variable\\">$text-color</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>当一个代码很大的时候，可以被拆分一个单独的 Sass 文件引入，文件最好以<code v-pre>_</code>开头，否则会单独编译出一个 CSS 文件，通过<code v-pre>@import</code>语法导入</p>\\n<div class=\\"language-scss line-numbers-mode\\" data-ext=\\"scss\\"><pre v-pre class=\\"language-scss\\"><code><span class=\\"token comment\\">/* foo.scss */</span>\\n<span class=\\"token selector\\">span </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> red<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>引入时不需要加<code v-pre>_</code></p>\\n<div class=\\"language-scss line-numbers-mode\\" data-ext=\\"scss\\"><pre v-pre class=\\"language-scss\\"><code><span class=\\"token keyword\\">@import</span> <span class=\\"token string\\">'foo'</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>混入 - 抽取公共的代码样式</p>\\n<div class=\\"language-scss line-numbers-mode\\" data-ext=\\"scss\\"><pre v-pre class=\\"language-scss\\"><code><span class=\\"token comment\\">/* scss */</span>\\n<span class=\\"token keyword\\">@mixin</span> <span class=\\"token selector\\">singleline-ellipsis </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">overflow</span><span class=\\"token punctuation\\">:</span> hidden<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">white-space</span><span class=\\"token punctuation\\">:</span> nowrap<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">text-overflow</span><span class=\\"token punctuation\\">:</span> ellipsis<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token selector\\">.text </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">width</span><span class=\\"token punctuation\\">:</span> 600px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">@include</span> singleline-ellipsis<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token selector\\">.content-text </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">width</span><span class=\\"token punctuation\\">:</span> 1000px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">@include</span> singleline-ellipsis<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/* css */</span>\\n<span class=\\"token selector\\">.text </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">width</span><span class=\\"token punctuation\\">:</span> 600px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">overflow</span><span class=\\"token punctuation\\">:</span> hidden<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">white-space</span><span class=\\"token punctuation\\">:</span> nowrap<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">text-overflow</span><span class=\\"token punctuation\\">:</span> ellipsis<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token selector\\">.content-text </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">width</span><span class=\\"token punctuation\\">:</span> 1000px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">overflow</span><span class=\\"token punctuation\\">:</span> hidden<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">white-space</span><span class=\\"token punctuation\\">:</span> nowrap<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">text-overflow</span><span class=\\"token punctuation\\">:</span> ellipsis<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>且支持传参，使用<code v-pre>$</code>定义</p>\\n<div class=\\"language-scss line-numbers-mode\\" data-ext=\\"scss\\"><pre v-pre class=\\"language-scss\\"><code><span class=\\"token comment\\">/* scss */</span>\\n<span class=\\"token keyword\\">@mixin</span> <span class=\\"token function\\">singleline-ellipsis</span><span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$width</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">width</span><span class=\\"token punctuation\\">:</span> <span class=\\"token variable\\">$width</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">overflow</span><span class=\\"token punctuation\\">:</span> hidden<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">white-space</span><span class=\\"token punctuation\\">:</span> nowrap<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">text-overflow</span><span class=\\"token punctuation\\">:</span> ellipsis<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token selector\\">.text </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">@include</span> <span class=\\"token function\\">singleline-ellipsis</span><span class=\\"token punctuation\\">(</span>600px<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token selector\\">.content-text </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">@include</span> <span class=\\"token function\\">singleline-ellipsis</span><span class=\\"token punctuation\\">(</span>1000px<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/* css */</span>\\n<span class=\\"token selector\\">.text </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">width</span><span class=\\"token punctuation\\">:</span> 600px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">overflow</span><span class=\\"token punctuation\\">:</span> hidden<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">white-space</span><span class=\\"token punctuation\\">:</span> nowrap<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">text-overflow</span><span class=\\"token punctuation\\">:</span> ellipsis<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token selector\\">.content-text </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">width</span><span class=\\"token punctuation\\">:</span> 1000px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">overflow</span><span class=\\"token punctuation\\">:</span> hidden<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">white-space</span><span class=\\"token punctuation\\">:</span> nowrap<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">text-overflow</span><span class=\\"token punctuation\\">:</span> ellipsis<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>还可以搭配<code v-pre>@content</code>语法，它在被导入的时候被内容所填充</p>\\n<div class=\\"language-scss line-numbers-mode\\" data-ext=\\"scss\\"><pre v-pre class=\\"language-scss\\"><code><span class=\\"token comment\\">/* scss */</span>\\n<span class=\\"token keyword\\">@mixin</span> <span class=\\"token selector\\">ipad </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token atrule\\"><span class=\\"token rule\\">@media</span> screen <span class=\\"token function\\">and</span><span class=\\"token punctuation\\">(</span><span class=\\"token property\\">min-width</span><span class=\\"token punctuation\\">:</span> 768px<span class=\\"token punctuation\\">)</span></span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">@content</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token selector\\">.text </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> red<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">@include</span> <span class=\\"token selector\\">ipad </span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> pink<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">/* css */</span>\\n<span class=\\"token selector\\">.text </span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> red<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token atrule\\"><span class=\\"token rule\\">@media</span> screen <span class=\\"token operator\\">and</span> <span class=\\"token punctuation\\">(</span><span class=\\"token property\\">min-width</span><span class=\\"token punctuation\\">:</span> 768px<span class=\\"token punctuation\\">)</span></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token selector\\">.text </span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> pink<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h2 id=\\"babel\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#babel\\" aria-hidden=\\"true\\">#</a> babel</h2>\\n<p>Babel 是一个 JavaScript 转义器，它将使用了最新的 ECMAScript 特性代码转换成了使用最广泛支持的 ES5 特性的等价代码，让开发人员享受新特性带来的爽点同时，避免了大部分兼容性问题</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre v-pre class=\\"language-bash\\"><code><span class=\\"token function\\">npm</span> <span class=\\"token function\\">install</span> --save-dev @babel/core @babel/cli @babel/preset-env\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p><code v-pre>babel.config.json</code>文件配置</p>\\n<div class=\\"language-json line-numbers-mode\\" data-ext=\\"json\\"><pre v-pre class=\\"language-json\\"><code><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">\\"presets\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"@babel/preset-env\\"</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>启动</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre v-pre class=\\"language-bash\\"><code>babel src --out-dir dist\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><h2 id=\\"webpack\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#webpack\\" aria-hidden=\\"true\\">#</a> webpack</h2>\\n<p>模块化虽然解决了代码了维护性和复用性，但是由于导入资源变多了，请求次数变多了，网页性能也就变差了，因此需要一个打包工具将所有的模块合并到一个文件中，再引入到网页中去，而 webpack 恰恰就是这样的工具</p>\\n<p>webpack 是一套基于 Node.js 的&quot;模块打包工具&quot;，在刚推出的时候就是一个单纯的 JS 模块打包工具，可以将多个模块的 JS 文件合并打包到一个文件中，但是随着时间的推移、众多开发者的追捧和众多开发者的贡献，现在 webpack 不仅仅能够打包 JS 模块, 还可以打包 CSS/LESS/SCSS/图片等其它文件</p>\\n<p>不推荐全局安装 webpack，在使用不同版本的 webpack 版本打包的项目中，这可能会导致构建失败</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre v-pre class=\\"language-bash\\"><code><span class=\\"token function\\">npm</span> i webpack webpack-cli --save-dev\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>webpack 4+ 版本后，需要额外的安装 CLI</p>\\n</div>\\n<p>webpack 处理模块时，它递归构建一个关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 bundle，但是仍需告诉 webpack 该从哪里开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点依赖的，每个依赖项随即被处理，最后输出到称之为 bundles 的文件中</p>\\n<p>这里需要理解四个核心概念：</p>\\n<ul>\\n<li>模式 - 模式会应用不同的打包优化</li>\\n<li>入口 - 入口指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始</li>\\n<li>loader - 通过 loader 也可以打包非 JavaScript 文件</li>\\n<li>插件 - 插件可以用于执行更为广泛的任务，比如打包优化和压缩，可以处理各种各样的任务</li>\\n<li>输出 - 出口告诉 webpack 应该在哪里输出它创建的 bundle，以及如何命名这些文件</li>\\n</ul>\\n<blockquote>\\n<p>假设已经初始化了一个项目，且安装好了 webpack</p>\\n</blockquote>\\n<p>在项目中创建一个<code v-pre>src/index.js</code>文件，随便写点代码，终端中直接执行<code v-pre>npx webpack</code>，不用理会终端中的信息，此时 webpack 会在根目录创建一个<code v-pre>dist</code>文件夹，里面是一个打包好的<code v-pre>main.js</code>文件，这个文件和<code v-pre>src/index.js</code>中的代码是一样的</p>\\n<p>然而还没完，webpack 可是一个模块打包器，才打包一个文件根本看不出来什么，继续在<code v-pre>src</code>中创建一个<code v-pre>foo.js</code>文件，随便写点代码，在<code v-pre>src/index.js</code>中使用模块语法引入，在进行一次打包，此时发现还是生成了一个<code v-pre>dist/main.js</code>文件，然后创建一个<code v-pre>src/index.html</code>，写好 HTML 基本结构，并引入<code v-pre>main.js</code>就可以看到代码效果了</p>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>Webpack 支持 ES module, CommonJS, AMD 等模块化规范，随便使用</p>\\n</div>\\n<p>上面是默认的配置，如果不按照默认的配置进行创建文件，就无法打包成功。而 webpack 提供了一个配置文件用来控制打包行为，执行<code v-pre>npx webpack</code>首先会看根目录是否有<code v-pre>webpack.config.js</code>文件，如果有就按照配置打包，没有就按照默认的方式进行打包</p>\\n<p><code v-pre>webpack.config.js</code>掌控着 webpack 的一切行为，这里可以配置入口，输出，loader，插件，模式：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> path <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'path'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nmodule<span class=\\"token punctuation\\">.</span>exports <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">mode</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'development'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">entry</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'./src/index.js'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">output</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'main.js'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">path</span><span class=\\"token operator\\">:</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>__dirname<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'dist'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">module</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">plugins</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>对于<code v-pre>mode</code>来说用来控制开发环境和生产环境的打包策略，具有两种取值<code v-pre>development/production</code></p>\\n<p><code v-pre>entry</code>则告知入口文件的位置，相对于配置文件。<code v-pre>output</code>控制输出目录以及打包后的文件，这里使用的 Node.js 的<code v-pre>path</code>模块来进行路径拼接</p>\\n<p>loader 让 webpack 处理非 JS 文件的模块，有各种各样的 loader，有官方开发的，社区开发的等等，所以每个 loader 都是一个独立的模块需要被安装，webpack 会根据<code v-pre>module</code>中的规则来匹配对应的 loader，并应用它。假如想要在 webpack 中使用 babel，则可以使用 babel-loader</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> path <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'path'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nmodule<span class=\\"token punctuation\\">.</span>exports <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">mode</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'development'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">entry</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'./src/main.js'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">output</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'main.js'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">path</span><span class=\\"token operator\\">:</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>__dirname<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'dist'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">module</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">rules</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n      <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token literal-property property\\">test</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">\\\\.js$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">exclude</span><span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">node_modules</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token literal-property property\\">loader</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'babel-loader'</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">plugins</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><code v-pre>rules</code>通过<code v-pre>test</code>来匹配对应文件，并应用对应的 loader 程序，<code v-pre>exclude</code>是排除 loader 对一些文件的操作</p>\\n<p>插件比 loader 的范围更加广泛，有官方插件和社区插件等，都是独立的模块，一般插件都是提供的构造函数，插件的用法要看具体的插件文档。比如打包完成后通常需要手动引入 js 文件到 HTML 中，而一些插件，比如<code v-pre>html-webpack-plugin</code>会自动完成这些工作</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> path <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'path'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> HtmlWebpackPlugin <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'html-webpack-plugin'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nmodule<span class=\\"token punctuation\\">.</span>exports <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">mode</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'development'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">entry</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'./src/main.js'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">output</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'main.js'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">path</span><span class=\\"token operator\\">:</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>__dirname<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'dist'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">module</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">plugins</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HtmlWebpackPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'./index.html'</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>webpack 允许多个入口，比如说有两个 HTML 文件，配合<code v-pre>html-webpack-plugin</code>应该这么用</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> path <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'path'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> HtmlWebpackPlugin <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'html-webpack-plugin'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nmodule<span class=\\"token punctuation\\">.</span>exports <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">mode</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'development'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token comment\\">// 配置多个入口</span>\\n  <span class=\\"token literal-property property\\">entry</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">index</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'./src/index.js'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">page</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'./src/page.js'</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">output</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'[name].js'</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token comment\\">// 自动生成对应的文件名</span>\\n    <span class=\\"token literal-property property\\">path</span><span class=\\"token operator\\">:</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resolve</span><span class=\\"token punctuation\\">(</span>__dirname<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'dist'</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">plugins</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>\\n    <span class=\\"token comment\\">// 第一个 HTML 文件所需要的选项</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HtmlWebpackPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'index.html'</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'index.html'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 输出的文件名</span>\\n      <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'index'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token comment\\">// 指定某个入口合并在 HTML 中</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 第二个 HTML 文件所需要的选项</span>\\n    <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HtmlWebpackPlugin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">template</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'page.html'</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">filename</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'page.html'</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">chunks</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'index'</span><span class=\\"token punctuation\\">]</span> \\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>每次手动输入<code v-pre>webpack</code>打包太繁琐，虽然可以直接配置<code v-pre>script</code>用来简化操作，但这仍然解决不了需要手动进行打包的过程。webpack 提供了一个<code v-pre>--watch</code>的额外参数用来监听文件的改变，一旦发生改变就会自动打包，这很是方便，已经实现打包自动化。但这仍然需要手动刷新网页查看效果，此时就需要用到<code v-pre>webpack-dev-server</code>，不仅具备自动打包功能，还能自动打开生成的<code v-pre>index.html</code>，同时能够实时重新加载，而不必按下 f5 刷新网页，需要进行额外的安装</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>npm install <span class=\\"token operator\\">--</span>save<span class=\\"token operator\\">-</span>dev webpack<span class=\\"token operator\\">-</span>dev<span class=\\"token operator\\">-</span>server\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>执行<code v-pre>npx webpack-dev-server --open</code>即可，为了避免手动输入，在 package.json 的<code v-pre>script</code>项配置<code v-pre>&quot;serve&quot;: &quot;webpack-dev-server --open&quot;</code>即可</p>\\n<h3 id=\\"很棒的-plugins\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#很棒的-plugins\\" aria-hidden=\\"true\\">#</a> 很棒的 plugins</h3>\\n","headers":[{"level":2,"title":"Lint","slug":"lint","link":"#lint","children":[{"level":3,"title":"JavaScriptLint","slug":"javascriptlint","link":"#javascriptlint","children":[]},{"level":3,"title":"CSSLint","slug":"csslint","link":"#csslint","children":[]}]},{"level":2,"title":"prettier","slug":"prettier","link":"#prettier","children":[]},{"level":2,"title":"CSS 预处理器","slug":"css-预处理器","link":"#css-预处理器","children":[]},{"level":2,"title":"babel","slug":"babel","link":"#babel","children":[]},{"level":2,"title":"webpack","slug":"webpack","link":"#webpack","children":[{"level":3,"title":"很棒的 plugins","slug":"很棒的-plugins","link":"#很棒的-plugins","children":[]}]},{"level":2,"title":"swc","slug":"swc","link":"#swc","children":[]},{"level":2,"title":"esbuild","slug":"esbuild","link":"#esbuild","children":[]},{"level":2,"title":"mock","slug":"mock","link":"#mock","children":[{"level":3,"title":"生成数据","slug":"生成数据","link":"#生成数据","children":[]},{"level":3,"title":"占位符","slug":"占位符","link":"#占位符","children":[]},{"level":3,"title":"扩展","slug":"扩展","link":"#扩展","children":[]},{"level":3,"title":"拦截","slug":"拦截","link":"#拦截","children":[]}]},{"level":2,"title":"Multirepo 和 Monorepo","slug":"multirepo-和-monorepo","link":"#multirepo-和-monorepo","children":[]}],"git":{"createdTime":1664587209000,"updatedTime":1670565945000,"contributors":[{"name":"JQiue","email":"861947542@qq.com","commits":5}]},"readingTime":{"minutes":13.65,"words":4096},"autoDesc":true,"localizedDate":"2022年10月1日","filePathRelative":"sundry/frontend.md"}`);export{n as data};
