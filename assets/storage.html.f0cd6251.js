import{ac as n,A as s,B as a,ae as t}from"./framework.a879f165.js";const p={},e=t(`<table><thead><tr><th>存储方式</th><th>存储类型</th><th>访问限制</th><th>存储时长</th><th>适用场景</th></tr></thead><tbody><tr><td>Cookie</td><td>格式化字符串</td><td>同源，可自定义访问域</td><td>自定义时长</td><td>用户认证</td></tr><tr><td>sessionStorage</td><td>k-v，仅字符串</td><td>同标签下的同域名</td><td>当前会话</td><td>当前页音视频的播放进度</td></tr><tr><td>localStorage</td><td>k-v，仅字符串</td><td>同域名，可不同的标签</td><td>永久存储</td><td>本地缓存</td></tr><tr><td>WebSQL</td><td>关系型数据库</td><td>同域名</td><td>永久存储</td><td>大量的本地缓存</td></tr><tr><td>IndexedDB</td><td>文档型数据库</td><td>同域名</td><td>永久存储</td><td>大量的本地缓存</td></tr></tbody></table><p>客户端存储提供了网页能够将数据存储在浏览器上的技术，这有益于在弱网环境下的浏览体验，浏览器提供了一些 API 来实现了这种技术，当网络正常时就请求服务器获得数据，否则就访问本地存储中的数据</p><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h2><p>Cookie 是服务器发送到用户浏览器并保存在本地的一种数据，它会在浏览器下次向同一服务器发送请求时被携带，这种操作使得无状态的 HTTP 拥有了一种记录稳定状态的可能</p><p><code>document.cookie</code>用于获取可从该位置访问的 Cookie，每条 Cookie 都以分号和空格分隔，都是<code>key=value</code>这种格式，当需要添加一条 cookie 时，就直接赋值即可，它是不会被替换的，只会追加，每次只能添加一条</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;name=foo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">警告</p><p>如果包含非英文字母，写入时最好编码</p></div><div class="custom-container tip"><p class="custom-container-title">为什么代码会失效</p><p>通过本地资源路径打开的 HTML 文件，设置 cookie 的代码是失效的，应该通过一个 Web 服务来启动它</p></div><p>当没有该条 Cookie 时，会添加到所有的 Cookie 中，这种方法一次只能对一个 Cookie 进行设置或更新</p><p><code>document.cookie</code>返回所有 cookie，得到指定 cookie 的值是非常麻烦的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> cookieValue <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:(?:^|.*;\\s*)keyName\\s*\\=\\s*([^;]*).*$)|^.*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是可以借助一些专门处理 cookie 的库来简化处理</p><details class="custom-container details"><summary>cookies.js</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*\\
|*|
|*|  :: cookies.js ::
|*|
|*|  A complete cookies reader/writer framework with full unicode support.
|*|
|*|  https://developer.mozilla.org/en-US/docs/DOM/document.cookie
|*|
|*|  This framework is released under the GNU Public License, version 3 or later.
|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html
|*|
|*|  Syntaxes:
|*|
|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])
|*|  * docCookies.getItem(name)
|*|  * docCookies.removeItem(name[, path], domain)
|*|  * docCookies.hasItem(name)
|*|  * docCookies.keys()
|*|
\\*/</span>

<span class="token keyword">var</span> docCookies <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">getItem</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;(?:(?:^|.*;)\\\\s*&quot;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>sKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-.+*]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;\\\\$&amp;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">setItem</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sKey<span class="token punctuation">,</span> sValue<span class="token punctuation">,</span> vEnd<span class="token punctuation">,</span> sPath<span class="token punctuation">,</span> sDomain<span class="token punctuation">,</span> bSecure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sKey <span class="token operator">||</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?:expires|max\\-age|path|domain|secure)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>sKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">var</span> sExpires <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>vEnd<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token literal-property property">Number</span><span class="token operator">:</span>
          sExpires <span class="token operator">=</span> vEnd <span class="token operator">===</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token string">&quot;; expires=Fri, 31 Dec 9999 23:59:59 GMT&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;; max-age=&quot;</span> <span class="token operator">+</span> vEnd<span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token literal-property property">String</span><span class="token operator">:</span>
          sExpires <span class="token operator">=</span> <span class="token string">&quot;; expires=&quot;</span> <span class="token operator">+</span> vEnd<span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token literal-property property">Date</span><span class="token operator">:</span>
          sExpires <span class="token operator">=</span> <span class="token string">&quot;; expires=&quot;</span> <span class="token operator">+</span> vEnd<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>sKey<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>sValue<span class="token punctuation">)</span> <span class="token operator">+</span> sExpires <span class="token operator">+</span> <span class="token punctuation">(</span>sDomain <span class="token operator">?</span> <span class="token string">&quot;; domain=&quot;</span> <span class="token operator">+</span> sDomain <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sPath <span class="token operator">?</span> <span class="token string">&quot;; path=&quot;</span> <span class="token operator">+</span> sPath <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>bSecure <span class="token operator">?</span> <span class="token string">&quot;; secure&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">removeItem</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sKey<span class="token punctuation">,</span> sPath<span class="token punctuation">,</span> sDomain</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sKey <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasItem</span><span class="token punctuation">(</span>sKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>sKey<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span> sDomain <span class="token operator">?</span> <span class="token string">&quot;; domain=&quot;</span> <span class="token operator">+</span> sDomain <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> sPath <span class="token operator">?</span> <span class="token string">&quot;; path=&quot;</span> <span class="token operator">+</span> sPath <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">hasItem</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;(?:^|;\\\\s*)&quot;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>sKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-.+*]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;\\\\$&amp;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\\\s*\\\\=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">keys</span><span class="token operator">:</span> <span class="token comment">/* optional method: you can safely remove it! */</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> aKeys <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*(?:\\=[^;]*)?;\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> nIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> nIdx <span class="token operator">&lt;</span> aKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> nIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> aKeys<span class="token punctuation">[</span>nIdx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>aKeys<span class="token punctuation">[</span>nIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">return</span> aKeys<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>cookie 不仅有必须写入的 name 和 value 还有一些其他的可选参数，比如：</p><ul><li>expires：规定 cookie 有效期（GMT），没有则为会话 Cookie</li><li>path：规定 cookie 的路径</li><li>domain：规定 cookie 的域名</li><li>secure：规定 cookie 是否通过 https 所访问（boolean/null）</li></ul><p>这是一个限制有效期 cookie 的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&quot;test=time; expires=&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>浏览器自动删除过期的 cookie 是对比服务器时间的，而不是浏览器本地时间，可以看响应头的 Date 得到服务器的时间</p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>时间戳应该是一个 GMT 格式</p></div><p>通常情况下 cookie 是不允许客户端修改的，只允许服务端进行设置，如果服务端设置了<code>HttpOnly</code>，则在客户端是无法通过<code>document.cookie</code>访问 cookie 的</p><h2 id="本地存储和会话存储" tabindex="-1"><a class="header-anchor" href="#本地存储和会话存储" aria-hidden="true">#</a> 本地存储和会话存储</h2><p>本地存储是一种将数据永久的存储在本地的技术，被浏览器当作 API 的方式提供，它是<code>window.localStorage</code>，只要为这个对象绑定一些自定义的属性就可以实现数据的存储，因为它是公共的，能被所有的网页程序进行读写，且关闭网页时数据也不会丢失</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span>testData <span class="token operator">=</span> <span class="token string">&#39;测试数据&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>testData<span class="token punctuation">)</span> <span class="token comment">// &#39;测试数据&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对话存储针对一个会话进行数据存储（浏览器处于打开，包括页面重新刷新和恢复），不应该用于长期存储的应用，同时只会对当前页面公开，通过<code>window.sessionStorage</code>进行数据操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>sessionStorage<span class="token punctuation">.</span>testData <span class="token operator">=</span> <span class="token string">&#39;测试数据&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span>testData<span class="token punctuation">)</span> <span class="token comment">// &#39;测试数据&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>本地存储和会话存储的接口都会返回<code>Storage</code>类型，<code>Storage</code>的机制是通过键值对形式来存储的，它还有一些其他属性和方法来实现更强大的功能</p><ul><li><code>Storage.length</code>：返回键值对的数量</li><li><code>Storage.key(index)</code>：根据索引返回 key</li><li><code>Storage.getItem(key)</code>：根据 key 返回 value</li><li><code>Storage.clear()</code>：删除所有的键值对</li><li><code>Storage.removeItem(key)</code>：根据 key 删除指定的键值对</li><li><code>Storage.setItem(key, value)</code>：添加新的键值对</li></ul><div class="custom-container tip"><p class="custom-container-title">存储类型</p><p>无论如何，被存储的类型都会被转换为字符串，如果要存储对象类型，则应该将对象转换为字符串类型，在取出时进行解析</p></div><h2 id="web-sql" tabindex="-1"><a class="header-anchor" href="#web-sql" aria-hidden="true">#</a> Web SQL</h2><p>本地存储和会话存储虽然可以实现简单的对象存储，但是对于复杂的关系数据处理时，就力不从心了，在 HTML5 中新增了 Web SQL Database 关系型数据库，它是遵循 SQL 标准的，每一个遵循 Web SQL 的浏览器都会内嵌一个本地的 SQL 数据库</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * openDatabase(databaseName, version, desc, estimatedSize)
 * databaseName: 访问的数据库名称，如果没有就会创建
 * version: 版本信息
 * desc: 描述数据库的信息
 * estimatedSize: 数据的大小
 */</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">&#39;mydb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;测试的数据库&#39;</span><span class="token punctuation">,</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本的增删改查：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// CREATE</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;CREATE TABLE test_table(id, name, age)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// INSERT</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO test_table VALUES (&quot;10001&quot;, &quot;JQiue&quot;, 18)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// UPDATE</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;UPDATE test_table SET name=&quot;wjq&quot;,age=22 WHERE id = 10001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT</span>
db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;select * from test_table&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回结果集对象</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的操作都在<code>transaction(callback(tx))</code>事务方法中进行，<code>executeSql(SQL, [], callback(tx, result))</code>用来执行具体的 SQL 语句，<code>executeSql</code>也支持 SQL 的预处理，用<code>?</code>在语句中占位，并在第二个参数中传入一个预处理参数的数组：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO test_table VALUES (?, ?, ?)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10002</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;23&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="indexeddb" tabindex="-1"><a class="header-anchor" href="#indexeddb" aria-hidden="true">#</a> IndexedDB</h2><p>IndexedDB 是浏览器中提供的另一种本地数据库，它和 WebSQL 不同，更接近于 NoSQL，内部采用对象存储存放数据，所有的类型数据都可以存入，在对象中，所有的数据都是以键值对的形式保存，每个数据记录都有一个唯一主键，且 IndexedDB 是异步的，不会产生浏览器阻塞的情况，用户可以进行其他操作，防止拖慢网页，同时使用了同源策略机制保证安全，存储空间非常大，且支持二进制存储</p><p>对于 IndexedDB 来说，数据库是对象存储的容器，每一个数据库都有若干个对象存储，类似于关系型数据库的表格，对象存储中保存的是每一条数据记录，类似于关系型数据库的行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;mydb&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> db<span class="token punctuation">;</span>

<span class="token comment">// 每一次打开数据库失败时触发</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;打开失败&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 每一次打开数据库成功时触发</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;打开成功&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 只有第一次打开数据库时触发</span>
request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器提供了<code>indexedDB</code>来打开一个数据库，同时会返回一个请求对象，这个对象监听三种事件用于处理数据库打开时的回调函数，其中，<code>onupgradeneeded</code>事件特别重要，数据存储对象只能在这里定义</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&quot;persons&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createObjectStore</code>用于定义存储对象，以及主键相关的约束，<code>autoIncrement: true</code>可以设置字段为默认整数自增</p><div class="custom-container danger"><p class="custom-container-title">警告</p><p>最好在第一次创建数据库时就定义好对象存储，否则之后将无法定义了</p></div><p>一旦创建了对象存储，就可以对数据进行增删改查了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>request<span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  <span class="token keyword">const</span> tx <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;persons&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;readwrite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> persons <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">&#39;persons&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 添加一条数据</span>
  persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 修改一条数据</span>
  persons<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 删除一条数据</span>
  persons<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入 key</span>
  <span class="token comment">// 获取一条数据</span>
  persons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作数据的一切都在事务中进行，<code>transaction([], &#39;mode&#39;)</code>用于决定操作哪些对象存储，第一个参数传入对象存储的名字，可以传入多个，第二个参数决定事务的模式，至此就会返回一个包含对象存储的事务对象，通过事务对象的<code>objectStore(&#39;objectStorename&#39;)</code>方法取出对应的存储对象进行数据操作，由此可见 IndexedDB 的 api 特别复杂</p><p>IndexedDB 也支持建立索引，默认情况下只能搜索主键，一旦对字段建立索引就可以搜索被索引字段了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> request <span class="token operator">=</span> indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;mydb&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> db<span class="token punctuation">;</span>

request<span class="token punctuation">.</span><span class="token function-variable function">onupgradeneeded</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">&quot;persons&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">keyPath</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 对 name 字段建立索引</span>
  db<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">unique</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

request<span class="token punctuation">.</span><span class="token function-variable function">onsucess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>
  <span class="token keyword">const</span> tx <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;persons&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;readwrite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> persons <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">&#39;persons&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 通过索引字段搜索</span>
  persons<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onsucess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token comment">// {id: 1, name: &#39;foo&#39;, age: 23}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="缓存存储" tabindex="-1"><a class="header-anchor" href="#缓存存储" aria-hidden="true">#</a> 缓存存储</h2><p>它最初是为 service workers 建立的，可以缓存任何 HTTP 网络请求</p>`,50),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","storage.html.vue"]]);export{r as default};
