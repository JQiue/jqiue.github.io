import{ac as n,A as s,B as a,ae as t}from"./framework.a879f165.js";const e={},c=t(`<p>这里是 C 中提供的一些标准功能</p><h2 id="输入和输出" tabindex="-1"><a class="header-anchor" href="#输入和输出" aria-hidden="true">#</a> 输入和输出</h2><p>必须引入<code>stdio.h</code>头文件</p><h3 id="printf" tabindex="-1"><a class="header-anchor" href="#printf" aria-hidden="true">#</a> printf</h3><p><code>printf</code>常用于打印一些信息到屏幕上，是使用的最频繁的函数，也叫做<strong>格式化输出函数</strong>，它的函数原型是<code>int printf(Control-string, item1, item2, ...)</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它通常和格式化占位符搭配使用来实现对字符串的输出控制</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;今年我才%d岁单身噢&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 今年的我才18岁单身噢</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会发现<code>18</code>将<code>%d</code>给替换了，这个<code>%d</code>就是格式化占位符中的一种，这说明<code>printf</code>第一个参数之外的参数都可以通过占位符来替换第一个参数中指定的部分，都是按顺序的</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;余额宝今日又增加了%d的收益&quot;</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 余额宝今日又增加了1202590843的收益</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;余额宝今日又增加了%f的收益&quot;</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 余额宝今日又增加了0.010000的收益</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这个例子中，很显然<code>%d</code>不能够帮浮点数正确的显示，而<code>%f</code>可以，这说明不同的数据类型应使用不同的格式化占位符，下面是一些常用的格式化占位符：</p><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>d</td><td>整数</td></tr><tr><td>f</td><td>单，双精度浮点(带有 6 位小数)</td></tr><tr><td>o</td><td>无符号八进制</td></tr><tr><td>x</td><td>无符号十六进制</td></tr><tr><td>c</td><td>字符</td></tr><tr><td>s</td><td>字符串</td></tr><tr><td>p</td><td>地址</td></tr></tbody></table><p>然而这只是占位符中的一种用法，占位符还可以决定数据如何显示，比如控制小数点位数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;余额宝今日又增加了%.2f的收益&quot;</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 余额宝今日又增加了0.01的收益</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制字符输出宽度：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;今年我%5d岁还单身&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 今年我   18岁还单身</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;今年我%-5d岁还单身&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 今年我18   岁还单身</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;今年我%05d岁还单身&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 今年我00018岁还单身</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;余额宝今日又增加了%4.2f的收益&quot;</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 余额宝今日又增加了0.01的收益</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;余额宝今日又增加了%5.2f的收益&quot;</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 余额宝今日又增加了 0.01的收益</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;余额宝今日又增加了%-5.2f的收益&quot;</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 余额宝今日又增加了0.01 的收益</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;余额宝今日又增加了%05.2f的收益&quot;</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 余额宝今日又增加了000.01的收益</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>%</code>后面不仅可以指定类型，精度，也可以指定宽度，当输出的位数小于指定宽度时会在左边使用空格补齐，输出的位数大于指定宽度会按原样输出，如果给宽度指定<code>-</code>，则会从右边补齐空格。也可以指定<code>0</code>来补齐，只适用不加<code>-</code>的情况下</p><p>另外，<code>printf</code>是有返回值的，它会返回打印的字符数，包括看不见的空格或新字符</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 13</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果字符串过长，打印时需要拆分怎么办呢，有三种办法：</p><ul><li>使用多个<code>printf()</code></li><li>使用<code>\\</code>结束第一行的末尾，会自动连接下一行</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,\\
world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用字符串衔接的方式</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,&quot;</span>
<span class="token string">&quot;world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scanf" tabindex="-1"><a class="header-anchor" href="#scanf" aria-hidden="true">#</a> scanf</h3><p><code>scanf()</code>函数用于接受来自键盘输入的字符，当运行到该函数时会等待用户输入字符，然后将字符赋值给除第一个参数以外的参数，函数原型是这样的<code>scanf(control-string, item1, item2, ...)</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>foo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>占位符之间最好以空格分隔，以便于输入多次字符</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>scanf()</code>会忽略空格、制表符、换行符</p></div><div class="custom-container danger"><p class="custom-container-title">scanf 和 getchar 混合使用的问题</p><p>如果在<code>getchar()</code>前使用了<code>scanf()</code>，会留下一个换行符，要谨慎处理</p></div><h3 id="getchar" tabindex="-1"><a class="header-anchor" href="#getchar" aria-hidden="true">#</a> getchar</h3><p><code>getchar()</code>用于读取任何字符，包括空格、制表符、换行符，然后返回该字符的编码</p><h3 id="putchar" tabindex="-1"><a class="header-anchor" href="#putchar" aria-hidden="true">#</a> putchar</h3><p><code>putchar()</code>接受一个字符编码，并输出它</p>`,34),p=[c];function o(i,u){return s(),a("div",null,p)}const d=n(e,[["render",o],["__file","standard.html.vue"]]);export{d as default};
