import{ac as a,A as n,B as s,ae as e}from"./framework.a879f165.js";const t={},p=e(`<p>抓包其中涉及三个角色：客户端，代理，目标服务器</p><p>原本正常访问网页或 App 路径是： 客户端-&gt;目标服务器。抓包，其实就加入了一个代理，客户端-&gt;代理-&gt;目标服务器，只有这三者产生一定的联系，才能进行拦截/抓取一些东西，客户端先访问代理，代理把客户端的信息记录下来，代理再去联系目标服务器，进而返回给客户端</p><p>Fiddler 是一个通过代理的方式来进行抓包工具，运行时会在本地建立一个代理服务，默认地址：127.0.0.1:8888，在使用 Fiddler 之前要先安装证书，如果允许远程计算机设备连接，则要去勾选相关配置</p><h2 id="过滤" tabindex="-1"><a class="header-anchor" href="#过滤" aria-hidden="true">#</a> 过滤</h2><p>抓包的时候，会抓到其它网站的包，如果想要抓指定网站的包，可以设置过滤器，其他网站就会被屏蔽掉</p><p>在 Filters 中勾选 Use Filters，有两种过滤方式，根据 Hosts 过滤和进程过滤</p><p>选择 Show only following Hosts，并在下面写是要过滤的域名或 ip + 端口号，多个 HOST 之间用<code>;</code>号隔开</p><p>如果要根据进程过滤，则勾选 Show only traffic from，并选择一个应用进程，或者直接在工具栏中拖动进程过滤按钮到需要过滤的窗口程序上</p><p>最后点击 Actions 开始过滤</p><h2 id="断点" tabindex="-1"><a class="header-anchor" href="#断点" aria-hidden="true">#</a> 断点</h2><p>在 Rules 中设置断点，断点可以拦截请求和响应：</p><ul><li>前置断点：拦截请求</li><li>后置断点：拦截响应</li></ul><p>添加前置断点之后，所有的请求前面都是红色的，表示被断点，请求有数据，响应没数据，因为还没有发送数据，所有的请求都被拦截中</p><p>后置断点会拦截服务器发送给客户端的数据，可以对数据进行任意的修改,然后再发送给客户端</p><h2 id="mock" tabindex="-1"><a class="header-anchor" href="#mock" aria-hidden="true">#</a> mock</h2><p>可以在 AutoResponder 中设置规则，用来定义响应数据，它不同于修改，是完完全全的重写响应</p><h2 id="弱网" tabindex="-1"><a class="header-anchor" href="#弱网" aria-hidden="true">#</a> 弱网</h2><p>甚至可以模拟网络不好的情况，在 FiddlerScript 中找到以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>m_SimulateModem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Delay sends by 300ms per KB uploaded.</span>
  oSession<span class="token punctuation">[</span><span class="token string">&quot;request-trickle-delay&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;300&quot;</span><span class="token punctuation">;</span> 
  <span class="token comment">// Delay receives by 150ms per KB downloaded.</span>
  oSession<span class="token punctuation">[</span><span class="token string">&quot;response-trickle-delay&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;150&quot;</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改数字即可调整发送或者响应的速度了，最后在 Rulur&gt;Performance 中开启</p>`,20),o=[p];function i(c,l){return n(),s("div",null,o)}const d=a(t,[["render",i],["__file","packet-capture.html.vue"]]);export{d as default};
