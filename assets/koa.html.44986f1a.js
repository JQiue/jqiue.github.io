import{ac as n,A as s,B as a,ae as e}from"./framework.a879f165.js";const p={},t=e(`<p>koa 是由 Express 人员打造的另一款框架，基于 ES6，解决了回调地狱和麻烦的错误处理问题。和 express 一样都是对 http 进行了封装，大致 api 都差不多</p><p>但是 express 内置了很多中间件，而 koa 没有，express 包含路由，视图渲染等特性，koa 只有 http 模块。express 通过回调实现异步，而 koa 使用 generator 和 async/await 使用同步的写法来处理异步，明显好于回调和 Promise</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i koa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个跑起来的程序</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;Hello, World&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:1024&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h2><p><code>app.use(callback)</code>会应用对应的中间件方法，并且它返回<code>this</code>，所以可以链式表达</p><p><code>app.use</code>会传给回调一个 Context，这个对象包含<code>response</code>和<code>request</code></p><p>由于 koa 没有内置中间件，需要安装引进其他的中间件：</p><ul><li>koa-router - 处理路由</li><li>koa-bodyparser - 处理 PostData</li></ul>`,10),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","koa.html.vue"]]);export{r as default};
