import{ac as o,A as t,B as i,z as s,M as e,H as d,ae as a,O as c}from"./framework.a879f165.js";const l={},r=a(`<p>巴拉巴拉，阿巴阿巴，省略一大堆</p><h2 id="目录和文件" tabindex="-1"><a class="header-anchor" href="#目录和文件" aria-hidden="true">#</a> 目录和文件</h2><p>Windows 存在盘符的概念，而 Linux 则不存在，只有一个根目录，所有的文件都在<code>/</code>下面，每个用户都在<code>/home</code>建立自己的文件夹</p><ul><li>蓝色表示目录</li><li>黑色表示文件</li><li>白色表示一般文件</li><li>青色表示链接</li><li>红色压缩文件或者包文件</li><li>绿色文件表示可执行文件</li></ul><p>根目录解释：</p><ul><li>etc - 存放几乎所有的系统配置文件</li><li>home - 这是预设的用户主目录</li><li>root - 超级用户的主目录</li><li>bin - 命令程序</li><li>opt - 第三方软件</li><li>usr - 应用程序和文件存放的目录</li><li>var - 存放经常被修改的文件</li><li>lib - 基本的运行库</li><li>boot - 启动系统的核心文件</li><li>dev - 存放着外部设备</li><li>media - 媒介都挂载在这里</li><li>mnt - 暂时挂载某些东西</li><li>tmp - 临时文件</li></ul><p><code>.</code>和<code>..</code>是特殊的目录，表示当前目录和父目录</p><p>当然，在 Linux 中一切皆文件，自然产生了对文件的各种操作</p><ul><li><code>pwd</code>：获取当前路径，<code>~</code>表示在自己的<code>home</code>中，它是主目录的缩写</li><li><code>ls</code>：显示所有当前目录的东西，除了隐藏文件，以<code>.</code>开头的都是隐藏文件</li><li><code>ls -a</code>：显示所有文件，包括隐藏文件</li><li><code>ls .*</code>：以短格式打印目录中的文件</li><li><code>cp -v .bash_history{,1}</code>：将<code>.bash_history</code>复制到<code>.bash_history1</code>文件，这很简单，因为前面说过 Bash 有扩展功能，有一组规则定义如何处理<code>{1,2,3}</code>这样的结构。Bash 只会接收花括号前的参数，并向参数添加花括号中的所有东西，在本例中，第一个参数是空的，只是变成了<code>.bash_history</code>，然后 Bash 添加了<code>1</code>，扩展后就变成了<code>.bash_history1</code>，因此<code>cp</code>接受的参数实际上为<code>cp -v .bash_history .bash_history1</code></li><li><code>mv &lt;file1&gt; &lt;file2&gt;</code>：移动<code>file1</code>到<code>file2</code>，会将<code>file2</code>覆盖掉，因此不再有<code>file2</code></li><li><code>rm &lt;file&gt;</code>：删除文件，没有任何提示，最好添加<code>-v</code>参数获得提示</li><li><code>rm &lt;folder&gt;</code>：删除空目录，没有任何提示，最好添加<code>-v</code>获得提示，不能删除非空目录</li><li><code>rm -rf &lt;folder&gt;</code>：删除目录，最好添加<code>-v</code>获得提示</li><li><code>touch &lt;file&gt;</code>：创建空白文件</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>对应<code>rm</code>来说，一定要加上<code>verbose</code>选项，通常是<code>-v</code>，不要让自己陷入危险的命令当中</p></div><h2 id="shell" tabindex="-1"><a class="header-anchor" href="#shell" aria-hidden="true">#</a> shell</h2><p>shell 是运行在终端上的文本互动程序，bash 是最常用的一种 shell，是大多数 Linux 发行版的默认 shell。所有的输入都交给 shell，它会解释其中的内容，并执行对应的操作</p><ul><li><code>ls -al</code>：打印当前目录中的所有文件，包括隐藏的文件</li><li><code>ls -altr</code>：打印当前目录中所有的文件，但是打印的顺序是最后修改的文件在最后面</li><li><code>lsof</code>：列出所有已打开的文件</li><li><code>cat &lt;file&gt;</code>：打印出文件信息</li><li><code>echo Hello, $LOGNAME!</code>：输出一个字符串，并用环境变量<code>$LOGNAME</code>替换<code>Hello, $LOGNAME</code>中的对应文本</li><li><code>echo &#39;echo Hello, $LOGNAME!&#39; &gt;&gt; &lt;file&gt;</code>：将<code>echo Hello, $LOGNAME!</code>添加到文件</li><li><code>cp -v &lt;file&gt; &lt;new_file&gt;</code>：复制一个文件到另一个文件，<code>-v</code>参数会给这个命令显示更详细的输入</li><li><code>tail -n 5 &lt;file&gt;</code>：从文件中精确打印最后 5 行</li><li><code>history -w</code>：将所有输入过的命令历史写入到<code>.bash_history</code>文件</li><li><code>shutdown -r now</code>：立即重启，<code>now</code>表示时间</li><li><code>shutdown -h now</code>：立即关机，<code>now</code>表示时间</li><li><code>shutdown -c</code>：取消已经执行的<code>shutdonw</code>命令</li><li><code>reboot</code>：立即重启，不需要额外的选项</li><li><code>exit</code>：关闭对话终端</li></ul><p>所有的任何命令都不会被直接执行，会先扩展，然后执行。shell 会对当前输入的命令字符串进行处理后才会执行，它会发生在命令执行前，和键入的命令无关。shell 会将命令分割成多个独立的单元，也叫 token，每个 token 都会作为一个独立的单元看待</p><p>比如<code>echo hello</code>，shell 首先会对该命令进行扩展处理，然后才具体的去执行。shell 提供了一些扩展规则，用于匹配命令字符串并快速的生成，用于提升效率</p><ul><li><code>{}</code> - 花括号扩展</li></ul><p>花括号是首先被执行的扩展，有两种用法：字符串输出、序列输出</p><p>比如<code>echo {a, b}1</code>会被扩展成<code>echo a1 b1</code>，会将命令中的 token 进行扩展填充，这是字符串输出</p><p>而序列输出则是按照规则来生成一定范围内的值，比如<code>echo {1..3}</code>被扩展成<code>echo 1 2 3</code>。还可以按照英文字母顺序，<code>echo {a..b}</code>被扩展成<code>echo a b c</code></p><p>花括号的扩展很简单，格式是固定的，但是有一些要注意的地方，比如不能够使用<code>\${</code>，这和其他扩展方式产生了冲突，应该使用<code>\\$</code>进行转义</p><h2 id="vim" tabindex="-1"><a class="header-anchor" href="#vim" aria-hidden="true">#</a> vim</h2><p>在 Linux 中，一切数据皆文件，而文件必须是人类可读可编辑的，因此有必要学会如何编辑文件。vim 是 Linux 自带的一款处理文本的工具，输入<code>vim</code>命令，会进入这样的界面</p><p><img src="https://jinqiu.wang/" alt="还没有图片"></p><p>vim 总是令新手头疼，它不像 Windows 记事本那样是可视化的，vim 是一种模态的编辑器，具有两种模式：</p><ul><li>普通模式 - 移动光标执行复制、粘贴和删除等操作</li><li>插入模式 - 输入文本</li></ul><p>只要记住在大部分时候呆在普通模式即可，只允许短时间进入插入模式，然后立即退出。当使用 vim 打开一个文件后即为普通模式，只需要按下<code>i</code>键进入插入模式，以及按下<code>ESC</code>回到普通模式</p><p>这是普通模式下的按键命令：</p><ul><li><code>h</code>：光标向左</li><li><code>l</code>：光标向右</li><li><code>j</code>：光标向下</li><li><code>k</code>：光标向上</li><li><code>i</code>：进入插入模式</li><li><code>o</code>：在光标下插入一行并进入插入模式</li><li><code>x</code>：删除光标后面的字符</li><li><code>dd</code>：删除光标一行</li><li><code>w</code>：保存文件</li><li><code>:wq</code>：保存并退出</li><li><code>:q!</code>：不对文件进行修改并退出</li></ul><p>如果想要查看某个文件而不是想修改它，使用 vim 是有点过度的，这时候就使用另一个文本浏览器 less，输入<code>less &lt;file&gt;</code>即可查看，使用熟悉的<code>j</code>、<code>k</code>命令来浏览文件，退出浏览使用<code>q</code>，使用<code>--ch&lt;enter&gt;&lt;enter&gt;</code>水平滚动（对于放不下的行来说）</p><h2 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h2><p>一般终端都会提供<code>scp</code>命令用于机器之间的复制，但这个工具是基于 ssh 的，所以较为安全</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">scp</span> 本地文件路径 目标机器:目标机器的文件路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><p>环境变量是操作系统提供给程序的一些参数，这意味着 shell 中有很多变量设置，有些变量只为当前 shell 设置，这些被称为本地 shell 变量。有一些变量被传递到从当前 shell 启动的每个程序，它们被称为环境变量，可以使用<code>env</code>列出</p><ul><li><code>foo=&quot;I&#39;m foo&quot;</code>：创建一个变量<code>foo</code>，赋值为<code>I&#39;m foo</code></li><li><code>echo $foo</code>：打印出变量<code>foo</code>，使用<code>$</code>来引用变量</li><li><code>set | grep foo</code>：列出所有环境变量，传递给<code>grep</code>，打印出只包含<code>foo</code>的行</li><li><code>env | grep foo</code>：列出所有环境变量，传递给<code>grep</code>，打印出只包含<code>foo</code>的行</li><li><code>export foo</code>：导出变量，使<code>foo</code>可用于从当前 shell 执行的所有程序</li><li><code>foo=’ls -al‘</code>：重新对变量赋值</li><li><code>$foo</code>：单独引用变量会被当作命令看待</li></ul><p>不管是<code>set</code>还是<code>env</code>设置的变量，都只对当前 shell 有效，不会对新的 shell 可见，所以必须修改一些文件来达到永久设置变量的目的</p><h2 id="语言设置" tabindex="-1"><a class="header-anchor" href="#语言设置" aria-hidden="true">#</a> 语言设置</h2><p>在 Linux 中，进行语言选择像导出变量一样简单，通过查看这个变量，程序会决定如何跟你交流</p><ul><li><code>echo $LANG</code>：打印变量<code>LANG</code></li><li><code>locale</code>：显示当前区域语言</li><li><code>man man</code>：显示 unix 系统手册</li><li><code>sudo dpkg-reconfigure locales</code>：重新配置区域设置，因为变化是系统层次，所以要用到<code>sudo</code>，使用方向键选择一个语言，按空格选中</li><li><code>export LANG=zh_CN.UTF-8</code>，修改<code>Lang</code>切换区域语言</li></ul><p>不出意外，这是<code>dpkg-reconfigure locales</code>执行后的结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Package configuration

  ┌─────────────────────────────────────────────┤ Configuring locales ├─────────────────────────────────────────────┐
  │ Locales are a framework to switch between multiple languages and allow <span class="token function">users</span> to use their language, country,    │
  │ characters, collation order, etc.                                                                               │
  │                                                                                                                 │
  │ Please choose <span class="token function">which</span> locales to generate. UTF-8 locales should be chosen by default, particularly <span class="token keyword">for</span> new        │
  │ installations. Other character sets may be useful <span class="token keyword">for</span> backwards compatibility with older systems and software.  │
  │                                                                                                                 │
  │ Locales to be generated:                                                                                        │
  │                                                                                                                 │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> All locales                                                                                          ↑   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> aa_DJ ISO-8859-1                                                                                     ▮   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> aa_DJ.UTF-8 UTF-8                                                                                    ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> aa_ER UTF-8                                                                                          ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> aa_ER@saaho UTF-8                                                                                    ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> aa_ET UTF-8                                                                                          ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> af_ZA ISO-8859-1                                                                                     ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> af_ZA.UTF-8 UTF-8                                                                                    ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> agr_PE UTF-8                                                                                         ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> ak_GH UTF-8                                                                                          ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> am_ET UTF-8                                                                                          ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> an_ES ISO-8859-15                                                                                    ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> an_ES.UTF-8 UTF-8                                                                                    ▒   │
  │    <span class="token punctuation">[</span> <span class="token punctuation">]</span> anp_IN UTF-8                                                                                         ↓   │
  │                                                                                                                 │
  │                                                                                                                 │
  │                                <span class="token operator">&lt;</span>Ok<span class="token operator">&gt;</span>                                    <span class="token operator">&lt;</span>Cancel<span class="token operator">&gt;</span>                                 │
  │                                                                                                                 │
  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="任务控制" tabindex="-1"><a class="header-anchor" href="#任务控制" aria-hidden="true">#</a> 任务控制</h2><p>Linux 是一个多任务操作系统，意味着可以有很多程序同时运行，对于 bash 来说肯定有很多工具来控制多个任务的执行</p><ul><li><code>Ctrl + z</code>：将当前非终止程序放到后台并暂停运行，允许继续执行其他命令</li><li><code>Ctrl + c</code>：可以停止当前正在执行的程序</li><li><code>jobs</code>：列出所有的后台程序</li><li><code>fg &lt;num&gt;</code>：指定程序带到前台运行，需要一个数字参数，可以从<code>jobs</code>中获取，如果没有则将最后一个挂起的程序带到前台</li><li><code>bg &lt;num&gt;</code>：指定后台程序在后台恢复运行，需要一个数字参数，从<code>jobs</code>获取，如果没有则将最后一个挂起的程序恢复</li><li><code>&amp;</code>：在执行命令后面增加<code>&amp;</code>会让这个程序直接在后台挂起运行</li><li><code>nohup</code>：在执行命令前面加上使用<code>nohup</code>命令，挂起一个程序，在终端断开后不会被杀死</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在使用<code>nohup</code>时，一定要使用<code>exit</code>命令正常断开对话，否则是无效的，如果挂起的程序不是一种非终止运行的状态也会被终止</p></div><h2 id="进程处理" tabindex="-1"><a class="header-anchor" href="#进程处理" aria-hidden="true">#</a> 进程处理</h2><ul><li><code>ps</code>：显示当前会话启动的进程</li><li><code>ps a</code>：仅打印于终端（TTY）相关以及通过终端启动的进程</li><li><code>ps x</code>：显示所有进程</li><li><code>ps ax</code>：打印所有正在运行的进程</li><li><code>ps axue --forest</code>：以树的形式打印所有正在运行的进程</li><li><code>kill 45569</code>：终结 PID 为<code>45569</code>的程序运行</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root@VM-4-14-ubuntu:~<span class="token comment"># ps x</span>
    PID TTY      STAT   TIME COMMAND
      <span class="token number">1</span> ?        Ss     <span class="token number">0</span>:01 /sbin/init
      <span class="token number">2</span> ?        S      <span class="token number">0</span>:00 <span class="token punctuation">[</span>kthreadd<span class="token punctuation">]</span>
      <span class="token number">3</span> ?        I<span class="token operator">&lt;</span>     <span class="token number">0</span>:00 <span class="token punctuation">[</span>rcu_gp<span class="token punctuation">]</span>
      <span class="token number">4</span> ?        I<span class="token operator">&lt;</span>     <span class="token number">0</span>:00 <span class="token punctuation">[</span>rcu_par_gp<span class="token punctuation">]</span>
      <span class="token number">6</span> ?        I<span class="token operator">&lt;</span>     <span class="token number">0</span>:00 <span class="token punctuation">[</span>kworker/0:0H-kblockd<span class="token punctuation">]</span>
     <span class="token number">26</span> ?        S      <span class="token number">0</span>:00 <span class="token punctuation">[</span>oom_reaper<span class="token punctuation">]</span>
     <span class="token number">27</span> ?        I<span class="token operator">&lt;</span>     <span class="token number">0</span>:00 <span class="token punctuation">[</span>writeback<span class="token punctuation">]</span>
     <span class="token number">28</span> ?        S      <span class="token number">0</span>:00 <span class="token punctuation">[</span>kcompactd0<span class="token punctuation">]</span>
     <span class="token number">29</span> ?        SN     <span class="token number">0</span>:00 <span class="token punctuation">[</span>ksmd<span class="token punctuation">]</span>
     <span class="token number">30</span> ?        SN     <span class="token number">0</span>:00 <span class="token punctuation">[</span>khugepaged<span class="token punctuation">]</span>
     <span class="token number">76</span> ?        I<span class="token operator">&lt;</span>     <span class="token number">0</span>:00 <span class="token punctuation">[</span>kintegrityd<span class="token punctuation">]</span>
     <span class="token number">77</span> ?        I<span class="token operator">&lt;</span>     <span class="token number">0</span>:00 <span class="token punctuation">[</span>kblockd<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个进程都有一个唯一的 PID 跟它关联，TTY 是与进程相关联的电传模拟器，允许进程交换信息，STAT 表示当前进程的状态，TIME 表示在 CPU 上执行此进程的时间，COMMAND 是带有参数的程序名称</p><p>这是 STAT 可能的进程状态：</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>D</td><td>不中断睡眠（通常为 IO）。进程繁忙或挂起，不响应信号，例如硬盘已经崩溃，读操作无法完成</td></tr><tr><td>R</td><td>运行或可运行（在运行队列中）。进程正在执行中。</td></tr><tr><td>S</td><td>中断睡眠（等待事件完成）。例如，终端进程和 Bash 通常处于此状态，等待你键入某些内容</td></tr><tr><td>T</td><td>停止，由任务控制信号或由于被追踪。</td></tr><tr><td>W</td><td>分页（从 2.6.xx 内核起无效，所以不用担心）</td></tr><tr><td>X</td><td>死亡（不应该看到）</td></tr><tr><td>Z</td><td>已停止（“僵尸”）进程，已终止，但未被父项收回。这种情况发生在错误终止的进程上</td></tr><tr><td>&lt;</td><td>高优先级（对其他用户不好）</td></tr><tr><td>N</td><td>低优先级（对其他用户很好）</td></tr><tr><td>L</td><td>将页面锁定到内存中（用于实时和自定义 IO）</td></tr><tr><td>s</td><td>是会话领导。Linux 中的相关进程被视为一个单元，并具有共享会话 ID（SID）。如果进程 ID（PID）= 会话 ID（SID），则此进程将是会话领导</td></tr><tr><td>L</td><td>是多线程的（使用 CLONE_THREAD，例如 NPTL pthreads）</td></tr><tr><td>+</td><td>位于前台进程组。这样的处理器允许输入和输出到电传模拟器，tty</td></tr></tbody></table><h2 id="网络" tabindex="-1"><a class="header-anchor" href="#网络" aria-hidden="true">#</a> 网络</h2><ul><li><code>netstat</code>：</li><li><code>netstat -a</code>：列出所有端口</li><li><code>netstat -at</code>：列出所有 TCP 端口</li><li><code>netstat -au</code>：列出所有 UDP 端口</li><li><code>netstat -ap</code>：列出所有端口并显示与程序相关的程序名和 PID | <code>lsof -i</code>： 列出打开文件</li></ul><h2 id="系统启动" tabindex="-1"><a class="header-anchor" href="#系统启动" aria-hidden="true">#</a> 系统启动</h2><h2 id="性能信息" tabindex="-1"><a class="header-anchor" href="#性能信息" aria-hidden="true">#</a> 性能信息</h2><ul><li><code>top</code>：实时查看进程变化，监控 Linux 系统状况</li><li><code>uptime</code>：查看系统运行了多少时间</li><li><code>free</code>：查看内存</li><li><code>vmstat</code>：进程，内存，分页，块 IO，陷阱，磁盘和 cpu 活动的信息</li></ul><h2 id="系统信息" tabindex="-1"><a class="header-anchor" href="#系统信息" aria-hidden="true">#</a> 系统信息</h2><ul><li><code>lsb_release -a</code>：查看发行版本</li><li><code>cat /proc/cpuinfo</code>：查看硬件配置</li><li><code>df</code> - 查看文件系统的空间使用情况，只能查看一级文件夹的大小、使用比例、档案系统以及挂载点</li><li><code>df -h</code> - 查看文件系统的空间使用情况，以<code>1024</code>为单位</li><li><code>du</code> - 可以查看文件以及文件夹的大小，会统计文件大小相加</li></ul><h2 id="用户操作" tabindex="-1"><a class="header-anchor" href="#用户操作" aria-hidden="true">#</a> 用户操作</h2><p><code>$</code>是普通用户，<code>#</code>是超级用户</p><ul><li><code>useradd &lt;username&gt;</code> - 新建用户</li><li><code>userdel &lt;username&gt;</code> - 删除用户</li><li><code>passwd &lt;username&gt;</code> - 修改用户名，root 用户可以修改自己和其他用户，其他用户只能修改自己</li><li><code>su &lt;username&gt;</code> - 切换用户</li><li><code>sudo &lt;cmd&gt;</code> - 提权这次执行的命令</li></ul><h2 id="文件权限" tabindex="-1"><a class="header-anchor" href="#文件权限" aria-hidden="true">#</a> 文件权限</h2><p>对于 Linux 中的每个文件，都有三个权限类。对于每个权限类，有三个权限</p><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td>用户</td><td>文件的拥有者。</td></tr><tr><td>分组</td><td>同组用户</td></tr><tr><td>其它人</td><td>任何其他用户或组</td></tr></tbody></table><p>这是每个类可分配的权限：</p><table><thead><tr><th>权限</th><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>读</td><td>r--</td><td>读取文件的能力</td></tr><tr><td>写</td><td>-w-</td><td>写入文件的能力</td></tr><tr><td>执行</td><td>--x</td><td>将文件作为程序执行的能力，例如 ShellScript 应该设置这个</td></tr></tbody></table><p>以及管理权限的命令：</p><ul><li><code>chmod</code> — 修改文件权限</li><li><code>chown</code> — 修改所有者</li><li><code>umask</code> — 修改掩码，以便将权限赋予新创建的文件</li></ul><h2 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向" aria-hidden="true">#</a> 重定向</h2><p><code>wc -l</code>会从当前<code>/dev/tty</code>读取行，每次按下回车都会回去一行，按下<code>Ctrl + D</code>后会告诉输入了多少行。如果想要计算<code>.bash_history</code>的行数，可以使用<code>wl -l &lt; .bash_history</code>来实现，这会计算该文件的行数。它利用了重定向机制，即将来自键盘输入或到显示器的输出，重定向到另一个文件</p><ul><li><code>&lt;</code> 用文件替换输入</li><li><code>&gt;</code> 用文件替换输出</li><li><code>&gt;&gt;</code>不会覆盖文件，而是追加到末尾</li><li><code>|</code>从一个程序中获取输出，并连接到另一个程序</li></ul><p>我们可以结合各种过滤程序来达到想要的目的：</p><ul><li><code>ls -al | head -n 5</code>：只打印目录列表中的前 5 个条目</li><li><code>ls -al | tail -n 5</code>：只打印目录列表中的后 5 个条目</li><li><code>ls -al | awk &#39;{print $8, $9}&#39;</code>：打印第 8 列 和第 9 列 的条目</li><li><code>ls -al | awk &#39;{print $9, $8}&#39;</code>：打印第 8 列 和第 9 列 的条目，调换顺序</li><li><code>ls -al | grep bash</code>：仅打印目录列表中包含 bash 的行</li><li><code>cat ls.out | sed &#39;s/bash/hello/g&#39;</code>：将所有的<code>bash</code>条目替换为<code>hello</code></li></ul><h2 id="挂载共享目录" tabindex="-1"><a class="header-anchor" href="#挂载共享目录" aria-hidden="true">#</a> 挂载共享目录</h2><p>在系统上安装<code>cifs-utils</code>包</p><p>创建一个目录作为挂载点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> /mnt/win_share
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开始挂载共享目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> cifs <span class="token parameter variable">-o</span> <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token operator">&lt;</span>win_share_user<span class="token operator">&gt;</span>,password<span class="token operator">=</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span> //WIN_SHARE_IP/<span class="token operator">&lt;</span>share_name<span class="token operator">&gt;</span> /mnt/win_share
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>卸载</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">umount</span> /mnt/win_share
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用凭证文件配置，创建一个文件，比如叫<code>win-credentials</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token operator">&lt;</span>win_share_user<span class="token operator">&gt;</span>
<span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用文件进行挂载</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> cifs <span class="token parameter variable">-o</span> <span class="token assign-left variable">credentials</span><span class="token operator">=</span>/root/win-credentials //WIN_SHARE_IP/<span class="token operator">&lt;</span>share_name<span class="token operator">&gt;</span> /mnt/win_share
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>mount</code>挂载时，重启不会保留，可以编辑<code>/etc/fstab</code>文件，该文件定义了系统启动时挂载什么文件系统</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># &lt;file system&gt;             &lt;dir&gt;          &lt;type&gt; &lt;options&gt;                                                   &lt;dump&gt;  &lt;pass&gt;</span>
//WIN_SHARE_IP/share_name  /mnt/win_share  cifs  <span class="token assign-left variable">credentials</span><span class="token operator">=</span>/root/win-credentials,file_mode<span class="token operator">=</span>0755,dir_mode<span class="token operator">=</span>0755 <span class="token number">0</span>       <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>mount /mnt/win_share</code>,该命令将读取<code>/etc/fstab</code>的内容并装载共享,下次重新启动系统时，将自动装载 Windows 共享</p><h2 id="远程登陆" tabindex="-1"><a class="header-anchor" href="#远程登陆" aria-hidden="true">#</a> 远程登陆</h2><p>如果买了远程服务器，且系统是 Linux，便可以使用 SSH 工具来远程连接，一般输入<code>用户名@机器地址</code>，然后输入密码就可以连接成功了，但是有时候远程不允许 SSH 连接，这个时候就要在控制台中进入机器，然后更改系统配置即可</p><p>如果被禁止 SSH 登录 ROOT 账户，则进入远程机采用下面操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>找到<code>PermitRootLogin prohibit-password</code>行并用<code>#</code>注释掉，新添加<code>PermitRootLogin yes</code>行，保存编辑退出，使用<code>sudo service ssh restart</code>就行了</p><p>每次连接输入密码太麻烦，可以使用密钥的方式来登录，首先本机使用<code>ssh-keygen -t ed25519</code>生成密钥对，然后使用<code>ssh-copy-id 用户名@机器地址</code>上传密钥到远程机器，随后输入密码验证一下，以后就可以免密登录了</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>windows 的<code>cmd</code>和<code>powershell</code>是没有<code>ssh-copy-id</code>命令的，最好使用比如 git bash 这样的终端来操作</p></div><h2 id="端口管理" tabindex="-1"><a class="header-anchor" href="#端口管理" aria-hidden="true">#</a> 端口管理</h2><p>不要在远程机中通过防火墙程序来控制端口，因为控制台会有专门预设好的防火墙设置，在这里指定规则即可</p><p>如果通过远程机防火墙程序控制了规则，可能会导致 SSH 连接工具无法连接的现象发生，这时的防火墙规以远程机</p><h2 id="设置代理" tabindex="-1"><a class="header-anchor" href="#设置代理" aria-hidden="true">#</a> 设置代理</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 修改shell配置文件 ~/.bashrc ~/.zshrc等
export http_proxy=socks5://127.0.0.1:1024
export https_proxy=$http_proxy

# 设置setproxy和unsetproxy 可以快捷的开关
# 需要时先输入命令 setproxy
# 不需要时输入命令 unsetproxy
alias setproxy=&quot;export http_proxy=socks5://127.0.0.1:1024; export https_proxy=$http_proxy; echo &#39;HTTP Proxy on&#39;;&quot;
alias unsetproxy=&quot;unset http_proxy; unset https_proxy; echo &#39;HTTP Proxy off&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ubuntu" tabindex="-1"><a class="header-anchor" href="#ubuntu" aria-hidden="true">#</a> Ubuntu</h2>`,101),p={href:"https://mirrors.tuna.tsinghua.edu.cn/",target:"_blank",rel:"noopener noreferrer"},u=a(`<p>Ubuntu 的软件源配置文件是<code>/etc/apt/sources.list</code>。首先<code>cp /etc/apt/sources.list /etc/apt/sources.list.old</code>备份一下原来的源，然后<code>vim /etc/apt/sources.list</code>将内容全部替换为 TUNA 的源,即可使用 TUNA 的软件源镜像</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse

# 预发布软件源，不建议启用
# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arch" tabindex="-1"><a class="header-anchor" href="#arch" aria-hidden="true">#</a> Arch</h2>`,3),h={href:"https://mirrors.tuna.tsinghua.edu.cn/",target:"_blank",rel:"noopener noreferrer"},m=a(`<p>直接挂载镜像，使用 UEFI 模式启动，然后进入 live-cd 系统，使用<code>archinstall</code>命令进行脚本安装</p><p>更新软件包缓存：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> pacman <span class="token parameter variable">-Syy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装一些必要的包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pacman <span class="token parameter variable">-S</span> openssh <span class="token function">vim</span> networkmanager <span class="token function">git</span> <span class="token function">zsh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start NetworkManager sshd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置 shell，使用更好的 Oh-my-zsh：</p><ol><li>使用 curl 下载脚本并安装：<code>sh -c &quot;$(curl -fsSL &lt;https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh&gt;)&quot;</code></li><li>同意使用 Oh-my-zsh 的配置模板覆盖已有的<code>.zshrc</code></li><li>使用<code>powerlevel10k</code>主题,<code>git clone --depth=1 &lt;https://gitee.com/romkatv/powerlevel10k.git&gt; \${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k</code></li><li>在<code>.zshrc</code>设置<code>ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</code>启用主题</li><li>执行<code>source ~/.zshrc</code>配置生效</li><li>启用<code>z</code>获取快速跳转目录的能力，不需要安装，直接在<code>.zshrc</code>中设置<code>plugins=(z)</code>启用</li><li>安装<code>zsh-autosuggestions</code>获取命令提示，<code>git clone https://github.com/zsh-users/zsh-autosuggestions \${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</code>，在<code>.zshrc</code>中设置<code>plugins=(zsh-autosuggestions)</code></li><li>安装<code>zsh-syntax-highlighting</code>获取语法检查，<code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git</code>，<code>echo &quot;source \${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; \${ZDOTDIR:-$HOME}/.zshrc</code></li></ol><h2 id="软件包管理" tabindex="-1"><a class="header-anchor" href="#软件包管理" aria-hidden="true">#</a> 软件包管理</h2><p>在为软件安装程序之前，有必要了解下面的概念：</p><ul><li>源码包 - 不能编译，必须手动编译，并配置才能运行（大佬定制化时使用），一般后缀名为<code>.tar.gz</code></li><li>二进制包 - 已经编译过，可以立即执行</li><li>RPM - 是二进制包的子系列，用来处理二进制包依赖关系，基于软件包管理系统</li><li>软件源 - 存放包的仓库，比如阿里云、清华等</li></ul><p>一般情况下，默认的软件源就足够使用了，但有的软件源比较慢，甚至会连接失败，所以需要换一些国内的源，比如阿里云</p><p>在 Linux 中，不同发行版的软件包有不同的格式，比如 Ubuntu 的软件包格式是<code>.deb</code>，只要在网上看到<code>.deb</code>包就意味着它可以被安装到 Ubuntu 上</p><p>通常需要先使用<code>wget</code>或<code>curl</code>工具下载软件包到本地，然后就可以使用<code>dpkg</code>程序进行安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>package.deb<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是<code>dpkg</code>是基于 Debian 的最低级包管理器，可能无法处理一些依赖关系</p><p>通常可以使用<code>sudo apt install -f</code>来处理依赖问题，<code>apt</code>是 Ubuntu 自带的包管理器，比<code>dpkg</code>要更加强大，使用<code>sudo apt install ./&lt;package.deb&gt;</code>可以安装本地 deb 软件包，使用相对路径会安装当前目录的 deb 包，否则会尝试从软件源仓库中检索并安装软件包，不过通常使用另一种包管理工具<code>aptitude</code>来替代：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>aptitude update             更新可用的包列表
aptitude safe-upgrade       执行一次安全的升级
aptitude full-upgrade       将系统升级到新的发行版
aptitude install &lt;pkgname&gt;  安装包
aptitude remove &lt;pkgname&gt;   删除包
aptitude purge &lt;pkgname&gt;    删除包及其配置文件
aptitude search &lt;string&gt;    搜索包
aptitude show &lt;pkgname&gt;     显示包的详细信息
aptitude clean              删除下载的包文件
aptitude autoclean          仅删除过期的包文件
aptitude versions &lt;pkgname&gt; 显示指定包的版本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function v(b,g){const n=c("ExternalLinkIcon");return t(),i("div",null,[r,s("p",null,[e("前往"),s("a",p,[e("https://mirrors.tuna.tsinghua.edu.cn/"),d(n)]),e("下载镜像")]),u,s("p",null,[e("前往"),s("a",h,[e("https://mirrors.tuna.tsinghua.edu.cn/"),d(n)]),e("下载镜像")]),m])}const f=o(l,[["render",v],["__file","linux.html.vue"]]);export{f as default};
