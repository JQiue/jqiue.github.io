import{ac as a,A as n,B as s,E as e,ae as t}from"./framework.a879f165.js";const o={},l=t(`<h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p>数组是同一类型的集合，一旦创建大小就不可变</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组所有的元素初始化为默认值，整形都是<code>0</code>，浮点型是<code>0.0</code>，布尔型是<code>false</code></p><p>也可以在定义数组时指定初始化元素，这样就不必写出数组大小</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以进一步简写成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2><p>集合只能存储引用数据类型，存储基本类型会自动装箱，集合长度可以随着元素的增长而增长，这是它和数组的区别</p><p>所有类型的集合继承<code>Collection</code>接口</p><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h3><p>List 集合是存储有序的，可以重复的元素，有多种实现，都继承 List 接口，List 有本身实现的方法：</p><ul><li><code>viod add(int index, E element)</code></li><li><code>E remove(int index)</code></li><li><code>E get(int index)</code></li><li><code>E set(int index, E element)</code></li></ul><p>ArrayList 是数组实现的，所以查询比较快，但是增删比较慢，具有以下自身方法：</p><ul><li><code>boolean add(E)</code> 一定是 true</li><li><code>clear()</code> 清空集合中的元素</li><li><code>contains()</code> 判断是否包含该元素</li><li><code>boolean isEmpty()</code> 判断是否为空，空则为true</li><li><code>int size()</code> 返回元素个数</li><li><code>Object[] toArray()</code> 将集合转换成数组，打印时需要向下转型</li><li><code>addAll(collection c)</code>将整个集合当成一个对象添加到集合中</li><li><code>containsAll(collection c)</code>判断调用的集合是否包含传入的集合</li><li><code>removeAll(collection c)</code>删除两个集合中的交集，没有交集则返回false</li><li><code>retainsAll(collection c)</code>获取集合中的交集，调用的集合改变则返回true,否则返回false，具体看调用集合的值调用完后是否和调用前一样</li></ul><p>LinkedList 是链表实现的，所以增删比较快，查询比较慢，具有以下自身方法：</p><ul><li><code>addFirst(E)</code> - 添加元素到头部</li><li><code>addLast(E)</code> - 添加元素到尾部</li></ul><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><p>Set 是存储无序的，不可以重复的元素，也有多种实现，都继承 Set 接口，本身有自己的的实现方法：</p><ul><li>boolean add(E e);</li><li>boolean addAll(Collection&lt;? extends E&gt; c);</li><li>boolean remove(Object o);</li><li>boolean removeAll(Collection&lt;?&gt; c);</li><li>void clear();</li><li>size()</li><li>boolean isEmpty();</li><li>boolean contains(Object o);</li><li>boolean containsAll(Collection&lt;?&gt; c);</li><li>boolean retainAll(Collection&lt;?&gt; c);</li><li>boolean equals(Object o);</li><li>int hashCode();</li></ul><p>HashSet 是用哈希表实现的，不能通过类似角标的方式获取元素</p><p>LinkedHashSet 是用链表实现的，是 Set 集合中唯一一个能够保证怎么存就怎么取出的集合</p><p>TreeSet 是用二叉树实现的，于 HashSet 不同的是，TreeSet 具有排序功能</p><h2 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> Vector</h2><p>Vector 是由数组实现的一个类似动态数组的功能</p><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h2><p>可以用来迭代集合中的元素，集合需要调用返回迭代器对象的方法。每个集合内部存储结构是不同的，因此在每个集合中实现<code>hasNext()</code>和<code>Next()</code>方法是臃肿的，迭代器是将这样的方法向上抽取接口，然后在每个集合内部实现自己定义的迭代方式，就能规定所有的集合遵守实现<code>hasNext()</code>和<code>Next()</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HashSet</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function c(i,p){return n(),s("div",null,[l,e(" to be update ")])}const u=a(o,[["render",c],["__file","ds.html.vue"]]);export{u as default};
