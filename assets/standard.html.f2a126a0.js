import{ac as n,A as s,B as a,ae as t}from"./framework.a879f165.js";const p={},e=t(`<p>这里是 JavaScript 中提供的一些标准功能</p><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> input</h2><p>通过 input() 函数来输入数据，这样就可以手动来输入数据了，而不是写死数据，当运行到该函数时，会等待用户输入数据完毕才会执行其他的语句，同时也可提供字符串来作为输入的提示信息，该函数的返回值即用户输入的数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入密码：&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">警告</p><p>input() 函数只能得到字符串</p></div><h2 id="print" tabindex="-1"><a class="header-anchor" href="#print" aria-hidden="true">#</a> print</h2><p>通过<code>print()</code>函数来向控制台输出数据</p><h3 id="输出函数的格式化" tabindex="-1"><a class="header-anchor" href="#输出函数的格式化" aria-hidden="true">#</a> 输出函数的格式化</h3><p>有时候我们可能需要输出文字信息的同时，也将数据一起输出，这就需要<strong>格式化控制符</strong>，包含<code>%</code>的字符串，被称为格式化字符串，不同的类型要使用不同的格式化控制符</p><table><thead><tr><th>格式化字符</th><th>含义</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>整型，%06d 表示输出的整数位数，不足则用 0 补充</td></tr><tr><td>%f</td><td>浮点型，%.2f 表示小数点只留两位</td></tr><tr><td>%%</td><td>输出%</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;wjq&quot;</span>
age <span class="token operator">=</span> <span class="token number">22</span>
height <span class="token operator">=</span> <span class="token number">17.3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span> <span class="token operator">%</span> age<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span> <span class="token operator">%</span> height<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%s%d%f&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 可以同时输出多个变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>这里的(name, age, height)本质上是元组类型</p></div><h2 id="类型检测" tabindex="-1"><a class="header-anchor" href="#类型检测" aria-hidden="true">#</a> 类型检测</h2><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h3><p>type 函数用于返回对象的类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;int&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;float&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;str&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># &lt;class &#39;bool&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;list&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;dict&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># &lt;class &#39;set&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isinstance" tabindex="-1"><a class="header-anchor" href="#isinstance" aria-hidden="true">#</a> isinstance</h3><p>isinstance 函数用于判断一个对象是否为另一个已知的类型，可以是 Python 定义的，也可是通过 class 定义的类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="type-和-isinstance-的不同" tabindex="-1"><a class="header-anchor" href="#type-和-isinstance-的不同" aria-hidden="true">#</a> type 和 isinstance 的不同</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>slef<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am a human&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">pass</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> Student<span class="token punctuation">)</span> <span class="token comment"># true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> Person<span class="token punctuation">)</span> <span class="token comment"># false</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Student<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论可知，type 不会考虑该类型的继承关系，而 isinstance 则会将子类认为父类的类型，会考虑继承关系</p><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><ol><li>int：转换为整型</li><li>float：转换为浮点型</li><li>str：转换为字符串类型</li><li>list：将元组转换为列表</li><li>turple：将列表转换为元组</li><li>dict：创建一个字典，可以将可迭代对象转换为字典</li><li>set：将一个序列转换为集合</li><li>eval：接受一个字符串表达式，并返回表达式的值</li></ol><h2 id="算术类" tabindex="-1"><a class="header-anchor" href="#算术类" aria-hidden="true">#</a> 算术类</h2><ol><li>max：返回参数的最大值，可以是序列</li><li>min：返回参数的最小值，可以是序列</li><li>sum：对序列进行求和</li><li>divmod：返回一个包含商（整除）和余数的元组</li><li>pow：返回 x 的 y 次方</li></ol><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><ol><li>sorted：对可迭代对象进行排序，并返回一个列表</li><li>id：返回对象的地址</li><li>range：生成一个整数列表</li><li>len：返回对象的长度</li></ol><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter</h2><p>filter 用于过滤不符合条件的元素，并返回符合条件的元素组成的列表，filter 第一个参数为函数，第二个参数为迭代类型，每一个元素都会传入函数中进行判断，返回 True 或 False，将返回 True 的元素放入新列表中</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [23, 43, 15]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>在 Python 2 中 filter 返回的是列表，而 Python 3 中返回的是 filter 类，可以被迭代</p></div><h2 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h2><p>Python 通过一些内置函数就可以进行一些系统文件的操作</p><table><thead><tr><th>模式</th><th>文件类型</th><th>操作方式</th><th>文件不存在时</th><th>是否覆盖写</th></tr></thead><tbody><tr><td>r</td><td>文本文件</td><td>只读</td><td>报错</td><td>-</td></tr><tr><td>r+</td><td>文本文件</td><td>可读可写</td><td>报错</td><td>是</td></tr><tr><td>w</td><td>文本文件</td><td>只写</td><td>新建文件</td><td>是</td></tr><tr><td>w+</td><td>文本文件</td><td>可读可写</td><td>新建文件</td><td>是</td></tr><tr><td>a</td><td>文本文件</td><td>可写</td><td>新建文件</td><td>否</td></tr><tr><td>a+</td><td>文本文件</td><td>可读可写</td><td>新建文件</td><td>否</td></tr><tr><td>rb</td><td>二进制文件</td><td>只读</td><td>报错</td><td>-</td></tr><tr><td>rb+</td><td>二进制文件</td><td>可读可写</td><td>报错</td><td>是</td></tr><tr><td>wb</td><td>二进制文件</td><td>只写</td><td>新建文件</td><td>是</td></tr><tr><td>wb+</td><td>二进制文件</td><td>可读可写</td><td>新建文件</td><td>是</td></tr><tr><td>ab</td><td>文本二进制文件文件</td><td>可写</td><td>新建文件</td><td>否</td></tr><tr><td>ab+</td><td>二进制文件</td><td>可读可写</td><td>新建文件</td><td>否</td></tr></tbody></table><p>总结：r 和 w 都是覆盖写，a 是追加，r 找不到文件时报错，w 找不到文件则创建文件</p><p>在打开文件之前须提供文件的路径，以及操作模式，Python 通过 open 函数来指定操作的文件以及操作模式，open 函数会返回该文件的对象，以供调用该对象的各种方法来实现文件的操作</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>文件路径<span class="token punctuation">,</span> 操作模式<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>read()：读取文件中所有的数据并返回字符串，可以指定参数来决定读取的长度</li><li>readline()：方法单行读取并将指针向下移动，并返回字符串</li><li>readlines()：方法读取全部行的内容，将每一行作为一个元素的列表返回</li><li>write()：写入字符串并返回字符串长度</li><li>writelines()：方法写入可迭代类型（元素必须是字符串类型）</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在 Windows 中，写入操作一定要注意编码问题，否则会出现写入乱码的情况，尽量在打开文件的时候指定文件编码</p></div><p>不管是读还是写，都应该在最后调用该文件对象的 close 方法来关闭流，否则数据不会保留</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每次都需要调用 close 方法来关闭文件未免繁琐，Python 提供了 with 关键字来解决文件的自动关闭操作</p><p>文件的读写操作都是依靠指针定位的，随着文件的不断操作，指针位置会不断的改变</p><ul><li>tell()：来获取当前指针在文件中的位置</li><li>seek(offset, whence)：重新定位指针，offset 定义偏移量，whence 定义偏移的位置，为 0 表示从头开始，为 1 表示从当前位置开始，为 2 表示从结尾开始</li></ul><div class="custom-container tip"><p class="custom-container-title">whence 取值</p><p>如果取值不为 0，则应该使用二进制文件打开，否则会报错</p></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><p>查找匹配项</p><ol><li>search：查找任意位置的匹配项</li><li>match：必须从字符串开头匹配</li><li>fullmatch：整个字符串与正则完全匹配</li></ol><p>普通匹配</p><p>普通匹配就是以字面量来进行匹配，比如<code>ab</code>，会匹配字符串中包含<code>ab</code>的所有文本</p><p>边界符匹配</p><ul><li><code>^</code>：匹配以某文本开始的文本</li><li><code>$</code>：匹配以某文本结尾的文本</li></ul>`,53),o=[e];function i(c,l){return s(),a("div",null,o)}const d=n(p,[["render",i],["__file","standard.html.vue"]]);export{d as default};
