import{ac as n,A as s,B as a,ae as e}from"./framework.a879f165.js";const o={},p=e(`<p>这里是 JavaScript 基本语法规则</p><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 单行注释，只能注释单行</span>

<span class="token comment">/*
多行注释
可以注释多行内容
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>不支持注释嵌套，不要在多行注释中嵌套另一个多行注释</p></div><h2 id="代码块和语句" tabindex="-1"><a class="header-anchor" href="#代码块和语句" aria-hidden="true">#</a> 代码块和语句</h2><p>JavaScript 采用<code>{}</code>来区分代码之间的层次以及作用域范围，当存在换行符时，大多数情况下可以省略语句的分号</p><p>JavaScript 会将换行符理解成“分号”，但有部分例外，比如在<code>[]</code>前不会被添加一个隐式的分号，运行时可能造成错误，所以最好不要省略</p><h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h2><ul><li>由英文字母、数字、符号<code>$</code>和<code>_</code>组成，但第一个字符不能是数字</li><li>不能是 JavaScript 中的关键字和保留字</li><li>区分大小写</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>甚至允许非英文字母，从技术上来讲，这样是没问题的，但是使用英文字母是惯例</p></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>通过关键字<code>var</code>声明，由于 JavaScript 是弱类型语言，不需要显式声明变量的数据类型且初始化，数据类型可以随意改变，通过<code>=</code>运算符赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">警告</p><p>即使不使用<code>var</code>也可以直接使用变量名，当解释程序遇到未声明过的变量时，会用该变量名创建一个全局变量，并将其初始化为指定的值，不过这样做非常危险</p></div><p>为了避免上述问题，在 ES6 中新增了<code>let</code>关键字，它和<code>var</code>大致相同，但<code>let</code>是最推荐的变量声明方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo<span class="token punctuation">;</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>let</code>和\`var\`\`的区别是：</p><ul><li><code>var</code>没有块级作用域，只有函数作用域以及全局作用域，所以它会穿透一些代码块，而<code>let</code>是具有局部作用域的</li><li><code>var</code>允许同一个作用域下重新声明，而<code>let</code>是不允许的</li><li><code>var</code>声明的变量会被提前，可以在声明前使用，而<code>let</code>是不会的</li></ul><div class="custom-container danger"><p class="custom-container-title">变量提升</p><p>如果使用了一个未声明的变量，且在后面进行了声明，解释器会将该变量的声明进行提前。如果在声明的同时赋值，赋值操作不会被提前</p></div><p>ES6 前不支持只读变量的定义，但可以通过<code>Object.defineProperty()</code>间接实现定义，后在 ES6 中支持以<code>const</code>关键字定义只读变量，它和<code>let</code>成为了声明变量的主要方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ES6 中规定，但凡在块级作用域使用<code>let/const</code>，这个区域中的变量就绑定到这个区域，不会受到外界影响</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tmp <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>
  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>JavaScript 有八种基本的数据类型（七种原始类型，一种复杂类型）</p><ul><li>Number：代表整数和浮点数，除了常规的数字，还包括一些“特殊数值”也属于这种类型：<code>Infinity</code>,<code>-Infinity</code>,<code>NaN</code>，在 JavaScript 中做数学运算是足够安全的，不会因为任何错误而停止，最坏的情况下会得到<code>NaN</code></li><li>Bigint：任意长的整数</li><li>String：由<code>&#39;</code>、<code>&quot;</code>、<code>\`\`</code>括起来的字符序列，单引号和双引号是没什么区别的，但反引号是扩展功能，允许将变量或表达式通过<code>\${...}</code>嵌入字符串中</li><li>Boolean：只有两个取值<code>true</code>和<code>false</code>，在适当的时候会转换为<code>1</code>和<code>0</code></li><li>Null：特殊值<code>null</code>不属于任何类型，它是一个独立的类型，只有一个<code>null</code>值，JavaScript 中的<code>null</code>仅代表“无”、“空”或“未知值”的特殊值</li><li>Undefined：<code>undefined</code>和<code>null</code>一样是独立的类型，当一个变量未赋值时，值就是<code>undefined</code></li><li>Symbol：用于唯一的标识符</li><li>Object：更复杂的数据结构</li></ul><div class="custom-container tip"><p class="custom-container-title">不同进制的数值表示</p><p>二进制用<code>0b</code>表示<br> 八进制用<code>0</code>表示<br> 十进制不需要添加任何额外符号<br> 十六进制用<code>0x</code>表示</p></div><h3 id="类型检测" tabindex="-1"><a class="header-anchor" href="#类型检测" aria-hidden="true">#</a> 类型检测</h3><ul><li><code>typeof</code> - 返回该一个说明数据类型的字符串，支持<code>typeof x</code>和<code>typeof(x)</code>两种形式</li><li><code>instanceof</code> - 检测一个对象是否为另一个对象的实例</li></ul><p><code>typeof 1 + 2 + 3</code>的最终结果是<code>number34</code>，这是因为<code>typeof</code>本身算一个表达式参与计算，也会考虑优先级</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果用<code>typeof</code>检测<code>null</code>会得到<code>object</code>，这是一个设计上的错误，实际上它并不是<code>object</code></p></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><p>大多数情况下 JavaScript 会将值转换为正确的类型，但某些时候需要将值显示的转换</p><ul><li><code>String(value)</code> - 将一个值转换为字符串类型</li><li><code>Number(value)</code> - 将一个值转换为数字类型，这个值应该是一个有效数字，比如将字符串数字转化为数值数字，否则就会返回<code>NaN</code></li><li><code>Boolean(value)</code> - 将一个值转换为布尔类型，直观上是“空”（0、空串、null、undefined、NaN）的值会变成<code>false</code>，剩下的都是<code>null</code></li></ul><div class="custom-container danger"><p class="custom-container-title">警告</p><p>包含<code>0</code>的字符串是<code>true</code>，JavaScript 中的非空字符串总是<code>true</code></p></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h3 id="数学运算" tabindex="-1"><a class="header-anchor" href="#数学运算" aria-hidden="true">#</a> 数学运算</h3><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>/</td><td>除法</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>**</td><td>求幂</td></tr></tbody></table><p>通常情况下加法用于求和，但是如果用于字符串，它将连接字符串，在表达式中如果有一个字符串，那么最后会转换为字符串，但运算符是按照顺序工作的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span> <span class="token comment">// &#39;21&#39; 而不是 &#39;111&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>+</code>有时候也可作为一元运算符，这会将值合法的转换数字类型，它的效果和<code>Number()</code>相同，但更加简短</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token boolean">true</span> <span class="token comment">// 1</span>
<span class="token operator">+</span><span class="token string">&quot;&quot;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值" aria-hidden="true">#</a> 赋值</h3><p><code>=</code>也是一个运算符，只不过优先级比较低，所以总是等到其他表达式运算完成才轮到<code>=</code>，<code>=</code>不仅仅可以赋值，也会返回一个值，这很有趣，但是不要使用这样的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> qux <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span>foo <span class="token operator">=</span> bar <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然也支持链式赋值，尽量不使用这种方式，因为可读性变差了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">;</span>
foo <span class="token operator">=</span> bar <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅如此，还支持原地修改，因为经常需要对某个变量进行允许，且存储在该变量中，类似于一种“修改并赋值”的操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
foo <span class="token operator">=</span> foo <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
foo <span class="token operator">=</span> foo <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用<code>+=</code>和<code>*=</code>来表示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>foo <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 foo = foo + 2</span>
foo <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 foo = foo * 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也支持自增自减，优先级比大多数运算符高</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
foo<span class="token operator">++</span><span class="token punctuation">;</span>
foo<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token operator">++</span>foo<span class="token punctuation">;</span>
<span class="token operator">--</span>foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h3><p>所有的比较运算符返回结果都为布尔值</p><p>在进行字符串的大小比较时，会按字符逐个进行比较（字符编码）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;z&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;a&#39;</span> <span class="token comment">// true</span>
<span class="token string">&#39;abd&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;abc&#39;</span> <span class="token comment">// true</span>
<span class="token string">&#39;aaa&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;aa&#39;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>规则如下：</p><ol><li>先比较首字符的大小，如果相等进入下一步</li><li>比较后面的字符，如果相等则继续向后比较，直至完成</li><li>如果两个字符串的字符都用完了，则代表相等，否则未结束的字符串更大</li></ol><p>对于不同类型的比较，会将值转换为数值再判定大小</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;3&#39;</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token comment">// true，&#39;3&#39; 被转换为数字 2</span>
<span class="token string">&#39;03&#39;</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token comment">// true，&#39;03&#39; 被转换为数字 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对布尔类型而言，<code>true</code>会被转换为<code>1</code>,<code>false</code>则被转换为<code>0</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token comment">// true</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>普通的<code>==</code>会出现一个问题，它不能区分<code>0</code>和<code>false</code>和<code>&#39;&#39;</code>和<code>false</code>，这是因为<code>==</code>再比较时会先转换类型，如果要严格区分类型再比较就可以使用<code>===</code></p><p><code>===</code>不会做任何类型的转换，同样的<code>!==</code>也表示“严格不等于”</p><p>在非严格相等<code>==</code>下，<code>null</code>和<code>undefined</code>相等，但各不等于其他值</p><div class="custom-container tip"><p class="custom-container-title">特殊值的比较</p><p><code>NaN</code>和<code>NaN</code>比较会返回<code>false</code>，无论是否全等，但是<code>null</code>和<code>undefined</code>进行<code>==</code>比较时会返回<code>true</code>，而进行<code>===</code>比较时会返回<code>false</code></p></div><h3 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算" aria-hidden="true">#</a> 逻辑运算</h3><p>JavaScript 有三个逻辑运算符：<code>||</code>，<code>&amp;&amp;</code>，<code>!</code>，它们可以用于任何类型</p><p><code>||</code>不仅有传统编程上的作用，在 JavaScript 中还有着更为特殊的用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> value1 <span class="token operator">||</span> value2 <span class="token operator">||</span> value3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上述示例中<code>||</code>做了这样的事：</p><ol><li>从左到右计算操作数</li><li>处理操作数时，将其转换为布尔值，如果为<code>true</code>则停止计算，并返回当前操作数</li><li>如果所有的操作数都是<code>false</code>，那么就返回最后一个操作数</li></ol><p>返回的是操作数的原值，不会做任何类型转换，这个特性产生了很多有趣的用法</p><p><code>&amp;&amp;</code>在传统的编程中，只有操作数都是<code>true</code>时才会返回<code>true</code>，像<code>||</code>一样，操作数可以是任意类型的值，当然它也有着特殊的用法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> value1 <span class="token operator">&amp;&amp;</span> value2 <span class="token operator">&amp;&amp;</span> value3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&amp;&amp;</code>做了这样的事：</p><ol><li>从左到右计算操作数</li><li>处理操作数时，将其转换为布尔值，如果为<code>false</code>则停止计算，并返回当前操作数</li><li>如果所有的操作数都是<code>true</code>，那么就返回最后一个操作数</li></ol><p>与<code>||</code>不同的是，<code>&amp;&amp;</code>会返回第一个计算为<code>false</code>的操作数</p><div class="custom-container danger"><p class="custom-container-title">警告</p><p>不要用<code>||</code>或<code>&amp;&amp;</code>取代<code>if</code></p></div><p><code>!</code>运算就更加简单了，它只接收一个参数，然后将参数转换为布尔值，并进行取反</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token boolean">true</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>!!</code>可以将某个值转换为布尔值，也就是取反再取反</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token operator">!</span><span class="token number">1</span> <span class="token comment">// true </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>!</code>比<code>&amp;&amp;</code>和<code>||</code>优先级高，<code>||</code>是优先级最低的</p><h3 id="空值合并" tabindex="-1"><a class="header-anchor" href="#空值合并" aria-hidden="true">#</a> 空值合并</h3><p>空值合并的写法为<code>a ?? b</code>，如果<code>a</code>是已定义的，则结果为<code>a</code>，如果<code>a</code>不是已定义的，则结果为<code>b</code></p><p>通常<code>??</code>的使用场景，是为可能未定义的变量提供一个默认值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user <span class="token operator">??</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>??</code>似乎和<code>||</code>用法相同，，但<code>||</code>是长期存在，并被长期的用于这种目的，另一方面，<code>??</code>是最近才被添加到 JavaScript 中的，他们最重要的区别是：</p><ol><li><code>||</code>返回第一个为真的值</li><li><code>??</code>返回第一个已经定义的值</li></ol><p><code>||</code>无法区分<code>false</code>，<code>0</code>，空串，以及<code>null/undefined</code>，它无法考虑下面这种情况</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>height <span class="token operator">||</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>height <span class="token operator">??</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种情况使用<code>??</code>才能得出正确的结果</p><p>出于安全，JavaScript 禁止<code>??</code>和<code>||</code>以及<code>&amp;&amp;</code>连用，除非明确的使用括号来指定优先级</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">??</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// Syntax error</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h2><h3 id="条件分支" tabindex="-1"><a class="header-anchor" href="#条件分支" aria-hidden="true">#</a> 条件分支</h3><p><code>if</code>语句和条件运算符<code>?</code>均可实现根据条件来执行不同的语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2 == 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面这个例子中，括号中的表达式会被转换为布尔值，为<code>true</code>则执行，<code>false</code>则不执行，这仅执行一条语句，如果想执行多条，必须将执行的语句放在<code>{}</code>中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>当省略<code>{}</code>时，<code>if</code>只会决定紧跟后面的一条语句是否执行</p></div><p><code>if</code>也可以包含一个可选的<code>case</code>块，如果条件不成立，就会执行<code>case</code>代码块中的语句</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;成年了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;还未成年呢&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个基础上还能使用<code>else if</code>产生更多的条件分支</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">59</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;你太优秀了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;刚刚及格&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;继续努力&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>最后一个<code>else</code>是可选的</p></div><p>有时候需要更加简单的方式达到目的，而条件运算符可以帮忙做到这一点</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ageFlag<span class="token punctuation">;</span>
<span class="token keyword">let</span> age<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ageFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  ageFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>?</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age<span class="token punctuation">;</span>
<span class="token keyword">let</span> ageFlag <span class="token operator">=</span> age <span class="token operator">&gt;</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>条件运算符的语法是<code>let result = condition ? value1 : value2</code>，当<code>condition</code>为<code>true</code>则返回<code>value1</code>，否则返回<code>value2</code></p><p>虽然<code>?</code>可替代<code>if</code>，但是可读性较差，当需要根据条件返回值时就使用<code>?</code>，当需要执行不同的代码结构时应该使用<code>if</code></p><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h3><p>JavaScript 有<code>while</code>，<code>do...while</code>，<code>for</code>三种循环结构</p><p>这是<code>while</code>的循环结构，当<code>condition</code>为真时，就会执行循环体中的语句，循环体的每一次执行叫做<strong>迭代</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是<code>do...while</code>的循环结构，它将检查条件移动到下方，这导致无论如何循环体都会执行一次，然后再判断条件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
  <span class="token comment">// 代码</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for</code>循环是最为复杂的，但也是最常用的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>begin<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的工作步骤为：</p><ol><li>进入循环，<code>begin</code>先执行一次</li><li>检查<code>condition</code>，为真则执行循环体</li><li>然后执行<code>step</code></li><li>一直重复 2，3 步骤，直到<code>condition</code>不满足</li></ol><p>在<code>begin</code>处声明的变量只对循环体可见，<code>for</code>语句中的任何语句段都可以省略，比如当<code>(;;)</code>时就是一个死循环</p><p><code>break</code>语句用于终止整个循环，<code>continue</code>是<code>break</code>的轻量版本，不会终止整个循环，而是终止当前的迭代，并强制执行新的一轮循环</p><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h3><p><code>switch</code>可以代替多个<code>if</code>，它比<code>if</code>描述的更加形象。<code>switch</code>至少有一个<code>case</code>代码块和一个可选的<code>default</code>代码块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token string">&#39;value1&#39;</span><span class="token operator">:</span>
    <span class="token comment">// code</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token string">&#39;value2&#39;</span><span class="token operator">:</span>
    <span class="token comment">// code</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token comment">// code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>x</code>会先和第一个<code>case</code>的值进行比较是否严格相等，然后比较第二个，以此类推</li><li>如果相等，就会执行<code>case</code>对应的代码块，直到遇到最近的<code>break</code></li><li>如果都没有符合<code>case</code>，则执行<code>default</code>代码块</li></ol><p><code>switch</code>和<code>case</code>允许任意表达式</p><div class="custom-container danger"><p class="custom-container-title">警告</p><p>如果没有<code>break</code>，将不会检查<code>case</code>，就会执行下一个<code>case</code>中的代码块</p></div><p><code>case</code>也有分组的能力，这种方式导致无论<code>3</code>还是<code>5</code>都执行的相同的代码块，且没有<code>break</code>的副作用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Right!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token comment">// (*) 下面这两个 case 被分在一组</span>
  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Wrong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Why don&#39;t you take a math class?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;The result is strange. Really.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rest-和-spread" tabindex="-1"><a class="header-anchor" href="#rest-和-spread" aria-hidden="true">#</a> Rest 和 Spread</h2><p>在 JavaScript 中，无论函数定义了多少个参数，都可以传入任意数量的参数，且不会报错，但是只有部分参数被当作值传递，为了解决这个问题，JavaScript 支持<code>...</code>语法来将剩余的参数收集到数组中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> args<span class="token punctuation">)</span> result <span class="token operator">+=</span> value<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">警告</p><p><code>...</code>的参数必须位于函数参数列表最末尾处</p></div><p><code>...</code>语法还可以在调用的时候拆包一个可迭代对象用来传值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> args<span class="token punctuation">)</span> result <span class="token operator">+=</span> value<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> args1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> args2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>args1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅如此，<code>...</code>也可以跟普通值混用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同时展开多个可迭代对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> args1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> args2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>args1<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在数组中展开</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> merge <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>merge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将字符串展开为字符数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;jinqiu.wang&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> strArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;j&#39;, &#39;i&#39;, &#39;n&#39;, &#39;q&#39;, &#39;i&#39;, &#39;u&#39;, &#39;.&#39;, &#39;w&#39;, &#39;a&#39;, &#39;n&#39;, &#39;g&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>展开对象，看来像拷贝了对象，其实是一种浅拷贝</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> fooCopy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>foo <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fooCopy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;foo&#39;, age: 23 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h2><p>迭代器的目的就是为了提供统一遍历方式，对于数组可能使用 for 或 forEach，对于对象使用 for in。而这些可以被迭代的对象本身具有一个<code>Symbol.iterator</code>方法，当调用它后就会返回一个迭代器对象，然后它具有<code>next()</code>方法用于返回每次迭代的项。但一般不会这么做，而是使用 for...of</p><p>只要具有<code>Symbol.iterator</code>，就是可遍历的，因此能够使用 for...of 统一进行遍历，比如常见的原生可遍历的有</p><ul><li>数组</li><li>字符串</li><li>Set</li><li>Map</li><li>arguments</li><li>...</li></ul><p>反过来，没有<code>Symbol.iterator</code>即不可遍历，比如：</p><ul><li>一般对象</li></ul><p>如果要将一个对象变成可遍历的，必须手动实现它的<code>Symbol.iterator</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

person<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      index<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> person<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> person<span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> iterator <span class="token keyword">of</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo, 18</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式" aria-hidden="true">#</a> 严格模式</h2><p>JavaScript 是不断发展的，但没有带来任何兼容性的问题，即使新的特性被加入，旧的特性也不会改变，这么做有利于兼容旧代码，但 JavaScript 中设计的不合理的地方也被保留了下来，这种情况一直持续到 ES5 出现</p><p>严格模式是 ES5 新增的功能，虽然 ES5 可以向后兼容，如果使用严格模式，那么将会被禁止一些不再建议使用的语法，这样消除了 JavaScript 语法的一些不合理，不严谨的地方。如果在第一行声明了<code>&quot;use strict&quot;</code>字符串，则代表全局范围使用严格模式，也可以在函数内的第一行中使用，这样就是局部的严格模式。严格模式的兼容性非常好，在一些不被支持的浏览器中，它只会被看作一个字符串，可以大胆使用</p><p>这是一些在严格模式下的要求：</p><ul><li>变量使用前必须提前声明，且必须使用<code>var</code>关键字，否则就会抛出错误</li><li>对象的属性不能够重复，且不能对只读属性赋值</li><li>函数的<code>arguments</code>是只读的，参数列表不能存在同名的</li><li>不能够使用<code>with</code>语句</li><li><code>this</code>不再指向全局对象</li><li>不再支持八进制数值</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>大多数情况下可以省略语句的分号，由引擎自动添加，但有部分例外</li><li>使用<code>var</code>会产生各种旧的问题，最好使用新的声明方式<code>let</code></li><li>有八种数据类型，要注意区分<code>null</code>和<code>undefined</code></li><li><code>+</code>不仅可以做数学运算，还可以连接字符串，也可以作为一元运算符转换一个值为数字类型</li><li><code>=</code>不仅会赋值，也会返回一个值</li><li><code>==</code>在进行比较时会尝试将值进行类型转换，而<code>===</code>则不会</li><li><code>||</code>和<code>&amp;&amp;</code>不仅有传统上的作用，还会返回操作数，由此产生了一种替补值的用法，<code>??</code>是一种新的用来取代前两者的用法</li><li>严格模式是一种对老旧的语法兼容性进行修正的模式</li><li><code>for...in</code>语句以任意顺序遍历一个对象的除<code>Symbol</code>以外的可枚举属性，包括继承的可枚举属性</li><li><code>for...of</code>语句在可迭代对象（包括 Array，Map，Set，String，TypedArray，arguments 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句</li><li>当<code>...</code>出现在定义函数参数的列表时，它就是 rest</li><li>当<code>...</code>出现在表达式中，它就是 spread</li><li>只要具有<code>Symbol.iterator</code>就是可迭代的，比如数组、字符串、Set/Map、否则就是不可迭代的，要手动实现迭代器方法</li></ul>`,165),t=[p];function c(l,i){return s(),a("div",null,t)}const u=n(o,[["render",c],["__file","syntax.html.vue"]]);export{u as default};
