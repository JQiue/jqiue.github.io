import{ac as a,A as s,B as e,E as n,ae as t}from"./framework.a879f165.js";const c={},p=t(`<p>Throwable 是所有错误或异常的超类，分为 Error 和 Exception，Exception 又分为编译时异常和运行时异常</p><ul><li>运行时异常 - 所有 RuntimeException 类及子类成为运行时异常，在编译时不会报错，在运行过程终止运行</li><li>编译时异常 - 程序员必须处理，否则程序就会发生错误无法通过编译</li></ul><p>如果没有手动处理异常，JVM 就会抛出异常信息，同时停止运行</p><h2 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch" aria-hidden="true">#</a> try...catch</h2><p>通常如果程序发生了错误，就会立即停止运行，并在控制台打印错误信息，但是使用<code>try...catch</code>结构，可以捕获程序错误，而不是导致程序立即死掉</p><p>这里是有两个代码块，首先执行<code>try</code>中的语句，如果没有出现错误，则会忽略<code>catch</code>代码块中的语句，运行到<code>try</code>末尾并跳过<code>catch</code>执行。如果<code>try</code>中出现了错误，则会立即转到<code>catch</code>中，并将错误信息传给<code>err</code>对 象，这个对象包含了发生错误的详细信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 执行代码</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 错误处理</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个没有错误的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="error-对象" tabindex="-1"><a class="header-anchor" href="#error-对象" aria-hidden="true">#</a> Error 对象</h2><p>发生错误时，会生成一个包含有关错误的详细信息的对象，并作为参数传给<code>catch</code></p><p>一般来说，所有的内建错误对象，都会有两个属性：</p><ul><li><code>getMessage()</code>：获取异常信息</li><li><code>pirntStackTrace()</code>：获取异常类名和异常信息，及异常出现的位置</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义-error" tabindex="-1"><a class="header-anchor" href="#自定义-error" aria-hidden="true">#</a> 自定义 error</h2><p>除了内建的错误以外，还允许使用一些错误构造器来创建 error 对象，用于处理自定义的错误，通常可以继承 RuntimeException 来定义运行时异常，继承 Exception 定义编译时异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>let error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
let syntaxError <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
let referenceError <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些内建的错误的<code>name</code>就是构造器的名字</p><h3 id="throw-和-throws" tabindex="-1"><a class="header-anchor" href="#throw-和-throws" aria-hidden="true">#</a> Throw 和 Throws</h3><p><code>throw</code>是一个语句抛出异常，<code>throws</code>是一个方法抛出异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>let foo <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token char">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>foo<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span>&#39;没有定义 age 属性&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>throw</code>主要处理一些“不正确的数据”，如果出现了预料之外的错误，就可能比较麻烦，因为<code>catch</code>会捕获所有的错误，处理的错误可能不是这个类型的，这就很糟糕</p><p><code>catch</code>应该只处理它知道的 error，然后抛出其他 error</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>let foo <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token char">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  aaa<span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>foo<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">(</span>&#39;没有定义的 age 属性&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">SyntaxError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;SyntaxError: &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError: ReferenceError: aaa is not defined</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抛出运行时异常不需要处理，抛出编译时异常必须处理，如果不处理，就必须往上面抛，抛给方法的调用者</p><h2 id="finally" tabindex="-1"><a class="header-anchor" href="#finally" aria-hidden="true">#</a> finally</h2><p><code>try...catch</code>还有一个可选的子句<code>finally</code>，无论何种情况下，这个子句中的代码最后都会执行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 尝试执行的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 发生 error 就执行的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token comment">// 总会执行的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>finally</code>通常用在做某些事情的时候，无论出现什么情况都要完成的某个任务的时候使用</p><p>另外，<code>finally</code>使用于<code>try...catch</code>中的任何出口，包括<code>return</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>function <span class="token function">fc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&#39;<span class="token keyword">finally</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然函数在遇到<code>return</code>时会立即结束执行，但是<code>finally</code>会在结束前先执行</p><p>除此外，也可以使用不需要处理错误的<code>try...finally</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 被尝试运行的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token comment">// 总是被执行的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="全局-catch" tabindex="-1"><a class="header-anchor" href="#全局-catch" aria-hidden="true">#</a> 全局 catch</h2><h2 id="扩展-error" tabindex="-1"><a class="header-anchor" href="#扩展-error" aria-hidden="true">#</a> 扩展 Error</h2><h2 id="无法捕获的错误" tabindex="-1"><a class="header-anchor" href="#无法捕获的错误" aria-hidden="true">#</a> 无法捕获的错误</h2><p>异步调用的错误是无法被捕获的，这和调用栈有关系</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;fail&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><code>try catch</code>用于处理运行时造成的错误</li></ul>`,41);function o(i,l){return s(),e("div",null,[p,n(" to be updated "),n(" to be update ")])}const r=a(c,[["render",o],["__file","error.html.vue"]]);export{r as default};
