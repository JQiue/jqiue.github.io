import{ac as r,A as t,B as o,z as a,M as e,H as n,ae as l,O as p}from"./framework.a879f165.js";const c={},i={href:"https://www.openssl.org/",target:"_blank",rel:"noopener noreferrer"},d=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-newkey</span> rsa:2048 <span class="token parameter variable">-keyout</span> key.pem <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-out</span> cert.pem <span class="token parameter variable">-x509</span> <span class="token parameter variable">-days</span> <span class="token number">365</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在提示通用名 common name 时，输入<code>localhost</code>，以上就生成了 2048 位 RSA 算法的自签名证书 cert.pem，有效期为 365 天，私钥为 key.pem，大部分 SSL 只需要这两个文件。然后可以启动 openssl 自带的服务器来测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl s_server <span class="token parameter variable">-WWW</span> <span class="token parameter variable">-key</span> key.pem <span class="token parameter variable">-cert</span> cert.pem <span class="token parameter variable">-accept</span> <span class="token number">8888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时浏览器访问<code>https://localhost:8888</code>即可进行访问，当然会看到不信任的证书，但只要能够说明证书可以用于本地测试就够了</p>`,4),m={href:"https://gist.github.com/soarez/9688998",target:"_blank",rel:"noopener noreferrer"};function v(b,k){const s=p("ExternalLinkIcon");return t(),o("div",null,[a("p",null,[e("使用 "),a("a",i,[e("openssl"),n(s)]),e(" 可以快速的生成用于本地测试的证书，最常见的情况是自签名证书，openssl 提供了快速的命令")]),d,a("p",null,[e("如果想要解决浏览器该死的不信任，应该到"),a("a",m,[e("这里"),n(s)])])])}const h=r(c,[["render",v],["__file","openssl.html.vue"]]);export{h as default};
