const n=JSON.parse(`{"key":"v-2167e80f","path":"/webapi/event.html","title":"事件","lang":"zh-CN","frontmatter":{"title":"事件","category":["Web"],"article":false,"description":"前置知识 HTML CSS JavaScript DOM 事件是一种用于人机交互和响应程序内部的控制机制，在 JavaScript 中，对象可以响应一些网页交互事件，比如鼠标事件，包括使用鼠标的常见操作：单机和释放、鼠标指针是否在对象上。当这些事件产生后，就可以编写代码对这些事件做出响应的处理，指定为响应事件而应执行的动作叫做事件处理 首先要认识事件发生和处理的三个基本要素，当事件发生时，必然会牵扯到这些要素 事件源：就是触发事件的对象，当一个元素触发了一个事件，这个元素就是事件源 事件类型：一个元素可以触发多个事件，因此必须根据事件的类型进行分别处理 事件响应：当事件触发后，执行的一些响应步骤，一般通过函数来完成，函数包含了响应要执行的步骤 由于不同的事件具有不同的逻辑，所以就产生了事件类型，比如鼠标产生的事件和键盘产生的事件等等，这里是一些常用的事件类型，更多详见MDN 鼠标事件 click：单击并释放后 dblclick：双击 mouseenter：指针移入到元素内 mouseleave：指针移出到元素外 键盘事件 keydown：按下任意键 keyup：释放任意按键 keypress：长按任意键 焦点事件 focus：获得焦点 blur：失去焦点 more... # 事件处理的实现 直接使用 HTML 元素事件特性 &lt;button onclick=\\"alert('单击事件触发了')\\">点击我&lt;/button> HTML 有很多这样直接作用于元素的事件特性on&lt;event&gt;，被触发时会启动对应的 JavaScript 程序，但应该避免这种使用方式，因为不利于维护 HTML 由于 HTML 特性被看作元素节点的属性，只要为这个事件属性定义一个处理函数就可以了 &lt;button>点击我&lt;/button> document.querySelector('button').onclick = function () { alert('单击事件触发了'); }; 这种方式将处理逻辑和 HTML 文档分离，大大提高了维护性，这样便于寻找 BUG 但在现在的技术中更推荐使用addEventListener()方法来为元素添加监听事件，它是一个事件源上的方法，事件源可以是文档上的元素，也可以是window或者任何被支持的事件对象，所以语法通常是这样的：target.addEventListener(eventType, handler, useCapture) target是事件发生的对象 参数eventType是事件类型 参数listener是处理事件的函数 参数useCapture是一个逻辑值，用来确定事件监听是捕获阶段、目标阶段还是冒泡阶段 与前两种方式相比，事件监听的优势在于对同一个事件，可以有多个不同的处理 &lt;button>点击我&lt;/button> &lt;script> function eventHandler() { alert('单击事件触发了'); } document.querySelector('button').addEventListener('click', eventHandler, false); &lt;/script> &lt;button>点击我&lt;/button> function eventHandler() { alert('单击事件触发了'); } document.querySelector('button').addEventListener('click', eventHandler, false); 提示 如果一个元素注册了多个同类型的事件监听，执行顺序是按照代码书写顺序 提示 在事件处理中，this指向绑定事件的 DOM 元素 # 删除事件 对于on&lt;event&gt;这种处理方式，可以直接赋值为null来实现事件的删除 target.onclick = null; 如果是addEventListener方式，则调用removeEventListener(type, handle)方法即可删除对应的事件监听： let mouseClick = function (){}; target.addEventListener('click', mouseClick); target.removeEventListener('click', mouseClick); 提示 必须是同一个函数引用，否则无法删除 # 事件对象 当 DOM 中某个事件被触发时，会同时产生一个描述事件相关信息的对象（触发事件的元素，鼠标的的位置，键盘的状态等等），它通常被当作参数传递给事件处理函数 &lt;body> &lt;button id=\\"btn\\">click&lt;/button> &lt;script> btn.addEventListener('click', event => { console.log(event); }); &lt;/script> &lt;/body> &lt;button >点击我&lt;/button> document.querySelector('button').addEventListener('click', event => { alert('事件类型：' + event.type); }, false); event.type获取的是当前事件的类型，更多event对象的属性和方法详见MDN # 事件流 了解事件流之前先看示范程序，点击不同层次的元素，看看事件是按照什么顺序触发的 &lt;div id=\\"foo\\" onclick=\\"alert('我是 foo')\\"> foo &lt;div id=\\"bar\\" onclick=\\"alert('我是 bar')\\"> bar &lt;div id=\\"qux\\" onclick=\\"alert('我是 qux')\\">qux&lt;/div> &lt;/div> &lt;/div> div { margin: 0 auto; padding: 20px; text-align: center; } #foo { background-color: red; } #bar { background-color: green; } #qux { background-color: pink; } 通过实验得知，鼠标无论点击到了哪一层元素，事件会从该层开始依次向上层触发。DOM 事件模型分为捕获和冒泡，一个事件发生后，会在元素之间进行传播，这种传播分为三个阶段： 捕获阶段：从最顶层（window）开始向下传播到目标元素 目标阶段：真正到达目标元素 冒泡阶段：从目标元素向最顶层传播 事件冒泡是 IE 的事件流，事件由具体的元素开始触发，然后逐级向上传播，而事件捕获是网景公司提出的，和 IE 的事件流正好相反。直到 W3C 发布标准后，浏览应该同时支持两种调用顺序，首先从捕获阶段开始到目标阶段，再由目标阶段到冒泡阶段结束，这就是所谓的先捕获再冒泡 提示 几乎所有的事件都会冒泡，但有些例外，比如focus 冒泡是默认的事件流，但是可以设置addEventListener(eventType, handler, true)第三个参数为true变为捕获阶段 &lt;div id=\\"foo\\"> foo &lt;div id=\\"bar\\"> bar &lt;div id=\\"qux\\">qux&lt;/div> &lt;/div> &lt;/div> let foo = document.querySelector('#foo'); let bar = document.querySelector('#bar'); let qux = document.querySelector('#qux'); foo.addEventListener('click', () => { alert('我是 foo'); }, true); bar.addEventListener('click', () => { alert('我是 bar'); }, true); qux.addEventListener('click', () => { alert('我是 qux'); }, true); div { margin: 0 auto; padding: 20px; text-align: center; } #foo { background-color: red; } #bar { background-color: green; } #qux { background-color: pink; } # 阻止事件 在 HTML 中有些元素默认有些事件，比如&lt;a&gt;标签的跳转和表单的提交按钮跳转，如果想要&lt;a&gt;标签仅仅作为一个普通的按钮，不想进行页面的跳转，也不想进行锚点定位，可以有以下几种方法： &lt;!-- 方法一 --> &lt;a href=\\"javascript:;\\">链接&lt;/a> &lt;!-- 方法二 --> &lt;a href=\\"https://jinqiu.wang\\">链接&lt;/a> &lt;script> document.querySelector('a').onclick = function () { return false; } &lt;/script> &lt;!-- 方法三 --> &lt;a href=\\"https://jinqiu.wang\\">链接&lt;/a> &lt;script> document.querySelector('a').onclick = function (e) { e.preventDefault(); } &lt;/script> e.preventDefault()可以阻止默认事件行为，但不能阻止冒泡 e.stopPropagation()可以阻止事件传播，但不能阻止默认事件行为 e.stopImmediatePropagation()不仅可以阻止事件传播，也能阻止元素同类型事件的其他处理函数触发 对于on&lt;event&gt;这种处理程序只需要返回一个false也能够阻止行为发生，也意味着阻止传播，对于一些其他的处理程序来说，返回false并没有什么意义 有一些事件是可以相互转换的，如果阻止了前一个事件就不会出发第二个时间，比如&lt;input&gt;的mousedown会导致其获得焦点从而触发focus事件，阻止了mousedown就不会触发焦点了 &lt;input type=\\"text\\" value=\\"jinqiu.wang\\" onfocus=\\"this.value=''\\"> &lt;input type=\\"text\\" value=\\"jinqiu.wang\\" onmousedown=\\"return false;\\" onfocus=\\"this.value=''\\"> &lt;p>获得焦点&lt;/p> &lt;input type=\\"text\\" value=\\"jinqiu.wang\\" onfocus=\\"this.value=''\\"> &lt;p>无法获得焦点&lt;/p> &lt;input type=\\"text\\" value=\\"jinqiu.wang\\" onmousedown=\\"return false;\\" onfocus=\\"this.value=''\\"> addEventListener的可选项passive: true可以表示事件处理永远都不会调用preventDefault()，因为它能明显的改善页面的滚动性能，这是因为用户在屏幕上移动会导致页面滚动，preventDefault()正好也能阻止滚动行为，因此一些事件监听在处理滚动时可能会阻止浏览器的主线程，导致 UI 变得卡顿或抖动，一旦设置passive: true就会告诉浏览器永远不会调用preventDefault() 使用_passive_改善的滚屏性能 对于默认行为来说，有一个专门的e.defaultPrevented属性用来表示它，为true时表示已经被阻止，可以用来通知其它事件，表示该事件已经被处理 &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> &lt;script> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); alert('按钮上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { e.preventDefault(); alert('容器级上下文菜单'); } &lt;/script> &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); alert('按钮级上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { e.preventDefault(); alert('容器级上下文菜单'); } 这个示例使用了e.preventDefault()阻止了鼠标右击时响应浏览器上下文菜单的默认事件，但是点击button时会冒泡到上一级，所以得到了两个菜单，临时解决方案是使用e.stopstopPropagation()阻止冒泡 &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> &lt;script> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); // 阻止按钮事件冒泡 e.stopstopPropagation(); alert('按钮上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { e.preventDefault(); alert('容器级上下文菜单'); } &lt;/script> &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); e.stopstopPropagation(); alert('按钮级上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { e.preventDefault(); alert('容器级上下文菜单'); } 这样便解决了对每个元素进行单独响应的逻辑，但是却有一个非常不好的地方，那就是永远的拒绝了使用右键单击的路，代价非常大，因此另一个方案是检查一下document处理程序是否阻止了浏览器的默认行为，如果这个事件得到了处理，无需再次对这个事件进行响应，因此e.defaultPrevented登场了 &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> &lt;script> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); // 阻止按钮事件冒泡 // e.stopstopPropagation(); alert('按钮上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { // 根据默认行为状态来处理 if (e.defaultPrevented) { return; } e.preventDefault(); alert('容器级上下文菜单'); } &lt;/script> &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); alert('按钮级上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { if (e.defaultPrevented) { return; } e.preventDefault(); alert('容器级上下文菜单'); } # 事件委托 事件委托也叫事件代理，指的是目标元素并不处理事件，而是由父元素来处理，利用了事件冒泡机制和事件产生的事件对象来实现。这种方式减少了事件注册，节省了大量的内存，还可以为新增的子元素实现动态的事件绑定 &lt;body> &lt;div id=\\"father\\"> &lt;h1>子元素 1&lt;/h1> &lt;p>子元素 2&lt;/p> &lt;span>子元素 3&lt;/span> &lt;/div> &lt;script> father.addEventListener('click', event => { if (event.target.nodeName === 'H1'){ console.log('子元素1'); } if (event.target.nodeName === 'P'){ console.log('子元素2'); } if (event.target.nodeName === 'SPAN'){ console.log('子元素3'); } }); &lt;/script> &lt;/body> &lt;div> &lt;h1>子元素1&lt;/h1> &lt;p>子元素2&lt;/p> &lt;span>子元素3&lt;/span> &lt;/div> document.querySelector('div').addEventListener('click', event => { if (event.target.nodeName === 'H1'){ alert('子元素1'); } if (event.target.nodeName === 'P'){ alert('子元素2'); } if (event.target.nodeName === 'SPAN'){ alert('子元素3'); } }); event.target会返会目标的元素节点对象，可以通过判断该对象的nodeName或class来做一些事件处理 警告 事件委托应该看情况使用，不是所有的事件都应该委托，否则会产生事件误判的问题，本不应该触发的事件却被触发了 &lt;ul class=\\"tree\\" id=\\"tree\\"> &lt;li>&lt;span>一&lt;/span> &lt;ul> &lt;li>&lt;span>1&lt;/span> &lt;ul> &lt;li>(1)&lt;/li> &lt;li>(2)&lt;/li> &lt;li>(3)&lt;/li> &lt;li>(4)&lt;/li> &lt;/ul> &lt;/li> &lt;li>&lt;span>2&lt;/span> &lt;ul> &lt;li>(1)&lt;/li> &lt;li>(2)&lt;/li> &lt;li>(3)&lt;/li> &lt;/ul> &lt;/li> &lt;/ul> &lt;/li> &lt;li>&lt;span>二&lt;/span> &lt;ul> &lt;li>&lt;span>1&lt;/span> &lt;ul> &lt;li>(1)&lt;/li> &lt;li>(2)&lt;/li> &lt;/ul> &lt;/li> &lt;li>&lt;span>2&lt;/span> &lt;ul> &lt;li>(1)&lt;/li> &lt;/ul> &lt;/li> &lt;/ul> &lt;/li> &lt;/ul> let tree = document.querySelector('#tree'); tree.addEventListener('click', event => { if(event.target.nodeName === 'SPAN') { event.target.nextElementSibling.hidden = !event.target.nextElementSibling.hidden; } }); .tree span:hover { color: red; cursor: pointer; font-weight: 600; } # 事件构造器 HTML 中不仅提供了很多内建事件，还提供了一个事件构造器Event(type, otiions)来生成用于自身目的而创建的全新事件，也可以生成click这种内置的事件，它有两个参数： type：事件类型，可以是click这样的字符串，也可以是自己定义的myclick options：有两个可选属性的对象，bubbles: true/false，为true时会冒泡，cancelable: true/false，为true时会阻止默认行为。默认情况下两者都为false let event = new Event('hello'); 自定义事件必须通过elem.dispatchEvent(event)来调用，换句话说，这个方法是唯一能够触发自定义事件的办法 let event = new Event('hello'); elem.dispatchEvent(event); 对于自定义事件，应该使用addEventListener来处理它，而不是on&lt;event&gt; // 监听 hello 事件 elem.addEventListener('hello', event => { console.log('hello'); }) // 构造自定义事件 hello let event = new Event('hello'); // 触发自定义事件 elem.dispatchEvent(event); # 自定义事件 对于全新的事件类型应该使用CustomEvent，它和Event没什么太多的不同，只有一点不一样，第二参数额外多了一个属性detail，这个属性可以传递任何自定义的信息 &lt;body> &lt;button id=\\"btn\\">点击我&lt;/button> &lt;script> btn.addEventListener('foo', event => { console.log(event.detail); // {name: \\"foo\\"} }); btn.dispatchEvent(new CustomEvent('foo', { detail: { name: 'foo' } })); &lt;/script> &lt;/body> # 事件的同步处理 事件是在队列中进行处理的，如果在一个事件处理过程中又触发了一个事件，那么它的处理程序会被排入队列中等待前一个事件处理完成 &lt;button id=\\"btn\\">点击我&lt;/button> &lt;script> btn.onclick = function() { alert(1); btn.dispatchEvent(new CustomEvent('btn-click')); alert(2); }; btn.addEventListener('btn-click', () => alert('btn-click handler')); &lt;/script> &lt;button>点击我&lt;/button> let button = document.querySelector('button'); button.onclick = function() { alert(1); button.dispatchEvent(new CustomEvent('button-click')); alert(2); }; // 在 1 和 2 之间触发 button.addEventListener('button-click', () => alert('button-click handler')); 如果在某些情况下，这个事件是可以冒泡的，那么它将广播到document上，沿途触发的事件同样会被同步的方式处理，这可能不是想要的结果，最好优先处理自己的事件，只要将这个事件移动到优先处理的事件后面或者将它变成异步的事件来解决它 &lt;button>点击我&lt;/button> &lt;script> let button = document.querySelector('button'); button.onclick = function() { alert(1); // 异步触发 setTimeout(() => button.dispatchEvent(new CustomEvent(\\"button-click\\", { bubbles: true }))); alert(2); }; button.addEventListener('button-click', () => alert('button-click handler')); &lt;/script> &lt;button>点击我&lt;/button> let button = document.querySelector('button'); button.onclick = function() { alert(1); setTimeout(() => button.dispatchEvent(new CustomEvent(\\"button-click\\", { bubbles: true }))); alert(2); }; button.addEventListener('button-click', () => alert('button-click handler')); # 防抖和节流 由于用户和界面交互的太平凡，如果每一次发生的事件都要执行，就会造成性能下降，比如点了两下按钮，实际上这是误触，对应的处理函数不应该触发两次，防抖和节流就是应运而生的两种方案 防抖指事件发生的一定时间段只触发一次处理函数，一旦在一定的时间段内触发，则会重新计算时间再触发处理函数 节流指的是连续触发事件但是在 n 秒中只执行一次函数 下面是使用mousemove的例子，当鼠标在上面移动时数字会增加，第一个没有进行处理，第二个使用防抖处理，第三个使用节流处理 &lt;div class=\\"box\\">0&lt;/div> &lt;div class=\\"box\\">0&lt;/div> &lt;div class=\\"box\\">0&lt;/div> .box { display: inline-block; width: 200px; height: 150px; background-color: #666; text-align: center; line-height: 150px; color: #fff; font-size: 20px; } let divs = document.querySelectorAll('.box'); divs[0].addEventListener('mousemove', event => { divs[0].textContent = Number(divs[0].textContent) + 1; }); // 防抖 function debounce(func, delay) { let timeout; return function (args) { if (timeout) clearTimeout(timeout); let flag = !timeout; timeout = setTimeout(() => timeout = null, delay); if (flag) func.apply(this, args); } } // 节流 function throttle(func, delay) { let timeout; return function (args) { if (!timeout) { timeout = setTimeout(() => { timeout = null; func.apply(this, args); }, delay); } } } let debounceHandle = debounce(() => divs[1].textContent = Number(divs[1].textContent) + 1, 500); divs[1].addEventListener('mousemove', event => { debounceHandle(); }); let throttleHandle = throttle(() => divs[2].textContent = Number(divs[2].textContent) + 1, 500); divs[2].addEventListener('mousemove', event => { throttleHandle(); }); 防抖和节流都是通过减少实际处理函数的执行来提高性能的手段，但并没有实质的减少事件的触发次数 先来看防抖函数的实现思路，将一个需要进行防抖的操作放到函数中执行，使用防抖函数进行装饰并返回装饰后的函数，在内部定义一个变量记录定时器的返回值，此时已经产生了闭包，该变量永远存在，通过对定时器的返回值进行判断，标记一个可用来执行实际操作函数的变量，便是基本的实现思路，该函数是一个立即执行的防抖函数 function debounce(func, delay) { let timeout; return function (args) { // 如果有返回值就清除该定时器，重新计时，让 timeout 不为 null if (timeout) clearTimeout(timeout); // 标记，关系着实际操作的运行 let flag = !timeout; // 在一定 delay 时间后，将 timeout 赋值为 null timeout = setTimeout(() => timeout = null, delay); // 一旦 timeout 判断为 false 时，flag 一定为 true，此时开始执行实际操作 if (flag) func.apply(this, args); } } 再来看节流函数的实现思路，依然是装饰器加闭包的定时器原理来实现 function throttle(func, delay) { let timeout; return function (args) { // 如果 timeout 取反判断为 true，则执行一次实际操作 if (!timeout) { timeout = setTimeout(() => { // 在一定 delay 时间设置 timeout 为 null，让下一次事件触发实际操作 timeout = null; func.apply(this, args); }, delay); } } } # 鼠标事件 鼠标左键被按下时，会首先触发mosedown，左键被释放后，会触发mouseup和click，在单个动作触发多个事件时，事件的顺序是固定的 与点击相关的事件都会有button属性，这个属性允许获得确切的鼠标按钮，通常不在click和contextmenu事件中使用这个属性，因为它们分别只能被鼠标左键和右键所触发 只有在mousedown和mouseup事件中才会用到这个属性，因为这两个事件会在任何按键上触发，对于event.button的值可能如下： 按键状态 event.button 左键 0 中键 1 右键 2 后退键 3 前进键 4 提示 大多数鼠标只有左键和右键 &lt;button>点击我&lt;/button> let button = document.querySelector('button'); button.addEventListener('click', event => { alert(event.button); }); button.addEventListener('mousedown', event => { alert(event.button); }); button.addEventListener('mouseup', event => { alert(event.button); }); 甚至，所有的鼠标事件都包含按下的组合键的信息： shiftKey：Shift 键 altKey：Alt 键 ctrlKey：Ctrl 键 metaKey：Win 键 如果在鼠标事件期间按下了对应的键，则它的值为true，比如下面的示例中，按下三个键（Ctrl，Shift，Alt）才会触发弹框 &lt;button>点击我&lt;/button> let button = document.querySelector('button'); button.addEventListener('click', event => { if(event.shiftKey &amp; event.ctrlKey &amp; event.altKey) { alert('三键合璧，天下无敌'); } }); 所有的鼠标事件对象都提供了两种形式的坐标： 相对于窗口：clienX和clienY 相对于文档：pageX和pageY 相对于元素：offsetX和offsetY 相对于屏幕：screenX和screenY &lt;input onmousemove=\\"this.value=event.clientX + ', ' + event.clientY\\" value=\\"移动鼠标测试坐标\\"> 有时候双击鼠标会有一些副作用，可能会出现选择文本的干扰 &lt;div ondblclick=\\"alert('double click')\\">双击我&lt;/div> 甚至有时按下不松开并移动鼠标也会造成文本选择的干扰，为了避免这些情况，最合理的方法是在mousedown上进行处理 &lt;div ondblclick=\\"alert('double click')\\" onmousedown=\\"return false\\">双击我&lt;/div> 这里虽然解决了问题，但是文本却无法被选中了，其实并不是无法选中，而是要在文本本身以外的地方开始选中，从文本本身开始选中时自然会失效 如果想要保护页面的内容不被复制，可以使用copy事件来处理，对于开发者来说，肯定是可以打开调试工具来访问源码进行复制，但是大多数人是不知道的 &lt;div oncopy=\\"alert('当然，你是不可能复制成功的');return false\\">这里的内容是被禁止复制的&lt;/div> 当鼠标从元素身上移动时就会触发对应的移动事件，移动到某个元素上时就会触发mouseover，而离开某个元素时就会触发mouseout 这些事件都有一个特殊的relatedTarget属性，这是对target的补充。当从一个元素是上离开到另一个元素时，其中一个元素就是target，另一个就变成了relatedTarget，对于mouseover和mouseout来说，target和relatedTarget是互相相反的 提示 relatedTarget的取值是可能为null的，不一定总是页面上的某个元素的引用，鼠标如果来自窗口外，或者离开了窗口，就会产生这种现象，因此对于relatedTarget要记住这个特性，以免发生错误 mousemove用来响应鼠标移动的事件，浏览器会一直检查鼠标的位置，如果发现了变化，就会触发mousemove，但是这并不意味着每一个像素变化都会触发，如果在非常快速地情况下移动鼠标，某些元素就很有可能被跳过，这对性能有很大的好处，并不需要在每个元素上处理进入和离开的过程 还有一个特别重要的特性就是，快速移动鼠标的情况下，元素可能被忽略掉，如果正式的进入了一个元素产生了mouseover，那么必然会产生一个mouseout 还有一个触发mouseout的地方就是出现在嵌套元素的身上，当鼠标从元素移动到后代时就会触发，其实指针并没有移出元素之外，但是在后代元素上触发了这个事件 这是因为浏览器的逻辑是，指针随时都可以位于单个元素上，如果是嵌套元素就一定是z-index最大的那个，因此移动到另一个后代元素，代表着离开了当前元素 此外，还有一个非常重要的细节，后代的mouseover会冒泡，因此父级元素如果有mouseover处理程序也会被触发，这可能不是一个好现象，因为指针仍然在父元素内，只不过更深入了而已 mouseenter/mouseleave和mouseover/mouseout相同，但是它们有一些重要的区别： 元素内部与后代之间的转换不会受到影响 不会冒泡 这非常好，只有进入一个元素时才会触发mouseenter，而鼠标在当前元素以及后代中的位置并不重要，只有当真正移出元素范围时才触发mouseenter，但是它们无法作用于事件委托，这也是一个不好的方面 这是使用mouseover/mouseout进行事件委托的表格高亮示例 &lt;table> &lt;tr> &lt;td>1&lt;/td> &lt;td>2&lt;/td> &lt;/tr> &lt;tr> &lt;td>3&lt;/td> &lt;td>4&lt;/td> &lt;/tr> &lt;/table> let table = document.querySelector('table'); table.onmouseover = function (e) { console.log(e.target); e.target.style.background = 'pink'; } table.onmouseout = function (e) { e.target.style.background = ''; } table td { border: 1px solid #000; width: 150px; text-align: center; cursor: pointer; } # 键盘事件 需要处理键盘行为时，就应该使用键盘事件，当按下时会触发keydown事件，而当释放按键时触发keyup事件 对于键盘事件对象来说，可以通过key来获取字符，而code属性允许获取物理上的按键代码 &lt;p>key：&lt;br>code：&lt;/p> &lt;input type=\\"text\\"> document.querySelector('input').onkeydown = function (e) { document.querySelector('p').textContent = 'key：' + e.key + '，code：' + e.code; } 如果使用不同的语言，只会导致key的值不一样，而code则始终是一样的，如果某些键没有产生字符，则key和code大致是一样的 对于一个按键如果按下足够长的时间，会一直触发keydown，然后释放时才转到keyup，对于重复触发的事件来说，事件对象的repeat将被设置为true 键盘可能会触发一些不可控的变数，比如Ctrl+S会保存网页，但是阻止keydown便能阻止它，因此可以阻止大多数键盘的行为，除了少数按键以外，比如Alt+F4，在 Windows 上用来关闭窗口 # 滚动事件 scroll事件能够对页面或元素的滚动作出反应，这是一个示例： &lt;p>当前窗口已滚动的像素：&lt;span>0 px&lt;/span>&lt;/p> window.onscroll = function(e) { document.querySelector('span').textContent = window.pageYOffset + 'px'; } 不能在scroll事件中使用e.preventDefault()来阻止滚动，启动滚动的方法有很多种，但是使用 CSS 的overflow会更加可靠一些 滚动有以下应用场景： 无限的页面 “到顶部”以及“到底部”的按钮 按需加载图像 # 表单事件 表单和一些其它的控件元素有很多特殊的事件，对于文档中的表单来说，它们是document.forms的成员，因此可以使用这种方式来获取文档上的表单，且当有了表单后，其中的任何元素都可以使用form.elements来获取 &lt;form name=\\"foo\\"> &lt;input type=\\"text\\" name=\\"one\\"> &lt;/form> &lt;script> let foo = document.forms.foo; let input = foo.elements.one; &lt;/script> 值得一提的是，当为表单或其中的控件元素添加name特性后，便可以在forms和elements中直接使用name对应的值作为属性来引用，而不必使用一些其它的方法来定位元素 当然也可能会出现名字相同的元素，比如在单选按钮中，在这种情况下，elements.name将是一个集合 &lt;form name=\\"foo\\"> &lt;input type=\\"radio\\" name=\\"gender\\"> &lt;input type=\\"radio\\" name=\\"gender\\"> &lt;/form> &lt;script> let foo = document.forms.foo; let inputs = foo.elements.gender; console.log(inputs); // RadioNodeList(2) &lt;/script> 甚至可以通过更短的方式来访问元素，直接将form.elements.name写成form.name是等效的 &lt;form name=\\"foo\\"> &lt;input type=\\"text\\" name=\\"one\\"> &lt;/form> &lt;script> let foo = document.forms.foo; console.log(foo.elements.one == foo.one); // true &lt;/script> 每一个对应的元素都可以反向的引用其对应的表单，使用form属性 &lt;form name=\\"foo\\"> &lt;input type=\\"text\\" name=\\"one\\"> &lt;/form> &lt;script> let foo = document.forms.foo; let one = foo.one; // 反向引用 console.log(one.form == foo); // true &lt;/script> 对于&lt;input&gt;来说，访问不同的type的value有所不同： type = text：value type = radio：checked（布尔值） 对于&lt;textarea&gt;也是使用value来访问 对于&lt;select&gt;来说有三个重要的属性： options：所有的&lt;option&gt;的集合 value：当前所选择的&lt;option&gt;的value selectedIndex：当前所选择的&lt;option&gt;索引编号 其中有三种方式来设置value： 将对应&lt;opition&gt;元素的selected设为true 将&lt;select&gt;的value设置为对应&lt;option&gt;的value 将&lt;select&gt;的selectedIndex设置对应&lt;option&gt;的索引编号 当点击某个元素或使用键盘上的Tab选中时，该元素会获得聚焦，在 HTML 中有一个autofocus特性会让网页在加载完成后默认的聚焦到元素上，聚焦意味着一个元素可以接受数据，当失去焦点的时候意味着数据已经输入完毕 当元素聚焦时会触发focus事件，当失去焦点时会触发blur事件 &lt;p>没有任何元素获得焦点&lt;/p> &lt;input type=\\"text\\"> document.querySelector('input').onfocus = function (e) { document.querySelector('p').textContent = '获得焦点' }; document.querySelector('input').onblur = function (e) { document.querySelector('p').textContent = '失去焦点' }; 焦点也会有丢失现象发生，比如alert会将焦点移到自己身上，那么另一个已经获得焦点的元素将失去焦点并触发blur，或者一个元素从 DOM 中移除，也会导致焦点丢失 大多数元素并不支持聚焦，因为它们本身并不需要接受数据，但是 HTML 特性tabindex可以适用到这些不支持focus/blur的元素身上，任何具有tabindex的元素都会变成可聚焦的： tabindex接收一个负值，表示是可聚焦的，但不能通过键盘导航来访问该元素 tabindex接收0，表示是可聚焦的，可以通过键盘导航来访问该元素，但是顺序是与当前处于文档中的顺序来决定的 tabindex接收一个正值，表示是可聚焦的，可以通过键盘导航来访问该元素，但是它的访问顺序是按照tabindex的数值递增来决定获得焦点的顺序，如果拥有相同的数值，则按照在文档中的顺序来决定 &lt;div tabindex=\\"1\\">1&lt;/div> &lt;div tabindex=\\"0\\">0&lt;/div> &lt;div tabindex=\\"2\\">2&lt;/div> &lt;div tabindex=\\"-1\\">-1&lt;/div> div { cursor: pointer; } :focus { outline: 1px dashed red; } focus/blur不支持事件冒泡，但是支持事件捕获，如果一定需要冒泡的需求，可以使用focusin/foucusout事件，它们和focus/blur完全一样，但是只能使用addaddEventListener处理 另外，可以使用document.activeElement来获取当前聚焦元素 在进行表单提交时，会触发submit事件，提交表单有两种方式： 在&lt;input&gt;中按下Enter 点击&lt;input type=&quot;submit&quot;&gt;或&lt;input type=&quot;image&quot;&gt; &lt;form name=\\"foo\\"> &lt;input type=\\"text\\"> &lt;input type=\\"image\\"> &lt;input type=\\"submit\\" value=\\"提交\\"> &lt;/form> document.querySelector('form').onsubmit = function (e) { alert('submit 触发了'); return false; }; 在submit中使用return false会阻止表单发送，有趣的是使用Enter发送表单时，会触发&lt;input type=&quot;submit&gt;一次click事件，真很有趣 如果要手动将表单提交到服务器，可以调用form.submit方法，它不会产生submit事件，会向form.action的值所指向的服务器进行form.method方式提交 # 数据更新事件 对于元素来说，产生的更改也会触发相应的事件 change input change事件可以在&lt;input&gt;失去焦点后触发，但是数据状态必须已经发生改变 &lt;input type=\\"text\\" onchange=\\"alert(this.value)\\"> 对于&lt;select&gt;，以及&lt;input&gt;的type为checkbox/radio时，会在选项更改后立即触发 还有一个input事件只要监测到数据改变了就会触发，无论是键盘上的数据，还是鼠标粘贴等改变数据的操作，如果想要处理输入值的每次更改，这个事件是最好的选择，另外，该事件不会在不涉及值更改的输入上触发，比如方向键 # 剪切板事件 剪切板是界面中最常用的操作之一，IE 是最早支持的，随着 HTML5 到来，剪切板事件已经纳入了标准 剪切板事件是当发生复制/粘贴/剪切操作时触发的事件，分别是copy，paste，cut &lt;input type=\\"text\\" oncopy=\\"alert(event.type)\\" onpaste=\\"alert(event.type)\\" oncut=\\"alert(event.type)\\"> 如果想要访问剪切板上的数据，可以使用ClipboardEvent类的方法，比如event.clipboardData.getData('text/plain')用于获取对应的数据 &lt;input type=\\"text\\" onpaste=\\"alert(event.type + ':' + event.clipboardData.getData('text/plain'))\\"> event.clipboardData可以读写剪切板中的数据，但是在规范中有很多方法可以用于不同的数据类型，而不仅仅是文本 要访问剪切板中的数据，可以通过 clipboard 对象，它由 navigator.clipboard 返回，所有的操作都通过这个对象进行 由于用户可能会将敏感数据放在剪切板，涉及到浏览器外的操作系统，所以这个 API 的安全限制比较多，调用的时候必须明确获得用户的许可，“写入权限”会自动授予，但是“读取权限”必须被明确授予，也就是说在进行读取操作的时候，浏览器会弹一个对话框询问用户是否同意 clipboard 提供了四个方法用于读写剪切板，他们都是异步方法，返回 promise 对象 readText() 用于读取剪切板中的文本信息 navigator.clipboard.readText(); read() 读取剪切板中的数据，可以是文本也可以是二进制 navigator.clipboard.read(); # 文档事件 HTML 有三个非常重要的生命周期事件： DOMContentLoaded：已经完全加载了 HTML，并构建了 DOM 树，但是图像、样式表之类的外部资源可能没有加载完成 load：不仅加载完了 HTML，还加载完了所有的外部资源 beforeunload/unload：当用户离开页面时 DOMContentLoaded事件发生在document身上，必须使用addEventListener来处理它，DOMContentLoaded可以在文档加载完毕后触发，所以在这里可以访问任何元素，包括&lt;img&gt;，但是它不会等待图片加载，此时无法访问图片的大小 如果文档在加载的时候遇到了&lt;script&gt;，就会等待这个脚本执行完成后继续加载，因为脚本可能需要修改 DOM，所以DOMContentLoaded会等待它执行结束，这说明脚本会堵塞文档的加载 虽然DOMContentLoaded不会等待外部样式表，但是如果样式表后有一个脚本，那么脚本会等待样式表加载完成，同时 HTML 在等待脚本以及前面的样式表加载完成，因为脚本可能会访问一些样式相关的属性，这导致脚本必须等待 当整个页面的资源被加载完成后，包括图片，外部样式等，才会触发window上的load事件，如果绑定到元素上会在元素加载完成后触发，window.onload始终是最后触发的 当离开了这个页面就会触发unload，通常用来关闭页面的时候去做些什么事情，比如发送一些数据，但是由于页面已经被卸载，所有就无法接收响应，同时一些弹框方法也是失效的，但是如果在这里处理一些同步的的操作就会导致关闭会有延迟，而beforeunload则可以在页面离开前提示用户是否确定离开，相比unload多了一个确认的步骤，beforeunload会阻止unload事件的执行，并且优先执行 如果想在页面关闭时发送数据，可以使用navigator.sendBeacon(url, data)方法，它会在后台发送数据，即使离开了页面也不会影响它的执行，请求方式是 POST，通常可以发送一些字符串化的对象 对于文档的加载状态是有迹可循的，document.readyState反映了文档的加载状态： loading：正在加载中 interactive：文档已经加载完成 complete：文档中的所有资源均加载完成 还有一个readystatechange事件，会在状态改变时触发 console.log(document.readyState); // 'loading' document.addEventListener('readystatechange', function (e) { console.log(document.readyState); // 'interactive' ,,, 'complete' }) # 加载脚本 现在的脚本往往比 HTML 本身更大，处理的时间更加久，上面说过脚本会堵塞页面的加载，对于外部的脚本来说也是如此，必须等待下载完，并执行结束后才能继续加载文档，这会导致一些问题： 脚本不能访问身后的文档元素 如果有一个非常笨重的脚本，会严重的堵塞页面的加载，造成体验问题 对于这种问题的解决办法是将脚本置于文档底部，这时就可以处理页面上的元素，而且不会堵塞页面 &lt;body> &lt;!-- 所有的文档内容 --> &lt;!-- ...... --> &lt;script>&lt;/script> &lt;/body> 但这不是最完美的，如果文档非常长，脚本被延后到最后处理，会产生明显的延迟，对于网速较快的人来说感知不明显，但是对于慢网速的人来说就有点难受 但是script有两个特性可以解决这个问题： defer：告诉浏览器不需要等待脚本，继续处理文档，脚本会在旁边自动下载，等待文档处理完成后才会执行，并且保持相对顺序的依次执行，这对于需要依赖的脚本有用 async：告诉浏览器不需要等待脚本，继续处理文档，但是async脚本之间没有顺序可言，当下载完后就立即执行了，是一个完全独立运行的脚本 DOMContentLoaded事件会在defer脚本全部执行完后，才会触发，对于async脚本来说，它可能先触发也可能后触发 提示 defer仅适用于具有src属性的外部脚本，否则就会忽略defer 除此之外有一个动态添加脚本的方式，就是使用 JavaScript 动态的创建一个脚本，并追加到文档中，当被追加到文档后就会立即执行，此时这个脚本： 是异步的，不会等待其它东西，也不会有东西等待它 先加载完成的脚本先执行 let script = document.createElement('script'); script.src = 'jinqiu.wang/foo.js'; document.body.append(script); 对于这种脚本的创建方式，必须等到加载完成后才能调用其中的函数，但是还好load事件能够帮助我们，它会在脚本加载完成后触发，因此可以使用脚本中的变量、函数等等 如果一个脚本加载失败了，会触发一个error事件，对于失败信息无法获取更多，只能通过这种方式知道脚本加载失败了 load和eroor事件也适用于其它具有src属性的外部资源 提示 对于&lt;img&gt;来说，必须获得src才能够被开始加载，而&lt;ifrma&gt;不管加载成功还是失败都会触发load事件 # 触摸事件 # 全屏 如果想要以全屏的方式展示一个元素，可以调用elem.requestFullscreen()方法，同样使用document.exitFullscreen()来退出全屏，对于用户来说也可以使用自己的方式来退出（F11 或 ESC） 全屏和退出全屏都会触发一次fullscreenchange事件 document.fullscreenElement可以获取全屏元素，以此来判断是否为全屏状态 提示 无法在网页加载后立即进入全屏状态，必须在事件处理中调用 # 页面可见 # 服务端事件 https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events","head":[["meta",{"property":"og:url","content":"https://jqiue.github.io/webapi/event.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"事件"}],["meta",{"property":"og:description","content":"前置知识 HTML CSS JavaScript DOM 事件是一种用于人机交互和响应程序内部的控制机制，在 JavaScript 中，对象可以响应一些网页交互事件，比如鼠标事件，包括使用鼠标的常见操作：单机和释放、鼠标指针是否在对象上。当这些事件产生后，就可以编写代码对这些事件做出响应的处理，指定为响应事件而应执行的动作叫做事件处理 首先要认识事件发生和处理的三个基本要素，当事件发生时，必然会牵扯到这些要素 事件源：就是触发事件的对象，当一个元素触发了一个事件，这个元素就是事件源 事件类型：一个元素可以触发多个事件，因此必须根据事件的类型进行分别处理 事件响应：当事件触发后，执行的一些响应步骤，一般通过函数来完成，函数包含了响应要执行的步骤 由于不同的事件具有不同的逻辑，所以就产生了事件类型，比如鼠标产生的事件和键盘产生的事件等等，这里是一些常用的事件类型，更多详见MDN 鼠标事件 click：单击并释放后 dblclick：双击 mouseenter：指针移入到元素内 mouseleave：指针移出到元素外 键盘事件 keydown：按下任意键 keyup：释放任意按键 keypress：长按任意键 焦点事件 focus：获得焦点 blur：失去焦点 more... # 事件处理的实现 直接使用 HTML 元素事件特性 &lt;button onclick=\\"alert('单击事件触发了')\\">点击我&lt;/button> HTML 有很多这样直接作用于元素的事件特性on&lt;event&gt;，被触发时会启动对应的 JavaScript 程序，但应该避免这种使用方式，因为不利于维护 HTML 由于 HTML 特性被看作元素节点的属性，只要为这个事件属性定义一个处理函数就可以了 &lt;button>点击我&lt;/button> document.querySelector('button').onclick = function () { alert('单击事件触发了'); }; 这种方式将处理逻辑和 HTML 文档分离，大大提高了维护性，这样便于寻找 BUG 但在现在的技术中更推荐使用addEventListener()方法来为元素添加监听事件，它是一个事件源上的方法，事件源可以是文档上的元素，也可以是window或者任何被支持的事件对象，所以语法通常是这样的：target.addEventListener(eventType, handler, useCapture) target是事件发生的对象 参数eventType是事件类型 参数listener是处理事件的函数 参数useCapture是一个逻辑值，用来确定事件监听是捕获阶段、目标阶段还是冒泡阶段 与前两种方式相比，事件监听的优势在于对同一个事件，可以有多个不同的处理 &lt;button>点击我&lt;/button> &lt;script> function eventHandler() { alert('单击事件触发了'); } document.querySelector('button').addEventListener('click', eventHandler, false); &lt;/script> &lt;button>点击我&lt;/button> function eventHandler() { alert('单击事件触发了'); } document.querySelector('button').addEventListener('click', eventHandler, false); 提示 如果一个元素注册了多个同类型的事件监听，执行顺序是按照代码书写顺序 提示 在事件处理中，this指向绑定事件的 DOM 元素 # 删除事件 对于on&lt;event&gt;这种处理方式，可以直接赋值为null来实现事件的删除 target.onclick = null; 如果是addEventListener方式，则调用removeEventListener(type, handle)方法即可删除对应的事件监听： let mouseClick = function (){}; target.addEventListener('click', mouseClick); target.removeEventListener('click', mouseClick); 提示 必须是同一个函数引用，否则无法删除 # 事件对象 当 DOM 中某个事件被触发时，会同时产生一个描述事件相关信息的对象（触发事件的元素，鼠标的的位置，键盘的状态等等），它通常被当作参数传递给事件处理函数 &lt;body> &lt;button id=\\"btn\\">click&lt;/button> &lt;script> btn.addEventListener('click', event => { console.log(event); }); &lt;/script> &lt;/body> &lt;button >点击我&lt;/button> document.querySelector('button').addEventListener('click', event => { alert('事件类型：' + event.type); }, false); event.type获取的是当前事件的类型，更多event对象的属性和方法详见MDN # 事件流 了解事件流之前先看示范程序，点击不同层次的元素，看看事件是按照什么顺序触发的 &lt;div id=\\"foo\\" onclick=\\"alert('我是 foo')\\"> foo &lt;div id=\\"bar\\" onclick=\\"alert('我是 bar')\\"> bar &lt;div id=\\"qux\\" onclick=\\"alert('我是 qux')\\">qux&lt;/div> &lt;/div> &lt;/div> div { margin: 0 auto; padding: 20px; text-align: center; } #foo { background-color: red; } #bar { background-color: green; } #qux { background-color: pink; } 通过实验得知，鼠标无论点击到了哪一层元素，事件会从该层开始依次向上层触发。DOM 事件模型分为捕获和冒泡，一个事件发生后，会在元素之间进行传播，这种传播分为三个阶段： 捕获阶段：从最顶层（window）开始向下传播到目标元素 目标阶段：真正到达目标元素 冒泡阶段：从目标元素向最顶层传播 事件冒泡是 IE 的事件流，事件由具体的元素开始触发，然后逐级向上传播，而事件捕获是网景公司提出的，和 IE 的事件流正好相反。直到 W3C 发布标准后，浏览应该同时支持两种调用顺序，首先从捕获阶段开始到目标阶段，再由目标阶段到冒泡阶段结束，这就是所谓的先捕获再冒泡 提示 几乎所有的事件都会冒泡，但有些例外，比如focus 冒泡是默认的事件流，但是可以设置addEventListener(eventType, handler, true)第三个参数为true变为捕获阶段 &lt;div id=\\"foo\\"> foo &lt;div id=\\"bar\\"> bar &lt;div id=\\"qux\\">qux&lt;/div> &lt;/div> &lt;/div> let foo = document.querySelector('#foo'); let bar = document.querySelector('#bar'); let qux = document.querySelector('#qux'); foo.addEventListener('click', () => { alert('我是 foo'); }, true); bar.addEventListener('click', () => { alert('我是 bar'); }, true); qux.addEventListener('click', () => { alert('我是 qux'); }, true); div { margin: 0 auto; padding: 20px; text-align: center; } #foo { background-color: red; } #bar { background-color: green; } #qux { background-color: pink; } # 阻止事件 在 HTML 中有些元素默认有些事件，比如&lt;a&gt;标签的跳转和表单的提交按钮跳转，如果想要&lt;a&gt;标签仅仅作为一个普通的按钮，不想进行页面的跳转，也不想进行锚点定位，可以有以下几种方法： &lt;!-- 方法一 --> &lt;a href=\\"javascript:;\\">链接&lt;/a> &lt;!-- 方法二 --> &lt;a href=\\"https://jinqiu.wang\\">链接&lt;/a> &lt;script> document.querySelector('a').onclick = function () { return false; } &lt;/script> &lt;!-- 方法三 --> &lt;a href=\\"https://jinqiu.wang\\">链接&lt;/a> &lt;script> document.querySelector('a').onclick = function (e) { e.preventDefault(); } &lt;/script> e.preventDefault()可以阻止默认事件行为，但不能阻止冒泡 e.stopPropagation()可以阻止事件传播，但不能阻止默认事件行为 e.stopImmediatePropagation()不仅可以阻止事件传播，也能阻止元素同类型事件的其他处理函数触发 对于on&lt;event&gt;这种处理程序只需要返回一个false也能够阻止行为发生，也意味着阻止传播，对于一些其他的处理程序来说，返回false并没有什么意义 有一些事件是可以相互转换的，如果阻止了前一个事件就不会出发第二个时间，比如&lt;input&gt;的mousedown会导致其获得焦点从而触发focus事件，阻止了mousedown就不会触发焦点了 &lt;input type=\\"text\\" value=\\"jinqiu.wang\\" onfocus=\\"this.value=''\\"> &lt;input type=\\"text\\" value=\\"jinqiu.wang\\" onmousedown=\\"return false;\\" onfocus=\\"this.value=''\\"> &lt;p>获得焦点&lt;/p> &lt;input type=\\"text\\" value=\\"jinqiu.wang\\" onfocus=\\"this.value=''\\"> &lt;p>无法获得焦点&lt;/p> &lt;input type=\\"text\\" value=\\"jinqiu.wang\\" onmousedown=\\"return false;\\" onfocus=\\"this.value=''\\"> addEventListener的可选项passive: true可以表示事件处理永远都不会调用preventDefault()，因为它能明显的改善页面的滚动性能，这是因为用户在屏幕上移动会导致页面滚动，preventDefault()正好也能阻止滚动行为，因此一些事件监听在处理滚动时可能会阻止浏览器的主线程，导致 UI 变得卡顿或抖动，一旦设置passive: true就会告诉浏览器永远不会调用preventDefault() 使用_passive_改善的滚屏性能 对于默认行为来说，有一个专门的e.defaultPrevented属性用来表示它，为true时表示已经被阻止，可以用来通知其它事件，表示该事件已经被处理 &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> &lt;script> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); alert('按钮上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { e.preventDefault(); alert('容器级上下文菜单'); } &lt;/script> &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); alert('按钮级上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { e.preventDefault(); alert('容器级上下文菜单'); } 这个示例使用了e.preventDefault()阻止了鼠标右击时响应浏览器上下文菜单的默认事件，但是点击button时会冒泡到上一级，所以得到了两个菜单，临时解决方案是使用e.stopstopPropagation()阻止冒泡 &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> &lt;script> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); // 阻止按钮事件冒泡 e.stopstopPropagation(); alert('按钮上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { e.preventDefault(); alert('容器级上下文菜单'); } &lt;/script> &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); e.stopstopPropagation(); alert('按钮级上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { e.preventDefault(); alert('容器级上下文菜单'); } 这样便解决了对每个元素进行单独响应的逻辑，但是却有一个非常不好的地方，那就是永远的拒绝了使用右键单击的路，代价非常大，因此另一个方案是检查一下document处理程序是否阻止了浏览器的默认行为，如果这个事件得到了处理，无需再次对这个事件进行响应，因此e.defaultPrevented登场了 &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> &lt;script> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); // 阻止按钮事件冒泡 // e.stopstopPropagation(); alert('按钮上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { // 根据默认行为状态来处理 if (e.defaultPrevented) { return; } e.preventDefault(); alert('容器级上下文菜单'); } &lt;/script> &lt;div> &lt;p>容器级上下文菜单&lt;/p> &lt;button>按钮级上下文菜单&lt;/button> &lt;/div> document.querySelector('button').oncontextmenu = function (e) { e.preventDefault(); alert('按钮级上下文菜单'); } document.querySelector('div').oncontextmenu = function (e) { if (e.defaultPrevented) { return; } e.preventDefault(); alert('容器级上下文菜单'); } # 事件委托 事件委托也叫事件代理，指的是目标元素并不处理事件，而是由父元素来处理，利用了事件冒泡机制和事件产生的事件对象来实现。这种方式减少了事件注册，节省了大量的内存，还可以为新增的子元素实现动态的事件绑定 &lt;body> &lt;div id=\\"father\\"> &lt;h1>子元素 1&lt;/h1> &lt;p>子元素 2&lt;/p> &lt;span>子元素 3&lt;/span> &lt;/div> &lt;script> father.addEventListener('click', event => { if (event.target.nodeName === 'H1'){ console.log('子元素1'); } if (event.target.nodeName === 'P'){ console.log('子元素2'); } if (event.target.nodeName === 'SPAN'){ console.log('子元素3'); } }); &lt;/script> &lt;/body> &lt;div> &lt;h1>子元素1&lt;/h1> &lt;p>子元素2&lt;/p> &lt;span>子元素3&lt;/span> &lt;/div> document.querySelector('div').addEventListener('click', event => { if (event.target.nodeName === 'H1'){ alert('子元素1'); } if (event.target.nodeName === 'P'){ alert('子元素2'); } if (event.target.nodeName === 'SPAN'){ alert('子元素3'); } }); event.target会返会目标的元素节点对象，可以通过判断该对象的nodeName或class来做一些事件处理 警告 事件委托应该看情况使用，不是所有的事件都应该委托，否则会产生事件误判的问题，本不应该触发的事件却被触发了 &lt;ul class=\\"tree\\" id=\\"tree\\"> &lt;li>&lt;span>一&lt;/span> &lt;ul> &lt;li>&lt;span>1&lt;/span> &lt;ul> &lt;li>(1)&lt;/li> &lt;li>(2)&lt;/li> &lt;li>(3)&lt;/li> &lt;li>(4)&lt;/li> &lt;/ul> &lt;/li> &lt;li>&lt;span>2&lt;/span> &lt;ul> &lt;li>(1)&lt;/li> &lt;li>(2)&lt;/li> &lt;li>(3)&lt;/li> &lt;/ul> &lt;/li> &lt;/ul> &lt;/li> &lt;li>&lt;span>二&lt;/span> &lt;ul> &lt;li>&lt;span>1&lt;/span> &lt;ul> &lt;li>(1)&lt;/li> &lt;li>(2)&lt;/li> &lt;/ul> &lt;/li> &lt;li>&lt;span>2&lt;/span> &lt;ul> &lt;li>(1)&lt;/li> &lt;/ul> &lt;/li> &lt;/ul> &lt;/li> &lt;/ul> let tree = document.querySelector('#tree'); tree.addEventListener('click', event => { if(event.target.nodeName === 'SPAN') { event.target.nextElementSibling.hidden = !event.target.nextElementSibling.hidden; } }); .tree span:hover { color: red; cursor: pointer; font-weight: 600; } # 事件构造器 HTML 中不仅提供了很多内建事件，还提供了一个事件构造器Event(type, otiions)来生成用于自身目的而创建的全新事件，也可以生成click这种内置的事件，它有两个参数： type：事件类型，可以是click这样的字符串，也可以是自己定义的myclick options：有两个可选属性的对象，bubbles: true/false，为true时会冒泡，cancelable: true/false，为true时会阻止默认行为。默认情况下两者都为false let event = new Event('hello'); 自定义事件必须通过elem.dispatchEvent(event)来调用，换句话说，这个方法是唯一能够触发自定义事件的办法 let event = new Event('hello'); elem.dispatchEvent(event); 对于自定义事件，应该使用addEventListener来处理它，而不是on&lt;event&gt; // 监听 hello 事件 elem.addEventListener('hello', event => { console.log('hello'); }) // 构造自定义事件 hello let event = new Event('hello'); // 触发自定义事件 elem.dispatchEvent(event); # 自定义事件 对于全新的事件类型应该使用CustomEvent，它和Event没什么太多的不同，只有一点不一样，第二参数额外多了一个属性detail，这个属性可以传递任何自定义的信息 &lt;body> &lt;button id=\\"btn\\">点击我&lt;/button> &lt;script> btn.addEventListener('foo', event => { console.log(event.detail); // {name: \\"foo\\"} }); btn.dispatchEvent(new CustomEvent('foo', { detail: { name: 'foo' } })); &lt;/script> &lt;/body> # 事件的同步处理 事件是在队列中进行处理的，如果在一个事件处理过程中又触发了一个事件，那么它的处理程序会被排入队列中等待前一个事件处理完成 &lt;button id=\\"btn\\">点击我&lt;/button> &lt;script> btn.onclick = function() { alert(1); btn.dispatchEvent(new CustomEvent('btn-click')); alert(2); }; btn.addEventListener('btn-click', () => alert('btn-click handler')); &lt;/script> &lt;button>点击我&lt;/button> let button = document.querySelector('button'); button.onclick = function() { alert(1); button.dispatchEvent(new CustomEvent('button-click')); alert(2); }; // 在 1 和 2 之间触发 button.addEventListener('button-click', () => alert('button-click handler')); 如果在某些情况下，这个事件是可以冒泡的，那么它将广播到document上，沿途触发的事件同样会被同步的方式处理，这可能不是想要的结果，最好优先处理自己的事件，只要将这个事件移动到优先处理的事件后面或者将它变成异步的事件来解决它 &lt;button>点击我&lt;/button> &lt;script> let button = document.querySelector('button'); button.onclick = function() { alert(1); // 异步触发 setTimeout(() => button.dispatchEvent(new CustomEvent(\\"button-click\\", { bubbles: true }))); alert(2); }; button.addEventListener('button-click', () => alert('button-click handler')); &lt;/script> &lt;button>点击我&lt;/button> let button = document.querySelector('button'); button.onclick = function() { alert(1); setTimeout(() => button.dispatchEvent(new CustomEvent(\\"button-click\\", { bubbles: true }))); alert(2); }; button.addEventListener('button-click', () => alert('button-click handler')); # 防抖和节流 由于用户和界面交互的太平凡，如果每一次发生的事件都要执行，就会造成性能下降，比如点了两下按钮，实际上这是误触，对应的处理函数不应该触发两次，防抖和节流就是应运而生的两种方案 防抖指事件发生的一定时间段只触发一次处理函数，一旦在一定的时间段内触发，则会重新计算时间再触发处理函数 节流指的是连续触发事件但是在 n 秒中只执行一次函数 下面是使用mousemove的例子，当鼠标在上面移动时数字会增加，第一个没有进行处理，第二个使用防抖处理，第三个使用节流处理 &lt;div class=\\"box\\">0&lt;/div> &lt;div class=\\"box\\">0&lt;/div> &lt;div class=\\"box\\">0&lt;/div> .box { display: inline-block; width: 200px; height: 150px; background-color: #666; text-align: center; line-height: 150px; color: #fff; font-size: 20px; } let divs = document.querySelectorAll('.box'); divs[0].addEventListener('mousemove', event => { divs[0].textContent = Number(divs[0].textContent) + 1; }); // 防抖 function debounce(func, delay) { let timeout; return function (args) { if (timeout) clearTimeout(timeout); let flag = !timeout; timeout = setTimeout(() => timeout = null, delay); if (flag) func.apply(this, args); } } // 节流 function throttle(func, delay) { let timeout; return function (args) { if (!timeout) { timeout = setTimeout(() => { timeout = null; func.apply(this, args); }, delay); } } } let debounceHandle = debounce(() => divs[1].textContent = Number(divs[1].textContent) + 1, 500); divs[1].addEventListener('mousemove', event => { debounceHandle(); }); let throttleHandle = throttle(() => divs[2].textContent = Number(divs[2].textContent) + 1, 500); divs[2].addEventListener('mousemove', event => { throttleHandle(); }); 防抖和节流都是通过减少实际处理函数的执行来提高性能的手段，但并没有实质的减少事件的触发次数 先来看防抖函数的实现思路，将一个需要进行防抖的操作放到函数中执行，使用防抖函数进行装饰并返回装饰后的函数，在内部定义一个变量记录定时器的返回值，此时已经产生了闭包，该变量永远存在，通过对定时器的返回值进行判断，标记一个可用来执行实际操作函数的变量，便是基本的实现思路，该函数是一个立即执行的防抖函数 function debounce(func, delay) { let timeout; return function (args) { // 如果有返回值就清除该定时器，重新计时，让 timeout 不为 null if (timeout) clearTimeout(timeout); // 标记，关系着实际操作的运行 let flag = !timeout; // 在一定 delay 时间后，将 timeout 赋值为 null timeout = setTimeout(() => timeout = null, delay); // 一旦 timeout 判断为 false 时，flag 一定为 true，此时开始执行实际操作 if (flag) func.apply(this, args); } } 再来看节流函数的实现思路，依然是装饰器加闭包的定时器原理来实现 function throttle(func, delay) { let timeout; return function (args) { // 如果 timeout 取反判断为 true，则执行一次实际操作 if (!timeout) { timeout = setTimeout(() => { // 在一定 delay 时间设置 timeout 为 null，让下一次事件触发实际操作 timeout = null; func.apply(this, args); }, delay); } } } # 鼠标事件 鼠标左键被按下时，会首先触发mosedown，左键被释放后，会触发mouseup和click，在单个动作触发多个事件时，事件的顺序是固定的 与点击相关的事件都会有button属性，这个属性允许获得确切的鼠标按钮，通常不在click和contextmenu事件中使用这个属性，因为它们分别只能被鼠标左键和右键所触发 只有在mousedown和mouseup事件中才会用到这个属性，因为这两个事件会在任何按键上触发，对于event.button的值可能如下： 按键状态 event.button 左键 0 中键 1 右键 2 后退键 3 前进键 4 提示 大多数鼠标只有左键和右键 &lt;button>点击我&lt;/button> let button = document.querySelector('button'); button.addEventListener('click', event => { alert(event.button); }); button.addEventListener('mousedown', event => { alert(event.button); }); button.addEventListener('mouseup', event => { alert(event.button); }); 甚至，所有的鼠标事件都包含按下的组合键的信息： shiftKey：Shift 键 altKey：Alt 键 ctrlKey：Ctrl 键 metaKey：Win 键 如果在鼠标事件期间按下了对应的键，则它的值为true，比如下面的示例中，按下三个键（Ctrl，Shift，Alt）才会触发弹框 &lt;button>点击我&lt;/button> let button = document.querySelector('button'); button.addEventListener('click', event => { if(event.shiftKey &amp; event.ctrlKey &amp; event.altKey) { alert('三键合璧，天下无敌'); } }); 所有的鼠标事件对象都提供了两种形式的坐标： 相对于窗口：clienX和clienY 相对于文档：pageX和pageY 相对于元素：offsetX和offsetY 相对于屏幕：screenX和screenY &lt;input onmousemove=\\"this.value=event.clientX + ', ' + event.clientY\\" value=\\"移动鼠标测试坐标\\"> 有时候双击鼠标会有一些副作用，可能会出现选择文本的干扰 &lt;div ondblclick=\\"alert('double click')\\">双击我&lt;/div> 甚至有时按下不松开并移动鼠标也会造成文本选择的干扰，为了避免这些情况，最合理的方法是在mousedown上进行处理 &lt;div ondblclick=\\"alert('double click')\\" onmousedown=\\"return false\\">双击我&lt;/div> 这里虽然解决了问题，但是文本却无法被选中了，其实并不是无法选中，而是要在文本本身以外的地方开始选中，从文本本身开始选中时自然会失效 如果想要保护页面的内容不被复制，可以使用copy事件来处理，对于开发者来说，肯定是可以打开调试工具来访问源码进行复制，但是大多数人是不知道的 &lt;div oncopy=\\"alert('当然，你是不可能复制成功的');return false\\">这里的内容是被禁止复制的&lt;/div> 当鼠标从元素身上移动时就会触发对应的移动事件，移动到某个元素上时就会触发mouseover，而离开某个元素时就会触发mouseout 这些事件都有一个特殊的relatedTarget属性，这是对target的补充。当从一个元素是上离开到另一个元素时，其中一个元素就是target，另一个就变成了relatedTarget，对于mouseover和mouseout来说，target和relatedTarget是互相相反的 提示 relatedTarget的取值是可能为null的，不一定总是页面上的某个元素的引用，鼠标如果来自窗口外，或者离开了窗口，就会产生这种现象，因此对于relatedTarget要记住这个特性，以免发生错误 mousemove用来响应鼠标移动的事件，浏览器会一直检查鼠标的位置，如果发现了变化，就会触发mousemove，但是这并不意味着每一个像素变化都会触发，如果在非常快速地情况下移动鼠标，某些元素就很有可能被跳过，这对性能有很大的好处，并不需要在每个元素上处理进入和离开的过程 还有一个特别重要的特性就是，快速移动鼠标的情况下，元素可能被忽略掉，如果正式的进入了一个元素产生了mouseover，那么必然会产生一个mouseout 还有一个触发mouseout的地方就是出现在嵌套元素的身上，当鼠标从元素移动到后代时就会触发，其实指针并没有移出元素之外，但是在后代元素上触发了这个事件 这是因为浏览器的逻辑是，指针随时都可以位于单个元素上，如果是嵌套元素就一定是z-index最大的那个，因此移动到另一个后代元素，代表着离开了当前元素 此外，还有一个非常重要的细节，后代的mouseover会冒泡，因此父级元素如果有mouseover处理程序也会被触发，这可能不是一个好现象，因为指针仍然在父元素内，只不过更深入了而已 mouseenter/mouseleave和mouseover/mouseout相同，但是它们有一些重要的区别： 元素内部与后代之间的转换不会受到影响 不会冒泡 这非常好，只有进入一个元素时才会触发mouseenter，而鼠标在当前元素以及后代中的位置并不重要，只有当真正移出元素范围时才触发mouseenter，但是它们无法作用于事件委托，这也是一个不好的方面 这是使用mouseover/mouseout进行事件委托的表格高亮示例 &lt;table> &lt;tr> &lt;td>1&lt;/td> &lt;td>2&lt;/td> &lt;/tr> &lt;tr> &lt;td>3&lt;/td> &lt;td>4&lt;/td> &lt;/tr> &lt;/table> let table = document.querySelector('table'); table.onmouseover = function (e) { console.log(e.target); e.target.style.background = 'pink'; } table.onmouseout = function (e) { e.target.style.background = ''; } table td { border: 1px solid #000; width: 150px; text-align: center; cursor: pointer; } # 键盘事件 需要处理键盘行为时，就应该使用键盘事件，当按下时会触发keydown事件，而当释放按键时触发keyup事件 对于键盘事件对象来说，可以通过key来获取字符，而code属性允许获取物理上的按键代码 &lt;p>key：&lt;br>code：&lt;/p> &lt;input type=\\"text\\"> document.querySelector('input').onkeydown = function (e) { document.querySelector('p').textContent = 'key：' + e.key + '，code：' + e.code; } 如果使用不同的语言，只会导致key的值不一样，而code则始终是一样的，如果某些键没有产生字符，则key和code大致是一样的 对于一个按键如果按下足够长的时间，会一直触发keydown，然后释放时才转到keyup，对于重复触发的事件来说，事件对象的repeat将被设置为true 键盘可能会触发一些不可控的变数，比如Ctrl+S会保存网页，但是阻止keydown便能阻止它，因此可以阻止大多数键盘的行为，除了少数按键以外，比如Alt+F4，在 Windows 上用来关闭窗口 # 滚动事件 scroll事件能够对页面或元素的滚动作出反应，这是一个示例： &lt;p>当前窗口已滚动的像素：&lt;span>0 px&lt;/span>&lt;/p> window.onscroll = function(e) { document.querySelector('span').textContent = window.pageYOffset + 'px'; } 不能在scroll事件中使用e.preventDefault()来阻止滚动，启动滚动的方法有很多种，但是使用 CSS 的overflow会更加可靠一些 滚动有以下应用场景： 无限的页面 “到顶部”以及“到底部”的按钮 按需加载图像 # 表单事件 表单和一些其它的控件元素有很多特殊的事件，对于文档中的表单来说，它们是document.forms的成员，因此可以使用这种方式来获取文档上的表单，且当有了表单后，其中的任何元素都可以使用form.elements来获取 &lt;form name=\\"foo\\"> &lt;input type=\\"text\\" name=\\"one\\"> &lt;/form> &lt;script> let foo = document.forms.foo; let input = foo.elements.one; &lt;/script> 值得一提的是，当为表单或其中的控件元素添加name特性后，便可以在forms和elements中直接使用name对应的值作为属性来引用，而不必使用一些其它的方法来定位元素 当然也可能会出现名字相同的元素，比如在单选按钮中，在这种情况下，elements.name将是一个集合 &lt;form name=\\"foo\\"> &lt;input type=\\"radio\\" name=\\"gender\\"> &lt;input type=\\"radio\\" name=\\"gender\\"> &lt;/form> &lt;script> let foo = document.forms.foo; let inputs = foo.elements.gender; console.log(inputs); // RadioNodeList(2) &lt;/script> 甚至可以通过更短的方式来访问元素，直接将form.elements.name写成form.name是等效的 &lt;form name=\\"foo\\"> &lt;input type=\\"text\\" name=\\"one\\"> &lt;/form> &lt;script> let foo = document.forms.foo; console.log(foo.elements.one == foo.one); // true &lt;/script> 每一个对应的元素都可以反向的引用其对应的表单，使用form属性 &lt;form name=\\"foo\\"> &lt;input type=\\"text\\" name=\\"one\\"> &lt;/form> &lt;script> let foo = document.forms.foo; let one = foo.one; // 反向引用 console.log(one.form == foo); // true &lt;/script> 对于&lt;input&gt;来说，访问不同的type的value有所不同： type = text：value type = radio：checked（布尔值） 对于&lt;textarea&gt;也是使用value来访问 对于&lt;select&gt;来说有三个重要的属性： options：所有的&lt;option&gt;的集合 value：当前所选择的&lt;option&gt;的value selectedIndex：当前所选择的&lt;option&gt;索引编号 其中有三种方式来设置value： 将对应&lt;opition&gt;元素的selected设为true 将&lt;select&gt;的value设置为对应&lt;option&gt;的value 将&lt;select&gt;的selectedIndex设置对应&lt;option&gt;的索引编号 当点击某个元素或使用键盘上的Tab选中时，该元素会获得聚焦，在 HTML 中有一个autofocus特性会让网页在加载完成后默认的聚焦到元素上，聚焦意味着一个元素可以接受数据，当失去焦点的时候意味着数据已经输入完毕 当元素聚焦时会触发focus事件，当失去焦点时会触发blur事件 &lt;p>没有任何元素获得焦点&lt;/p> &lt;input type=\\"text\\"> document.querySelector('input').onfocus = function (e) { document.querySelector('p').textContent = '获得焦点' }; document.querySelector('input').onblur = function (e) { document.querySelector('p').textContent = '失去焦点' }; 焦点也会有丢失现象发生，比如alert会将焦点移到自己身上，那么另一个已经获得焦点的元素将失去焦点并触发blur，或者一个元素从 DOM 中移除，也会导致焦点丢失 大多数元素并不支持聚焦，因为它们本身并不需要接受数据，但是 HTML 特性tabindex可以适用到这些不支持focus/blur的元素身上，任何具有tabindex的元素都会变成可聚焦的： tabindex接收一个负值，表示是可聚焦的，但不能通过键盘导航来访问该元素 tabindex接收0，表示是可聚焦的，可以通过键盘导航来访问该元素，但是顺序是与当前处于文档中的顺序来决定的 tabindex接收一个正值，表示是可聚焦的，可以通过键盘导航来访问该元素，但是它的访问顺序是按照tabindex的数值递增来决定获得焦点的顺序，如果拥有相同的数值，则按照在文档中的顺序来决定 &lt;div tabindex=\\"1\\">1&lt;/div> &lt;div tabindex=\\"0\\">0&lt;/div> &lt;div tabindex=\\"2\\">2&lt;/div> &lt;div tabindex=\\"-1\\">-1&lt;/div> div { cursor: pointer; } :focus { outline: 1px dashed red; } focus/blur不支持事件冒泡，但是支持事件捕获，如果一定需要冒泡的需求，可以使用focusin/foucusout事件，它们和focus/blur完全一样，但是只能使用addaddEventListener处理 另外，可以使用document.activeElement来获取当前聚焦元素 在进行表单提交时，会触发submit事件，提交表单有两种方式： 在&lt;input&gt;中按下Enter 点击&lt;input type=&quot;submit&quot;&gt;或&lt;input type=&quot;image&quot;&gt; &lt;form name=\\"foo\\"> &lt;input type=\\"text\\"> &lt;input type=\\"image\\"> &lt;input type=\\"submit\\" value=\\"提交\\"> &lt;/form> document.querySelector('form').onsubmit = function (e) { alert('submit 触发了'); return false; }; 在submit中使用return false会阻止表单发送，有趣的是使用Enter发送表单时，会触发&lt;input type=&quot;submit&gt;一次click事件，真很有趣 如果要手动将表单提交到服务器，可以调用form.submit方法，它不会产生submit事件，会向form.action的值所指向的服务器进行form.method方式提交 # 数据更新事件 对于元素来说，产生的更改也会触发相应的事件 change input change事件可以在&lt;input&gt;失去焦点后触发，但是数据状态必须已经发生改变 &lt;input type=\\"text\\" onchange=\\"alert(this.value)\\"> 对于&lt;select&gt;，以及&lt;input&gt;的type为checkbox/radio时，会在选项更改后立即触发 还有一个input事件只要监测到数据改变了就会触发，无论是键盘上的数据，还是鼠标粘贴等改变数据的操作，如果想要处理输入值的每次更改，这个事件是最好的选择，另外，该事件不会在不涉及值更改的输入上触发，比如方向键 # 剪切板事件 剪切板是界面中最常用的操作之一，IE 是最早支持的，随着 HTML5 到来，剪切板事件已经纳入了标准 剪切板事件是当发生复制/粘贴/剪切操作时触发的事件，分别是copy，paste，cut &lt;input type=\\"text\\" oncopy=\\"alert(event.type)\\" onpaste=\\"alert(event.type)\\" oncut=\\"alert(event.type)\\"> 如果想要访问剪切板上的数据，可以使用ClipboardEvent类的方法，比如event.clipboardData.getData('text/plain')用于获取对应的数据 &lt;input type=\\"text\\" onpaste=\\"alert(event.type + ':' + event.clipboardData.getData('text/plain'))\\"> event.clipboardData可以读写剪切板中的数据，但是在规范中有很多方法可以用于不同的数据类型，而不仅仅是文本 要访问剪切板中的数据，可以通过 clipboard 对象，它由 navigator.clipboard 返回，所有的操作都通过这个对象进行 由于用户可能会将敏感数据放在剪切板，涉及到浏览器外的操作系统，所以这个 API 的安全限制比较多，调用的时候必须明确获得用户的许可，“写入权限”会自动授予，但是“读取权限”必须被明确授予，也就是说在进行读取操作的时候，浏览器会弹一个对话框询问用户是否同意 clipboard 提供了四个方法用于读写剪切板，他们都是异步方法，返回 promise 对象 readText() 用于读取剪切板中的文本信息 navigator.clipboard.readText(); read() 读取剪切板中的数据，可以是文本也可以是二进制 navigator.clipboard.read(); # 文档事件 HTML 有三个非常重要的生命周期事件： DOMContentLoaded：已经完全加载了 HTML，并构建了 DOM 树，但是图像、样式表之类的外部资源可能没有加载完成 load：不仅加载完了 HTML，还加载完了所有的外部资源 beforeunload/unload：当用户离开页面时 DOMContentLoaded事件发生在document身上，必须使用addEventListener来处理它，DOMContentLoaded可以在文档加载完毕后触发，所以在这里可以访问任何元素，包括&lt;img&gt;，但是它不会等待图片加载，此时无法访问图片的大小 如果文档在加载的时候遇到了&lt;script&gt;，就会等待这个脚本执行完成后继续加载，因为脚本可能需要修改 DOM，所以DOMContentLoaded会等待它执行结束，这说明脚本会堵塞文档的加载 虽然DOMContentLoaded不会等待外部样式表，但是如果样式表后有一个脚本，那么脚本会等待样式表加载完成，同时 HTML 在等待脚本以及前面的样式表加载完成，因为脚本可能会访问一些样式相关的属性，这导致脚本必须等待 当整个页面的资源被加载完成后，包括图片，外部样式等，才会触发window上的load事件，如果绑定到元素上会在元素加载完成后触发，window.onload始终是最后触发的 当离开了这个页面就会触发unload，通常用来关闭页面的时候去做些什么事情，比如发送一些数据，但是由于页面已经被卸载，所有就无法接收响应，同时一些弹框方法也是失效的，但是如果在这里处理一些同步的的操作就会导致关闭会有延迟，而beforeunload则可以在页面离开前提示用户是否确定离开，相比unload多了一个确认的步骤，beforeunload会阻止unload事件的执行，并且优先执行 如果想在页面关闭时发送数据，可以使用navigator.sendBeacon(url, data)方法，它会在后台发送数据，即使离开了页面也不会影响它的执行，请求方式是 POST，通常可以发送一些字符串化的对象 对于文档的加载状态是有迹可循的，document.readyState反映了文档的加载状态： loading：正在加载中 interactive：文档已经加载完成 complete：文档中的所有资源均加载完成 还有一个readystatechange事件，会在状态改变时触发 console.log(document.readyState); // 'loading' document.addEventListener('readystatechange', function (e) { console.log(document.readyState); // 'interactive' ,,, 'complete' }) # 加载脚本 现在的脚本往往比 HTML 本身更大，处理的时间更加久，上面说过脚本会堵塞页面的加载，对于外部的脚本来说也是如此，必须等待下载完，并执行结束后才能继续加载文档，这会导致一些问题： 脚本不能访问身后的文档元素 如果有一个非常笨重的脚本，会严重的堵塞页面的加载，造成体验问题 对于这种问题的解决办法是将脚本置于文档底部，这时就可以处理页面上的元素，而且不会堵塞页面 &lt;body> &lt;!-- 所有的文档内容 --> &lt;!-- ...... --> &lt;script>&lt;/script> &lt;/body> 但这不是最完美的，如果文档非常长，脚本被延后到最后处理，会产生明显的延迟，对于网速较快的人来说感知不明显，但是对于慢网速的人来说就有点难受 但是script有两个特性可以解决这个问题： defer：告诉浏览器不需要等待脚本，继续处理文档，脚本会在旁边自动下载，等待文档处理完成后才会执行，并且保持相对顺序的依次执行，这对于需要依赖的脚本有用 async：告诉浏览器不需要等待脚本，继续处理文档，但是async脚本之间没有顺序可言，当下载完后就立即执行了，是一个完全独立运行的脚本 DOMContentLoaded事件会在defer脚本全部执行完后，才会触发，对于async脚本来说，它可能先触发也可能后触发 提示 defer仅适用于具有src属性的外部脚本，否则就会忽略defer 除此之外有一个动态添加脚本的方式，就是使用 JavaScript 动态的创建一个脚本，并追加到文档中，当被追加到文档后就会立即执行，此时这个脚本： 是异步的，不会等待其它东西，也不会有东西等待它 先加载完成的脚本先执行 let script = document.createElement('script'); script.src = 'jinqiu.wang/foo.js'; document.body.append(script); 对于这种脚本的创建方式，必须等到加载完成后才能调用其中的函数，但是还好load事件能够帮助我们，它会在脚本加载完成后触发，因此可以使用脚本中的变量、函数等等 如果一个脚本加载失败了，会触发一个error事件，对于失败信息无法获取更多，只能通过这种方式知道脚本加载失败了 load和eroor事件也适用于其它具有src属性的外部资源 提示 对于&lt;img&gt;来说，必须获得src才能够被开始加载，而&lt;ifrma&gt;不管加载成功还是失败都会触发load事件 # 触摸事件 # 全屏 如果想要以全屏的方式展示一个元素，可以调用elem.requestFullscreen()方法，同样使用document.exitFullscreen()来退出全屏，对于用户来说也可以使用自己的方式来退出（F11 或 ESC） 全屏和退出全屏都会触发一次fullscreenchange事件 document.fullscreenElement可以获取全屏元素，以此来判断是否为全屏状态 提示 无法在网页加载后立即进入全屏状态，必须在事件处理中调用 # 页面可见 # 服务端事件 https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-09-08T04:43:05.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2022-09-08T04:43:05.000Z"}]]},"excerpt":"<div class=\\"custom-container info\\">\\n<p class=\\"custom-container-title\\">前置知识</p>\\n<ul>\\n<li>HTML</li>\\n<li>CSS</li>\\n<li>JavaScript</li>\\n<li>DOM</li>\\n</ul>\\n</div>\\n<p>事件是一种用于人机交互和响应程序内部的控制机制，在 JavaScript 中，对象可以响应一些网页交互事件，比如鼠标事件，包括使用鼠标的常见操作：单机和释放、鼠标指针是否在对象上。当这些事件产生后，就可以编写代码对这些事件做出响应的处理，指定为响应事件而应执行的动作叫做事件处理</p>\\n<p>首先要认识事件发生和处理的三个基本要素，当事件发生时，必然会牵扯到这些要素</p>\\n<ul>\\n<li>事件源：就是触发事件的对象，当一个元素触发了一个事件，这个元素就是事件源</li>\\n<li>事件类型：一个元素可以触发多个事件，因此必须根据事件的类型进行分别处理</li>\\n<li>事件响应：当事件触发后，执行的一些响应步骤，一般通过函数来完成，函数包含了响应要执行的步骤</li>\\n</ul>\\n<p>由于不同的事件具有不同的逻辑，所以就产生了事件类型，比如鼠标产生的事件和键盘产生的事件等等，这里是一些常用的事件类型，更多详见<a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/Events#%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E7%B1%BB%E5%88%AB\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MDN<ExternalLinkIcon/></a></p>\\n<ul>\\n<li>鼠标事件\\n<ul>\\n<li><code v-pre>click</code>：单击并释放后</li>\\n<li><code v-pre>dblclick</code>：双击</li>\\n<li><code v-pre>mouseenter</code>：指针移入到元素内</li>\\n<li><code v-pre>mouseleave</code>：指针移出到元素外</li>\\n</ul>\\n</li>\\n<li>键盘事件\\n<ul>\\n<li><code v-pre>keydown</code>：按下任意键</li>\\n<li><code v-pre>keyup</code>：释放任意按键</li>\\n<li><code v-pre>keypress</code>：长按任意键</li>\\n</ul>\\n</li>\\n<li>焦点事件\\n<ul>\\n<li><code v-pre>focus</code>：获得焦点</li>\\n<li><code v-pre>blur</code>：失去焦点</li>\\n</ul>\\n</li>\\n<li>more...</li>\\n</ul>\\n<h2 id=\\"事件处理的实现\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#事件处理的实现\\" aria-hidden=\\"true\\">#</a> 事件处理的实现</h2>\\n<p>直接使用 HTML 元素事件特性</p>\\n\\n<CodeDemo id=\\"code-demo-129\\" type=\\"normal\\" title=\\"%E4%BA%8B%E4%BB%B6%E7%89%B9%E6%80%A7\\" code=\\"eJyrVsooyc1RslKySSotKcnPU8jPS87JTM62jVFKzEktKtFQf9o79Wn77ie7up/s3vZi+bKn/ROf7GpT14xRsnvetBMo86xjoo0+RLNdTJ5SLQDwfiba\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onclick</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'单击事件触发了'</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></CodeDemo><p>HTML 有很多这样直接作用于元素的事件特性<code v-pre>on&lt;event&gt;</code>，被触发时会启动对应的 JavaScript 程序，但应该避免这种使用方式，因为不利于维护 HTML</p>\\n<p>由于 HTML 特性被看作元素节点的属性，只要为这个事件属性定义一个处理函数就可以了</p>\\n\\n<CodeDemo id=\\"code-demo-138\\" type=\\"normal\\" title=\\"DOM%20%E5%85%83%E7%B4%A0%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%B1%9E%E6%80%A7\\" code=\\"eJyrVsooyc1RslKySSotKcnPs3vetPNp++5nHRNt9KEiMXlKOkpZxUA1KfnJpbmpeSV6haWpRZXBqTmpySX5RRrqEIXqmnr5eck5mcnZCrYKaaV5ySWZ+XkKGpoK1TF5CgqJOalFJRrqT3unAo1/sqv7ye5tL5Yve9o/8cmuNnVN65i8WiBWqgUAVS88OQ==\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onclick</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'单击事件触发了'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>这种方式将处理逻辑和 HTML 文档分离，大大提高了维护性，这样便于寻找 BUG</p>\\n<p>但在现在的技术中更推荐使用<code v-pre>addEventListener()</code>方法来为元素添加监听事件，它是一个事件源上的方法，事件源可以是文档上的元素，也可以是<code v-pre>window</code>或者任何被支持的事件对象，所以语法通常是这样的：<code v-pre>target.addEventListener(eventType, handler, useCapture)</code></p>\\n<ul>\\n<li><code v-pre>target</code>是事件发生的对象</li>\\n<li>参数<code v-pre>eventType</code>是事件类型</li>\\n<li>参数<code v-pre>listener</code>是处理事件的函数</li>\\n<li>参数<code v-pre>useCapture</code>是一个逻辑值，用来确定事件监听是捕获阶段、目标阶段还是冒泡阶段</li>\\n</ul>\\n<p>与前两种方式相比，事件监听的优势在于对同一个事件，可以有多个不同的处理</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">eventHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'单击事件触发了'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> eventHandler<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>\\n<CodeDemo id=\\"code-demo-174\\" type=\\"normal\\" title=\\"addEventListener%20%E6%96%B9%E6%B3%95\\" code=\\"eJyrVsooyc1RslKySSotKcnPs3vetPNp++5nHRNt9KEiMXlKOkpZxUA1aaV5ySWZ+XkKqWWpeSUeiXkpOalFGpoK1TF5CgqJQHaJhvrT3qlA/U92dT/Zve3F8mVP+yc+2dWmrmkdk1cbkxeTl5KfXJoL1KxXWJpaVBmcmpOaXJJfpKEOsUtdUy8xJcUVZLpPZnFJah7QePXknMzkbHUdFEt1FNISc4pTQcYq1QIAp8tP5g==\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">eventHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'单击事件触发了'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\ndocument<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> eventHandler<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>如果一个元素注册了多个同类型的事件监听，执行顺序是按照代码书写顺序</p>\\n</div>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>在事件处理中，<code v-pre>this</code>指向绑定事件的 DOM 元素</p>\\n</div>\\n<h2 id=\\"删除事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#删除事件\\" aria-hidden=\\"true\\">#</a> 删除事件</h2>\\n<p>对于<code v-pre>on&lt;event&gt;</code>这种处理方式，可以直接赋值为<code v-pre>null</code>来实现事件的删除</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>target<span class=\\"token punctuation\\">.</span>onclick <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>如果是<code v-pre>addEventListener</code>方式，则调用<code v-pre>removeEventListener(type, handle)</code>方法即可删除对应的事件监听：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> <span class=\\"token function-variable function\\">mouseClick</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\ntarget<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> mouseClick<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\ntarget<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">removeEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> mouseClick<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>必须是同一个函数引用，否则无法删除</p>\\n</div>\\n<h2 id=\\"事件对象\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#事件对象\\" aria-hidden=\\"true\\">#</a> 事件对象</h2>\\n<p>当 DOM 中某个事件被触发时，会同时产生一个描述事件相关信息的对象（触发事件的元素，鼠标的的位置，键盘的状态等等），它通常被当作参数传递给事件处理函数</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>body</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>btn<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>click<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n    btn<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  </span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>body</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>\\n<CodeDemo id=\\"code-demo-211\\" type=\\"normal\\" title=\\"event\\" code=\\"eJyrVsooyc1RslKySSotKcnPU7B73rTzafvuZx0TbfQhQnYxeUo6SlnFQEUp+cmlual5JXqFpalFlcGpOanJJflFGuoQheqaeokpKa5lQAU+mcUlqXmpQKnknMzkbHUdhVSQsIKtnUJ1TJ6CQmJOalGJhvqTXd1Pdm97vnH303nd7/fMUlfQhqjTK6ksSNW0jsmr1VFIS8wpBrOVagEYrEQv\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span> <span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'事件类型：'</span> <span class=\\"token operator\\">+</span> event<span class=\\"token punctuation\\">.</span>type<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p><code v-pre>event.type</code>获取的是当前事件的类型，更多<code v-pre>event</code>对象的属性和方法详见<a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Event\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MDN<ExternalLinkIcon/></a></p>\\n<h2 id=\\"事件流\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#事件流\\" aria-hidden=\\"true\\">#</a> 事件流</h2>\\n<p>了解事件流之前先看示范程序，点击不同层次的元素，看看事件是按照什么顺序触发的</p>\\n\\n<CodeDemo id=\\"code-demo-224\\" type=\\"normal\\" title=\\"%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1\\" code=\\"eJx9jzsOwjAMQK9imQGQQCDG8jlJlpCEEDU4JaSoEmJnZeMW3Ipz4LR8Jpj8e8+yT7hNO48FLrQ7gtNLgZsQBEIg5Z0quZbexDToPy7Xx+0OPO0PBa4EQc5z+KprGf+oPP2okKsu+er7uvmj87TVOS4m7LR73tk74gjV4cD/5KWnTOxktI4KmIKsU5jnViW1dmQLmE2rpu0k06Sx9M4yqAwlE7l9FtTjF7s1a6lKG0NNeqyCD7GAaPQL4ld+QTYaQy+MD/+FVY7KjsLzE15TjPE=\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>foo<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onclick</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'我是 foo'</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>\\n  foo\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>bar<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onclick</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'我是 bar'</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>\\n    bar\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>qux<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onclick</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'我是 qux'</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>qux<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-css line-numbers-mode\\" data-ext=\\"css\\"><pre v-pre class=\\"language-css\\"><code><span class=\\"token selector\\">div</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 auto<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 20px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">text-align</span><span class=\\"token punctuation\\">:</span> center<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">#foo</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">background-color</span><span class=\\"token punctuation\\">:</span> red<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">#bar</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">background-color</span><span class=\\"token punctuation\\">:</span> green<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">#qux</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">background-color</span><span class=\\"token punctuation\\">:</span> pink<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>通过实验得知，鼠标无论点击到了哪一层元素，事件会从该层开始依次向上层触发。DOM 事件模型分为捕获和冒泡，一个事件发生后，会在元素之间进行传播，这种传播分为三个阶段：</p>\\n<ul>\\n<li>捕获阶段：从最顶层（window）开始向下传播到目标元素</li>\\n<li>目标阶段：真正到达目标元素</li>\\n<li>冒泡阶段：从目标元素向最顶层传播</li>\\n</ul>\\n<p>事件冒泡是 IE 的事件流，事件由具体的元素开始触发，然后逐级向上传播，而事件捕获是网景公司提出的，和 IE 的事件流正好相反。直到 W3C 发布标准后，浏览应该同时支持两种调用顺序，首先从捕获阶段开始到目标阶段，再由目标阶段到冒泡阶段结束，这就是所谓的<strong>先捕获再冒泡</strong></p>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>几乎所有的事件都会冒泡，但有些例外，比如<code v-pre>focus</code></p>\\n</div>\\n<p>冒泡是默认的事件流，但是可以设置<code v-pre>addEventListener(eventType, handler, true)</code>第三个参数为<code v-pre>true</code>变为捕获阶段</p>\\n\\n<CodeDemo id=\\"code-demo-259\\" type=\\"normal\\" title=\\"%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7\\" code=\\"eJydkT1SwzAQha+yIwo7M07IUJo4HR0drRtFWoywLDmynDGTSU9Lxy24Vc7Byj+EFEmRRtrR+/T2Sbtnb77SLGUrqXagZJazV2tzts4NQKhoO0kb7kYJINR9cZK3bUcyrat7Ouu5qZp2lrD3htpp9MEeMpBWtBUav9i26D5eUKPw1sXRHcnR7DE3AaVm11CS/1Bqfw0luUdzQ/4LLuXTjrBn1Xg0SIDQSpRRAvEMsjXswxu4Rufj6Pj5dfz+Cal7g0MC3rU4eFGAW7ym3GdelPAWr+lh/7zos0UTfjtMqL9ScVcok8ISeOstIQA19VKmSOFhWXf9icfOz7lWBYGCQqALtrkJExlsNlyUhbOtkXNhtXUpOJQjFEZ1ASocohmxMKYLWK1MOVDs8Asr1ugO\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>foo<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n  foo\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>bar<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n    bar\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>qux<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>qux<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'#foo'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> bar <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'#bar'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> qux <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'#qux'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nfoo<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'我是 foo'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nbar<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'我是 bar'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nqux<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'我是 qux'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-css line-numbers-mode\\" data-ext=\\"css\\"><pre v-pre class=\\"language-css\\"><code><span class=\\"token selector\\">div</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">margin</span><span class=\\"token punctuation\\">:</span> 0 auto<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">padding</span><span class=\\"token punctuation\\">:</span> 20px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">text-align</span><span class=\\"token punctuation\\">:</span> center<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">#foo</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">background-color</span><span class=\\"token punctuation\\">:</span> red<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">#bar</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">background-color</span><span class=\\"token punctuation\\">:</span> green<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">#qux</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">background-color</span><span class=\\"token punctuation\\">:</span> pink<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><h2 id=\\"阻止事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#阻止事件\\" aria-hidden=\\"true\\">#</a> 阻止事件</h2>\\n<p>在 HTML 中有些元素默认有些事件，比如<code v-pre>&lt;a&gt;</code>标签的跳转和表单的提交按钮跳转，如果想要<code v-pre>&lt;a&gt;</code>标签仅仅作为一个普通的按钮，不想进行页面的跳转，也不想进行锚点定位，可以有以下几种方法：</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token comment\\">&lt;!-- 方法一 --></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>a</span> <span class=\\"token attr-name\\">href</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>javascript:;<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>链接<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>a</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token comment\\">&lt;!-- 方法二 --></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>a</span> <span class=\\"token attr-name\\">href</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>https://jinqiu.wang<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>链接<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>a</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'a'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onclick</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token comment\\">&lt;!-- 方法三 --></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>a</span> <span class=\\"token attr-name\\">href</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>https://jinqiu.wang<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>链接<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>a</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'a'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onclick</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><ul>\\n<li><code v-pre>e.preventDefault()</code>可以阻止默认事件行为，但不能阻止冒泡</li>\\n<li><code v-pre>e.stopPropagation()</code>可以阻止事件传播，但不能阻止默认事件行为</li>\\n<li><code v-pre>e.stopImmediatePropagation()</code>不仅可以阻止事件传播，也能阻止元素同类型事件的其他处理函数触发</li>\\n</ul>\\n<p>对于<code v-pre>on&lt;event&gt;</code>这种处理程序只需要返回一个<code v-pre>false</code>也能够阻止行为发生，也意味着阻止传播，对于一些其他的处理程序来说，返回<code v-pre>false</code>并没有什么意义</p>\\n<p>有一些事件是可以相互转换的，如果阻止了前一个事件就不会出发第二个时间，比如<code v-pre>&lt;input&gt;</code>的<code v-pre>mousedown</code>会导致其获得焦点从而触发<code v-pre>focus</code>事件，阻止了<code v-pre>mousedown</code>就不会触发焦点了</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">value</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>jinqiu.wang<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onfocus</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token operator\\">=</span><span class=\\"token string\\">''</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">value</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>jinqiu.wang<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onmousedown</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span></span><span class=\\"token punctuation\\">\\"</span></span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onfocus</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token operator\\">=</span><span class=\\"token string\\">''</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>\\n<CodeDemo id=\\"code-demo-297\\" type=\\"normal\\" title=\\"%E5%90%8E%E7%BB%AD%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%98%BB%E6%AD%A2\\" code=\\"eJyrVsooyc1RslKyKbB70bf96b7pz1uWPW/aaaNfYBeTZ5OZV1BaolBSWZBqG6NUklpREqOkUJaYUwriZmXmFWaW6pUn5qUDRfPz0vKTS4tByjIyi/UgitTVY5RAxhTYPZu+4NnmqRTakJtfWpyakl+eB5QrSi0pLcpTSEvMKU61JmC/Ui0AMZFb2A==\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>获得焦点<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">value</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>jinqiu.wang<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onfocus</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token operator\\">=</span><span class=\\"token string\\">''</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>无法获得焦点<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">value</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>jinqiu.wang<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onmousedown</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span></span><span class=\\"token punctuation\\">\\"</span></span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onfocus</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token operator\\">=</span><span class=\\"token string\\">''</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p><code v-pre>addEventListener</code>的可选项<code v-pre>passive: true</code>可以表示事件处理永远都不会调用<code v-pre>preventDefault()</code>，因为它能明显的改善页面的滚动性能，这是因为用户在屏幕上移动会导致页面滚动，<code v-pre>preventDefault()</code>正好也能阻止滚动行为，因此一些事件监听在处理滚动时可能会阻止浏览器的主线程，导致 UI 变得卡顿或抖动，一旦设置<code v-pre>passive: true</code>就会告诉浏览器永远不会调用<code v-pre>preventDefault()</code></p>\\n<blockquote>\\n<p><a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener#%E4%BD%BF%E7%94%A8_passive_%E6%94%B9%E5%96%84%E7%9A%84%E6%BB%9A%E5%B1%8F%E6%80%A7%E8%83%BD\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">使用_passive_改善的滚屏性能<ExternalLinkIcon/></a></p>\\n</blockquote>\\n<p>对于默认行为来说，有一个专门的<code v-pre>e.defaultPrevented</code>属性用来表示它，为<code v-pre>true</code>时表示已经被阻止，可以用来通知其它事件，表示该事件已经被处理</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>容器级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>按钮级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'按钮上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'容器级上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>\\n<CodeDemo id=\\"code-demo-312\\" type=\\"normal\\" title=\\"%E4%BA%A7%E7%94%9F%E5%86%92%E6%B3%A1\\" code=\\"eJyrVsooyc1RslKySckss4vJU1CwKbB7um7n05krnu9a/mRH15Md3c+mtb/on/O0d6qNfgFESVJpSUl+nt2zns6Xk9ZhUwdVEJNnow8xV0lHKasYaE1KfnJpbmpeiV5haWpRZXBqTmpySX6RhjpEg7qmXn5ecn5eSWpFCVBVqYKtQlppXnJJZn6egkaqpkI1yPZUvYKi1DKgGS6paYmlOSUamtYg4cSc1KISDXVcblIHqaqNyYvJw+UEoEOpYD+usIPZr1QLAEWUov0=\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>容器级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>按钮级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'按钮级上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\ndocument<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'容器级上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>这个示例使用了<code v-pre>e.preventDefault()</code>阻止了鼠标右击时响应浏览器上下文菜单的默认事件，但是点击<code v-pre>button</code>时会冒泡到上一级，所以得到了两个菜单，临时解决方案是使用<code v-pre>e.stopstopPropagation()</code>阻止冒泡</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>容器级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>按钮级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 阻止按钮事件冒泡</span>\\n    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stopstopPropagation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'按钮上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'容器级上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>\\n<CodeDemo id=\\"code-demo-320\\" type=\\"normal\\" title=\\"%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1\\" code=\\"eJyrVsooyc1RslKySckss4vJU1CwKbB7um7n05krnu9a/mRH15Md3c+mtb/on/O0d6qNfgFESVJpSUl+nt2zns6Xk9ZhUwdVEJNnow8xV0lHKasYaE1KfnJpbmpeiV5haWpRZXBqTmpySX6RhjpEg7qmXn5ecn5eSWpFCVBVqYKtQlppXnJJZn6egkaqpkI1yPZUvYKi1DKgGS6paYmlOSUamtYQ4eKS/AIQDijKL0hMTwTpgsol5qQWlWio43KvOkhVbUxeTB4u5wE9QYnboPbjCleY/Uq1AB81rTY=\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>容器级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>按钮级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stopstopPropagation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'按钮级上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\ndocument<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'容器级上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>这样便解决了对每个元素进行单独响应的逻辑，但是却有一个非常不好的地方，那就是永远的拒绝了使用右键单击的路，代价非常大，因此另一个方案是检查一下<code v-pre>document</code>处理程序是否阻止了浏览器的默认行为，如果这个事件得到了处理，无需再次对这个事件进行响应，因此<code v-pre>e.defaultPrevented</code>登场了</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>容器级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>按钮级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 阻止按钮事件冒泡</span>\\n    <span class=\\"token comment\\">// e.stopstopPropagation();</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'按钮上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 根据默认行为状态来处理</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">.</span>defaultPrevented<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'容器级上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>\\n<CodeDemo id=\\"code-demo-328\\" type=\\"normal\\" title=\\"defaultPrevented\\" code=\\"eJyNkMtqwkAUQH9lmE0SKHHfpln1AwrdZmOTG5oS76TTO6KIa/GFICgI7nXlWv0e4+MvnDi6M+humDlzz+G2+A/VUv7KvSip+wEy5mV+vtrks+Vhu9ite7t1fz/tHEfzfDjxKplBvhWRQH8/6J7Gq3vcFQjQq5i5/IX//mtNJEJVAyT3T4FsfkEKIQlpW+aD5bgCQ4EEDdKUYu8sVhhSIpDZ4LBWYQc3k1DXMz4grqqUbOetuK6mIMm2ypqsgmoHGGBZgg59yp/E+uxGRv5pUiC6PjImgZTES5LWPcotW/Utl7fPA56ysw==\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>容器级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>按钮级上下文菜单<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'按钮级上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\ndocument<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">oncontextmenu</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">.</span>defaultPrevented<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">preventDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'容器级上下文菜单'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><h2 id=\\"事件委托\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#事件委托\\" aria-hidden=\\"true\\">#</a> 事件委托</h2>\\n<p>事件委托也叫事件代理，指的是目标元素并不处理事件，而是由父元素来处理，利用了事件冒泡机制和事件产生的事件对象来实现。这种方式减少了事件注册，节省了大量的内存，还可以为新增的子元素实现动态的事件绑定</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>body</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>father<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>h1</span><span class=\\"token punctuation\\">></span></span>子元素 1<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>h1</span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>子元素 2<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span><span class=\\"token punctuation\\">></span></span>子元素 3<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n    father<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>nodeName <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'H1'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'子元素1'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span> \\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>nodeName <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'P'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'子元素2'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>nodeName <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'SPAN'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'子元素3'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  </span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>body</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>\\n<CodeDemo id=\\"code-demo-339\\" type=\\"normal\\" title=\\"%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98\\" code=\\"eJyVj8EKgkAQhl9l2MsqhGLdahU6BB0igq5eFncqS1fTLQjxFN17hF6gW68kvUarEp6Eus18/883TEF2Ko7ImDARnj1fArCd41XPe3W7vl8Ph9l6bXDa0SGz0xbmKZcdHzG7Ab5kdqsjA7LPtV0kwSlGqazjCbPLGiMMVJIZVLeoaXEhZmedLsJcoUTNgygMDnQAWGNwPSjqc+EGjIZYimdbVJZMBC55jOC6LtC5Q82mB8AjzJRBuz+oOamTEn7wrHo1w38069V02WsafU2+LOuJlB++J4+d\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>h1</span><span class=\\"token punctuation\\">></span></span>子元素1<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>h1</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>子元素2<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span><span class=\\"token punctuation\\">></span></span>子元素3<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>nodeName <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'H1'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'子元素1'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> \\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>nodeName <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'P'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'子元素2'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> \\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>nodeName <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'SPAN'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'子元素3'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p><code v-pre>event.target</code>会返会目标的元素节点对象，可以通过判断该对象的<code v-pre>nodeName</code>或<code v-pre>class</code>来做一些事件处理</p>\\n<div class=\\"custom-container danger\\">\\n<p class=\\"custom-container-title\\">警告</p>\\n<p>事件委托应该看情况使用，不是所有的事件都应该委托，否则会产生事件误判的问题，本不应该触发的事件却被触发了</p>\\n</div>\\n\\n<CodeDemo id=\\"code-demo-351\\" type=\\"normal\\" title=\\"%E6%A0%91%E5%BD%A2%E8%8F%9C%E5%8D%95%E7%BB%83%E4%B9%A0\\" code=\\"eJzFkk1OwzAQha8ymEVaqaQ/IBYhicSiO1QhdZtNsKeNwbWL7RRQVYkDcCDEeTgIdlpCKIrUDbDK+JvnzJsnr0lhF4JEJC4FUJEbk2TEasSMAGd1nWYSIBY8jc0yl+n763PcryrPXacUu6qpGn7T7Os+tZ1hN+677w8+auGnLfxsn8f9pq1m78vj6I88tnmpec0aKb+9/EPKv5naoSnszqRHbo17mwIt+HcICTBFywVKG96XqJ+mKJBapTvBse8H3YtM+iLMGRuvnOyKG4sSnYAKTu+CHqDHkKSw9vP4rFOB0OZ6jjaUiuEkX7hJSQLB9PpyEnS3StjerIX4aMcCvZUpvxFczsOCM4bSeTw6TOm8AmwyufGu3arU+F3DalGfblSoFertdKqE0hFoZNUtWmrjz0vFpUVdsZmS9uQB+bywEZwPBg66n5PNB9SPHDo=\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span> <span class=\\"token attr-name\\">class</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>tree<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>tree<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span><span class=\\"token punctuation\\">></span></span>一<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n      <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span><span class=\\"token punctuation\\">></span></span>1<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n          <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span>(1)<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n          <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span>(2)<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n          <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span>(3)<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n          <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span>(4)<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n      <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n      <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span><span class=\\"token punctuation\\">></span></span>2<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n          <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span>(1)<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n          <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span>(2)<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n          <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span>(3)<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n      <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span><span class=\\"token punctuation\\">></span></span>二<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n      <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span><span class=\\"token punctuation\\">></span></span>1<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n          <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span>(1)<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n          <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span>(2)<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n      <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n      <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span><span class=\\"token punctuation\\">></span></span>2<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n          <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>li</span><span class=\\"token punctuation\\">></span></span>(1)<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n      <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>li</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>ul</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> tree <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'#tree'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\ntree<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>nodeName <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'SPAN'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    event<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>nextElementSibling<span class=\\"token punctuation\\">.</span>hidden <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">!</span>event<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>nextElementSibling<span class=\\"token punctuation\\">.</span>hidden<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-css line-numbers-mode\\" data-ext=\\"css\\"><pre v-pre class=\\"language-css\\"><code><span class=\\"token selector\\">.tree span:hover</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> red<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">cursor</span><span class=\\"token punctuation\\">:</span> pointer<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">font-weight</span><span class=\\"token punctuation\\">:</span> 600<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><h2 id=\\"事件构造器\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#事件构造器\\" aria-hidden=\\"true\\">#</a> 事件构造器</h2>\\n<p>HTML 中不仅提供了很多内建事件，还提供了一个事件构造器<code v-pre>Event(type, otiions)</code>来生成用于自身目的而创建的全新事件，也可以生成<code v-pre>click</code>这种内置的事件，它有两个参数：</p>\\n<ul>\\n<li><code v-pre>type</code>：事件类型，可以是<code v-pre>click</code>这样的字符串，也可以是自己定义的<code v-pre>myclick</code></li>\\n<li><code v-pre>options</code>：有两个可选属性的对象，<code v-pre>bubbles: true/false</code>，为<code v-pre>true</code>时会冒泡，<code v-pre>cancelable: true/false</code>，为<code v-pre>true</code>时会阻止默认行为。默认情况下两者都为<code v-pre>false</code></li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> event <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Event</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>自定义事件必须通过<code v-pre>elem.dispatchEvent(event)</code>来调用，换句话说，这个方法是唯一能够触发自定义事件的办法</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> event <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Event</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nelem<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispatchEvent</span><span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>对于自定义事件，应该使用<code v-pre>addEventListener</code>来处理它，而不是<code v-pre>on&lt;event&gt;</code></p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 监听 hello 事件</span>\\nelem<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// 构造自定义事件 hello</span>\\n<span class=\\"token keyword\\">let</span> event <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Event</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 触发自定义事件</span>\\nelem<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispatchEvent</span><span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h2 id=\\"自定义事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#自定义事件\\" aria-hidden=\\"true\\">#</a> 自定义事件</h2>\\n<p>对于全新的事件类型应该使用<code v-pre>CustomEvent</code>，它和<code v-pre>Event</code>没什么太多的不同，只有一点不一样，第二参数额外多了一个属性<code v-pre>detail</code>，这个属性可以传递任何自定义的信息</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>body</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>btn<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n    btn<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n      console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>detail<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// {name: \\"foo\\"}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    btn<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispatchEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CustomEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'foo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">detail</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  </span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>body</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h2 id=\\"事件的同步处理\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#事件的同步处理\\" aria-hidden=\\"true\\">#</a> 事件的同步处理</h2>\\n<p>事件是在队列中进行处理的，如果在一个事件处理过程中又触发了一个事件，那么它的处理程序会被排入队列中等待前一个事件处理完成</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>btn<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  btn<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onclick</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    btn<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispatchEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CustomEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'btn-click'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n  btn<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'btn-click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'btn-click handler'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>\\n<CodeDemo id=\\"code-demo-397\\" type=\\"normal\\" title=\\"%E5%90%8C%E6%AD%A5%E5%A4%84%E7%90%86%E7%9A%84%E4%BA%8B%E4%BB%B6\\" code=\\"eJxVjrFOw0AMhl/FuiWJVBK1I7RdEBsba5ZwZ5TAxQeJD4SqLiwggYTKwsIMPABLxesQ2r5Fr71TpQ6W7N+/P/8TUXKtxaEYnltmQ+PFw7x7/P1/mg2zoOQkeuKydR6NDF6EESgjbY3E6Y3F5v4MNUo2TRx5Q5Qc5eTb1JDUlbxyNxeWJFeG4gQmOQEUGhuO+xsvBHKqqva6YFme3Dp4THgHx7ZlU/s54A+2xCjxlx4z2AxTVzllGXQf39CH7u0FBvA3f169/yy/PrvX2S5VodQWeVq1jIS75AHdAxdyNA7svR2UBSkn+/diugayxXk5\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> button <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbutton<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onclick</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  button<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispatchEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CustomEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button-click'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 在 1 和 2 之间触发</span>\\nbutton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button-click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button-click handler'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>如果在某些情况下，这个事件是可以冒泡的，那么它将广播到<code v-pre>document</code>上，沿途触发的事件同样会被同步的方式处理，这可能不是想要的结果，最好优先处理自己的事件，只要将这个事件移动到优先处理的事件后面或者将它变成异步的事件来解决它</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  <span class=\\"token keyword\\">let</span> button <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  button<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onclick</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 异步触发</span>\\n    <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> button<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispatchEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CustomEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"button-click\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">bubbles</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n  button<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button-click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button-click handler'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>\\n<CodeDemo id=\\"code-demo-405\\" type=\\"normal\\" title=\\"%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E7%9A%84%E4%BA%8B%E4%BB%B6\\" code=\\"eJxVj7FOxDAMhl/FytJWKkUwHne3IDY2GLO0iVEDqQONA0JVFxZYeRzE8wCvQa4+nXRDpPj3//uzJ9Xz4NVKrbvEHGj79/b18/79+/G5Pt0rmlSt7mP2eGQQETZgg0kDEjdPCcfXG/RoOIxlIYaiutAk3yaQ8c485MxdIsMuUFnBpAmg9ThyebbzAkTkWzdgSFzm/ma7RzXWxceWTX/1nGkl4QtcpshhkForsZ0sDK1qmHKw6zzGFfCYEOaqEoDQznfFnN9hv9baZda1i4yEhxtkZFGDrCPxox70LdksFwtBzf8fBncH\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> button <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbutton<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onclick</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> button<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispatchEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CustomEvent</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"button-click\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">bubbles</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\nbutton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button-click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button-click handler'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><h2 id=\\"防抖和节流\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#防抖和节流\\" aria-hidden=\\"true\\">#</a> 防抖和节流</h2>\\n<p>由于用户和界面交互的太平凡，如果每一次发生的事件都要执行，就会造成性能下降，比如点了两下按钮，实际上这是误触，对应的处理函数不应该触发两次，防抖和节流就是应运而生的两种方案</p>\\n<ul>\\n<li>防抖指事件发生的一定时间段只触发一次处理函数，一旦在一定的时间段内触发，则会重新计算时间再触发处理函数</li>\\n<li>节流指的是连续触发事件但是在 n 秒中只执行一次函数</li>\\n</ul>\\n<p>下面是使用<code v-pre>mousemove</code>的例子，当鼠标在上面移动时数字会增加，第一个没有进行处理，第二个使用防抖处理，第三个使用节流处理</p>\\n\\n<CodeDemo id=\\"code-demo-430\\" type=\\"normal\\" title=\\"%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81\\" code=\\"eJytUs1u00AQfpXBHGILJ3EqNQfTREIIiQPiAjfMwV6P7aXr3bC7DglVDnDsAyCeA4lXquAt2F3/JKFVpFa1fNn5vpn5vpm58ipdMy/2LnK6BsJSpRaJl4lN4i2ji6kJLhP+UMwLPaKUKT4xAFwlHCCnasXSbQyUM8pxnDFBLp9b5AvNdRXDWRStNi5QIS0rHcPsvI9kKbkspWh4PiaCCRnD0/l87iCNGz1OGS15DAS5RunCrsftQn12URTuXQiux4p+RdvfcXZO/ScrnqE2stcKFpAL0tSm+uRzg3L7DhkSLeQLxvyRtTgKTGbCLflD9HGS5vmrtWG/oUojR+mPatEorMUaRyGghWCx7OfS5lgfL40ah8Hbps5M3h1gAM9gZnW2LadT+Pvz1831j4QXDSeaCg45ZmZUBH0bCc3TzD1ou1lLmtYoGu38S9SN5DCk+qksVccFoAX4HTswq8ZUvm9fQ9QVacsWLC2N8ieH5c162pcBFOo+2w+s/T3EG8Z6nV2ebW0rBk7bJF2t2NbXFVUhOImOZnZlfjeEP9ffb35/OxiCrqTQmj3OEHpTQ/CksYFzyLIeO2/2O+HKfrv/xmFs7u26u+x2/DrlOUN7of3SWw3ucmanzuoYdGcVwnkU2ZY94V6HfKTIt2W6G3Xz7tYx6B32c6D37JTeY/AOvYZwH73HivZ6vd0/gp66vQ==\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">class</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>box<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>0<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">class</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>box<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>0<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">class</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>box<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>0<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-css line-numbers-mode\\" data-ext=\\"css\\"><pre v-pre class=\\"language-css\\"><code><span class=\\"token selector\\">.box</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">display</span><span class=\\"token punctuation\\">:</span> inline-block<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">width</span><span class=\\"token punctuation\\">:</span> 200px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">height</span><span class=\\"token punctuation\\">:</span> 150px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">background-color</span><span class=\\"token punctuation\\">:</span> #666<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">text-align</span><span class=\\"token punctuation\\">:</span> center<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">line-height</span><span class=\\"token punctuation\\">:</span> 150px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">color</span><span class=\\"token punctuation\\">:</span> #fff<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">font-size</span><span class=\\"token punctuation\\">:</span> 20px<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> divs <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelectorAll</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'.box'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\ndivs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'mousemove'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  divs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>textContent <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span>divs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>textContent<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 防抖</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">debounce</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">func<span class=\\"token punctuation\\">,</span> delay</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> timeout<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">args</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>timeout<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">clearTimeout</span><span class=\\"token punctuation\\">(</span>timeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">let</span> flag <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">!</span>timeout<span class=\\"token punctuation\\">;</span>\\n    timeout <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> timeout <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> delay<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>flag<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 节流</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">throttle</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">func<span class=\\"token punctuation\\">,</span> delay</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> timeout<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">args</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>timeout<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      timeout <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n        timeout <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> delay<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">let</span> debounceHandle <span class=\\"token operator\\">=</span> <span class=\\"token function\\">debounce</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> divs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>textContent <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span>divs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>textContent<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">500</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\ndivs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'mousemove'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">debounceHandle</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">let</span> throttleHandle <span class=\\"token operator\\">=</span> <span class=\\"token function\\">throttle</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> divs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>textContent <span class=\\"token operator\\">=</span> <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span>divs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>textContent<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">500</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\ndivs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'mousemove'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">throttleHandle</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>防抖和节流都是通过减少实际处理函数的执行来提高性能的手段，但并没有实质的减少事件的触发次数</p>\\n<p>先来看防抖函数的实现思路，将一个需要进行防抖的操作放到函数中执行，使用防抖函数进行装饰并返回装饰后的函数，在内部定义一个变量记录定时器的返回值，此时已经产生了闭包，该变量永远存在，通过对定时器的返回值进行判断，标记一个可用来执行实际操作函数的变量，便是基本的实现思路，该函数是一个立即执行的防抖函数</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">debounce</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">func<span class=\\"token punctuation\\">,</span> delay</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> timeout<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">args</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 如果有返回值就清除该定时器，重新计时，让 timeout 不为 null</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>timeout<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">clearTimeout</span><span class=\\"token punctuation\\">(</span>timeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 标记，关系着实际操作的运行</span>\\n    <span class=\\"token keyword\\">let</span> flag <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">!</span>timeout<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 在一定 delay 时间后，将 timeout 赋值为 null</span>\\n    timeout <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> timeout <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> delay<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 一旦 timeout 判断为 false 时，flag 一定为 true，此时开始执行实际操作</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>flag<span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>再来看节流函数的实现思路，依然是装饰器加闭包的定时器原理来实现</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">throttle</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">func<span class=\\"token punctuation\\">,</span> delay</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> timeout<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">args</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 如果 timeout 取反判断为 true，则执行一次实际操作</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>timeout<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      timeout <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 在一定 delay 时间设置 timeout 为 null，让下一次事件触发实际操作</span>\\n        timeout <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> delay<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h2 id=\\"鼠标事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#鼠标事件\\" aria-hidden=\\"true\\">#</a> 鼠标事件</h2>\\n<p>鼠标左键被按下时，会首先触发<code v-pre>mosedown</code>，左键被释放后，会触发<code v-pre>mouseup</code>和<code v-pre>click</code>，在单个动作触发多个事件时，事件的顺序是固定的</p>\\n<p>与点击相关的事件都会有<code v-pre>button</code>属性，这个属性允许获得确切的鼠标按钮，通常不在<code v-pre>click</code>和<code v-pre>contextmenu</code>事件中使用这个属性，因为它们分别只能被鼠标左键和右键所触发</p>\\n<p>只有在<code v-pre>mousedown</code>和<code v-pre>mouseup</code>事件中才会用到这个属性，因为这两个事件会在任何按键上触发，对于<code v-pre>event.button</code>的值可能如下：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>按键状态</th>\\n<th>event.button</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>左键</td>\\n<td>0</td>\\n</tr>\\n<tr>\\n<td>中键</td>\\n<td>1</td>\\n</tr>\\n<tr>\\n<td>右键</td>\\n<td>2</td>\\n</tr>\\n<tr>\\n<td>后退键</td>\\n<td>3</td>\\n</tr>\\n<tr>\\n<td>前进键</td>\\n<td>4</td>\\n</tr>\\n</tbody>\\n</table>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>大多数鼠标只有左键和右键</p>\\n</div>\\n\\n<CodeDemo id=\\"code-demo-517\\" type=\\"normal\\" title=\\"event.button\\" code=\\"eJyrVsooyc1RslKySSotKcnPs3vetPNp++5nHRNt9KEiMXlKOkpZxUA1OaklChBBBVuFlPzk0tzUvBK9wtLUosrg1JzU5JL8Ig11iAJ1TeuYPAhTLzElxbUMqNIns7gkNS8VqCY5JzM5W11HIRUkrGBrp1Adk6egkJiTWlSiARbTg2gFGVKL16Tc/NLi1JT88jzqmVZaQIpZSrUAiAJ2iw==\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> button <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbutton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>button<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbutton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'mousedown'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>button<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbutton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'mouseup'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>button<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>甚至，所有的鼠标事件都包含按下的组合键的信息：</p>\\n<ul>\\n<li><code v-pre>shiftKey</code>：Shift 键</li>\\n<li><code v-pre>altKey</code>：Alt 键</li>\\n<li><code v-pre>ctrlKey</code>：Ctrl 键</li>\\n<li><code v-pre>metaKey</code>：Win 键</li>\\n</ul>\\n<p>如果在鼠标事件期间按下了对应的键，则它的值为<code v-pre>true</code>，比如下面的示例中，按下三个键（Ctrl，Shift，Alt）才会触发弹框</p>\\n\\n<CodeDemo id=\\"code-demo-549\\" type=\\"normal\\" title=\\"%E7%BB%84%E5%90%88%E9%94%AE\\" code=\\"eJyrVsooyc1RslKySSotKcnPs3vetPNp++5nHRNt9KEiMXlKOkpZxUA1OaklChBBBVuFlPzk0tzUvBK9wtLUosrg1JzU5JL8Ig11iAJ1TeuYPAhTLzElxbUMqNIns7gkNS8VqCY5JzM5W11HIRUkrGBrp1Adk6egkJmmARbQK87ITCvxTq1UUIOo0EsuKcpB5ifmgKQ1IdoUFBJzUotKNNSf7Oh8OWXd0wkdzyctf7+n5+mSlU92dD+bvuDZ1B6wcxQUamPyakEspVoAJehiLg==\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>button</span><span class=\\"token punctuation\\">></span></span>点击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>button</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> button <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'button'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nbutton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token parameter\\">event</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>event<span class=\\"token punctuation\\">.</span>shiftKey <span class=\\"token operator\\">&amp;</span> event<span class=\\"token punctuation\\">.</span>ctrlKey <span class=\\"token operator\\">&amp;</span> event<span class=\\"token punctuation\\">.</span>altKey<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'三键合璧，天下无敌'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>所有的鼠标事件对象都提供了两种形式的坐标：</p>\\n<ul>\\n<li>相对于窗口：<code v-pre>clienX</code>和<code v-pre>clienY</code></li>\\n<li>相对于文档：<code v-pre>pageX</code>和<code v-pre>pageY</code></li>\\n<li>相对于元素：<code v-pre>offsetX</code>和<code v-pre>offsetY</code></li>\\n<li>相对于屏幕：<code v-pre>screenX</code>和<code v-pre>screenY</code></li>\\n</ul>\\n\\n<CodeDemo id=\\"code-demo-578\\" type=\\"normal\\" title=\\"%E9%BC%A0%E6%A0%87%E5%9D%90%E6%A0%87\\" code=\\"eJyrVsooyc1RslKyycwrKC1RyM/LzS8tTs3NL0u1jVEqycgs1itLzClNtU0tS80r0UvOyQRSEQraCuo6CupAClk4MkZJAaI4Run58t1Pu1a83LPg2YL2Z1u7X6yf+nTuBCA7RskuJk+pFgByNjGS\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onmousemove</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token operator\\">=</span>event<span class=\\"token punctuation\\">.</span>clientX <span class=\\"token operator\\">+</span> <span class=\\"token string\\">', '</span> <span class=\\"token operator\\">+</span> event<span class=\\"token punctuation\\">.</span>clientY</span><span class=\\"token punctuation\\">\\"</span></span></span> <span class=\\"token attr-name\\">value</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>移动鼠标测试坐标<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></CodeDemo><p>有时候双击鼠标会有一些副作用，可能会出现选择文本的干扰</p>\\n\\n<CodeDemo id=\\"code-demo-584\\" type=\\"normal\\" title=\\"%E5%8F%8C%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%B9%B6%E9%80%89%E6%8B%A9%E6%96%87%E6%9C%AC\\" code=\\"eJyrVsooyc1RslKyScksU8jPS0nKSc7JTM62jVFKzEktKtFQT8kvTcpJVQCLqmvGKNk97e952r77WcdEG32gHruYPKVaAIMKGs8=\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">ondblclick</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'double click'</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>双击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></CodeDemo><p>甚至有时按下不松开并移动鼠标也会造成文本选择的干扰，为了避免这些情况，最合理的方法是在<code v-pre>mousedown</code>上进行处理</p>\\n\\n<CodeDemo id=\\"code-demo-590\\" type=\\"normal\\" title=\\"%E5%8F%8C%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%B9%B6%E4%B8%8D%E9%80%89%E6%8B%A9%E6%96%87%E6%9C%AC\\" code=\\"eJyrVsooyc1RslKyScksU8jPS0nKSc7JTM62jVFKzEktKtFQT8kvTcpJVQCLqmvGKAEV5eaXFqem5JfnAVUVpZaUFuUppCXmFKfGKNk97e952r77WcdEG32ggXYxeUq1APMCJbE=\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">ondblclick</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'double click'</span><span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">\\"</span></span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onmousedown</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>双击我<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></CodeDemo><p>这里虽然解决了问题，但是文本却无法被选中了，其实并不是无法选中，而是要在文本本身以外的地方开始选中，从文本本身开始选中时自然会失效</p>\\n<p>如果想要保护页面的内容不被复制，可以使用<code v-pre>copy</code>事件来处理，对于开发者来说，肯定是可以打开调试工具来访问源码进行复制，但是大多数人是不知道的</p>\\n\\n<CodeDemo id=\\"code-demo-599\\" type=\\"normal\\" title=\\"copy%20%E4%BA%8B%E4%BB%B6\\" code=\\"eJyrVsooyc1RslKyScksU8jPS84vqLSNUUrMSS0q0VB/unfy85Zt7/f0PNm74NmM9U929D7tX/+iee/TJb1PO7Y965jwtGv+81kt6prWRaklpUV5CmmJOcWpMUp2L/bPfNneA5R62tb6dN1OoN4Xi1Y/X9b4bO0iiF6glI0+0Eq7mDylWgATqEiq\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">oncopy</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>alert('当然，你是不可能复制成功的');return false<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>这里的内容是被禁止复制的<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></CodeDemo><p>当鼠标从元素身上移动时就会触发对应的移动事件，移动到某个元素上时就会触发<code v-pre>mouseover</code>，而离开某个元素时就会触发<code v-pre>mouseout</code></p>\\n<p>这些事件都有一个特殊的<code v-pre>relatedTarget</code>属性，这是对<code v-pre>target</code>的补充。当从一个元素是上离开到另一个元素时，其中一个元素就是<code v-pre>target</code>，另一个就变成了<code v-pre>relatedTarget</code>，对于<code v-pre>mouseover</code>和<code v-pre>mouseout</code>来说，<code v-pre>target</code>和<code v-pre>relatedTarget</code>是互相相反的</p>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p><code v-pre>relatedTarget</code>的取值是可能为<code v-pre>null</code>的，不一定总是页面上的某个元素的引用，鼠标如果来自窗口外，或者离开了窗口，就会产生这种现象，因此对于<code v-pre>relatedTarget</code>要记住这个特性，以免发生错误</p>\\n</div>\\n<p><code v-pre>mousemove</code>用来响应鼠标移动的事件，浏览器会一直检查鼠标的位置，如果发现了变化，就会触发<code v-pre>mousemove</code>，但是这并不意味着每一个像素变化都会触发，如果在非常快速地情况下移动鼠标，某些元素就很有可能被跳过，这对性能有很大的好处，并不需要在每个元素上处理进入和离开的过程</p>\\n<p>还有一个特别重要的特性就是，快速移动鼠标的情况下，元素可能被忽略掉，如果正式的进入了一个元素产生了<code v-pre>mouseover</code>，那么必然会产生一个<code v-pre>mouseout</code></p>\\n<p>还有一个触发<code v-pre>mouseout</code>的地方就是出现在嵌套元素的身上，当鼠标从元素移动到后代时就会触发，其实指针并没有移出元素之外，但是在后代元素上触发了这个事件</p>\\n<p>这是因为浏览器的逻辑是，指针随时都可以位于单个元素上，如果是嵌套元素就一定是<code v-pre>z-index</code>最大的那个，因此移动到另一个后代元素，代表着离开了当前元素</p>\\n<p>此外，还有一个非常重要的细节，后代的<code v-pre>mouseover</code>会冒泡，因此父级元素如果有<code v-pre>mouseover</code>处理程序也会被触发，这可能不是一个好现象，因为指针仍然在父元素内，只不过更深入了而已</p>\\n<p><code v-pre>mouseenter/mouseleave</code>和<code v-pre>mouseover/mouseout</code>相同，但是它们有一些重要的区别：</p>\\n<ul>\\n<li>元素内部与后代之间的转换不会受到影响</li>\\n<li>不会冒泡</li>\\n</ul>\\n<p>这非常好，只有进入一个元素时才会触发<code v-pre>mouseenter</code>，而鼠标在当前元素以及后代中的位置并不重要，只有当真正移出元素范围时才触发<code v-pre>mouseenter</code>，但是它们无法作用于事件委托，这也是一个不好的方面</p>\\n<p>这是使用<code v-pre>mouseover/mouseout</code>进行事件委托的表格高亮示例</p>\\n\\n<CodeDemo id=\\"code-demo-649\\" type=\\"normal\\" title=\\"%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E7%9A%84%E5%BA%94%E7%94%A8\\" code=\\"eJx9UM1SgzAQfpUdPNDOKFJ/Loh9Ca9cIFkpNmQx2SidTt/dJaCO1fGS/ft+dnNMdtybpEhKrhuD28oClOxinDK93ZTX8n7XN1+1JDPwJ+H2jHB3TpCweCWXyYsXc4MMsQePoEmFHi1nrwHd4QkNKia3SuM8XT9UtrIxz8j2FDzSGzrhPQeruCMLK1zDcbJTZD0JzlC7woxr1yJPfIDPKvN8EEBTq33rKFgtOunQ2X0qsNNvp8B/Gv0rt0jJqcpPt853sp6pDTmNroDNMIIs22m4yPM8Lvnead7J5D4fxthgHPmqNl1rC1DyQ+hiWwXnSSQG6pbeZHf6ALl/nPw=\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>table</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>tr</span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>td</span><span class=\\"token punctuation\\">></span></span>1<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>td</span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>td</span><span class=\\"token punctuation\\">></span></span>2<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>td</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>tr</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>tr</span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>td</span><span class=\\"token punctuation\\">></span></span>3<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>td</span><span class=\\"token punctuation\\">></span></span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>td</span><span class=\\"token punctuation\\">></span></span>4<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>td</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>tr</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>table</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> table <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'table'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\ntable<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onmouseover</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  e<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>background <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'pink'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\ntable<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onmouseout</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  e<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">.</span>background <span class=\\"token operator\\">=</span> <span class=\\"token string\\">''</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-css line-numbers-mode\\" data-ext=\\"css\\"><pre v-pre class=\\"language-css\\"><code><span class=\\"token selector\\">table td</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">border</span><span class=\\"token punctuation\\">:</span> 1px solid #000<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">width</span><span class=\\"token punctuation\\">:</span> 150px<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">text-align</span><span class=\\"token punctuation\\">:</span> center<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token property\\">cursor</span><span class=\\"token punctuation\\">:</span> pointer<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><h2 id=\\"键盘事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#键盘事件\\" aria-hidden=\\"true\\">#</a> 键盘事件</h2>\\n<p>需要处理键盘行为时，就应该使用键盘事件，当按下时会触发<code v-pre>keydown</code>事件，而当释放按键时触发<code v-pre>keyup</code>事件</p>\\n<p>对于键盘事件对象来说，可以通过<code v-pre>key</code>来获取字符，而<code v-pre>code</code>属性允许获取物理上的按键代码</p>\\n\\n<CodeDemo id=\\"code-demo-663\\" type=\\"normal\\" title=\\"%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6%E4%B8%8A%E7%9A%84%E4%BF%A1%E6%81%AF\\" code=\\"eJx1jkESgjAMRa+S6aYwOrhXYOMR3HZliSMKacV0lGG4gSfwLNyJK5iKW1f5+ZmX/wd15rZRW5X78or9PL3zY1daV2GUG18aymvygYF7j4VRjE82Smy1Vpe7gJWzoUXi7Baw6w/YoGXXJfpL6TRzJH8r9yAo4BTIcu0IEkxhMATwj/ZCxqi9I5azsHqpp2EFmImWqefp9au62HHZGRql3fgBr0ZQiw==\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>key：<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>br</span><span class=\\"token punctuation\\">></span></span>code：<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'input'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onkeydown</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'p'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>textContent <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'key：'</span> <span class=\\"token operator\\">+</span> e<span class=\\"token punctuation\\">.</span>key <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'，code：'</span> <span class=\\"token operator\\">+</span> e<span class=\\"token punctuation\\">.</span>code<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>如果使用不同的语言，只会导致<code v-pre>key</code>的值不一样，而<code v-pre>code</code>则始终是一样的，如果某些键没有产生字符，则<code v-pre>key</code>和<code v-pre>code</code>大致是一样的</p>\\n<p>对于一个按键如果按下足够长的时间，会一直触发<code v-pre>keydown</code>，然后释放时才转到<code v-pre>keyup</code>，对于重复触发的事件来说，事件对象的<code v-pre>repeat</code>将被设置为<code v-pre>true</code></p>\\n<p>键盘可能会触发一些不可控的变数，比如<code v-pre>Ctrl+S</code>会保存网页，但是阻止<code v-pre>keydown</code>便能阻止它，因此可以阻止大多数键盘的行为，除了少数按键以外，比如<code v-pre>Alt+F4</code>，在 Windows 上用来关闭窗口</p>\\n<h2 id=\\"滚动事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#滚动事件\\" aria-hidden=\\"true\\">#</a> 滚动事件</h2>\\n<p><code v-pre>scroll</code>事件能够对页面或元素的滚动作出反应，这是一个示例：</p>\\n\\n<CodeDemo id=\\"code-demo-682\\" type=\\"normal\\" title=\\"scroll\\" code=\\"eJyrVsooyc1RslKyKbB7unfy087e56umP+1f/HT7pme7Zz3tWvF8VsvT5v7nWxa83zPLprggMc/OQKGgwkYfzLTRL7CLyVPSUcoqBhpRnpmXkl+ul59XnFyUn5OjYKuQVpqXXJKZn6eRqqlQHZOnoJCSn1yam5pXoldYmlpUGZyak5pckl+koQ4yTV1TryS1osQ5P68EqAKoG2peQWJ6aqR/WlpxaomCtoJ6QYW6dUxeLdDaWgCJYk1y\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>当前窗口已滚动的像素：<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span><span class=\\"token punctuation\\">></span></span>0 px<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>window<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onscroll</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'span'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>textContent <span class=\\"token operator\\">=</span> window<span class=\\"token punctuation\\">.</span>pageYOffset <span class=\\"token operator\\">+</span> <span class=\\"token string\\">'px'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>不能在<code v-pre>scroll</code>事件中使用<code v-pre>e.preventDefault()</code>来阻止滚动，启动滚动的方法有很多种，但是使用 CSS 的<code v-pre>overflow</code>会更加可靠一些</p>\\n<p>滚动有以下应用场景：</p>\\n<ul>\\n<li>无限的页面</li>\\n<li>“到顶部”以及“到底部”的按钮</li>\\n<li>按需加载图像</li>\\n</ul>\\n<h2 id=\\"表单事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#表单事件\\" aria-hidden=\\"true\\">#</a> 表单事件</h2>\\n<p>表单和一些其它的控件元素有很多特殊的事件，对于文档中的表单来说，它们是<code v-pre>document.forms</code>的成员，因此可以使用这种方式来获取文档上的表单，且当有了表单后，其中的任何元素都可以使用<code v-pre>form.elements</code>来获取</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>form</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>foo<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>one<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>form</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  <span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span>forms<span class=\\"token punctuation\\">.</span>foo<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> input <span class=\\"token operator\\">=</span> foo<span class=\\"token punctuation\\">.</span>elements<span class=\\"token punctuation\\">.</span>one<span class=\\"token punctuation\\">;</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>值得一提的是，当为表单或其中的控件元素添加<code v-pre>name</code>特性后，便可以在<code v-pre>forms</code>和<code v-pre>elements</code>中直接使用<code v-pre>name</code>对应的值作为属性来引用，而不必使用一些其它的方法来定位元素</p>\\n<p>当然也可能会出现名字相同的元素，比如在单选按钮中，在这种情况下，<code v-pre>elements.name</code>将是一个集合</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>form</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>foo<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>radio<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>gender<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>radio<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>gender<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>form</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  <span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span>forms<span class=\\"token punctuation\\">.</span>foo<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> inputs <span class=\\"token operator\\">=</span> foo<span class=\\"token punctuation\\">.</span>elements<span class=\\"token punctuation\\">.</span>gender<span class=\\"token punctuation\\">;</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>inputs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// RadioNodeList(2)</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>甚至可以通过更短的方式来访问元素，直接将<code v-pre>form.elements.name</code>写成<code v-pre>form.name</code>是等效的</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>form</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>foo<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>one<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>form</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  <span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span>forms<span class=\\"token punctuation\\">.</span>foo<span class=\\"token punctuation\\">;</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>foo<span class=\\"token punctuation\\">.</span>elements<span class=\\"token punctuation\\">.</span>one <span class=\\"token operator\\">==</span> foo<span class=\\"token punctuation\\">.</span>one<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>每一个对应的元素都可以反向的引用其对应的表单，使用<code v-pre>form</code>属性</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>form</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>foo<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>one<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>form</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n  <span class=\\"token keyword\\">let</span> foo <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span>forms<span class=\\"token punctuation\\">.</span>foo<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">let</span> one <span class=\\"token operator\\">=</span> foo<span class=\\"token punctuation\\">.</span>one<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 反向引用</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>one<span class=\\"token punctuation\\">.</span>form <span class=\\"token operator\\">==</span> foo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>对于<code v-pre>&lt;input&gt;</code>来说，访问不同的<code v-pre>type</code>的<code v-pre>value</code>有所不同：</p>\\n<ul>\\n<li>type = <code v-pre>text</code>：<code v-pre>value</code></li>\\n<li>type = <code v-pre>radio</code>：<code v-pre>checked</code>（布尔值）</li>\\n</ul>\\n<p>对于<code v-pre>&lt;textarea&gt;</code>也是使用<code v-pre>value</code>来访问</p>\\n<p>对于<code v-pre>&lt;select&gt;</code>来说有三个重要的属性：</p>\\n<ul>\\n<li><code v-pre>options</code>：所有的<code v-pre>&lt;option&gt;</code>的集合</li>\\n<li><code v-pre>value</code>：当前所选择的<code v-pre>&lt;option&gt;</code>的<code v-pre>value</code></li>\\n<li><code v-pre>selectedIndex</code>：当前所选择的<code v-pre>&lt;option&gt;</code>索引编号</li>\\n</ul>\\n<p>其中有三种方式来设置<code v-pre>value</code>：</p>\\n<ul>\\n<li>将对应<code v-pre>&lt;opition&gt;</code>元素的<code v-pre>selected</code>设为<code v-pre>true</code></li>\\n<li>将<code v-pre>&lt;select&gt;</code>的<code v-pre>value</code>设置为对应<code v-pre>&lt;option&gt;</code>的<code v-pre>value</code></li>\\n<li>将<code v-pre>&lt;select&gt;</code>的<code v-pre>selectedIndex</code>设置对应<code v-pre>&lt;option&gt;</code>的索引编号</li>\\n</ul>\\n<p>当点击某个元素或使用键盘上的<code v-pre>Tab</code>选中时，该元素会获得聚焦，在 HTML 中有一个<code v-pre>autofocus</code>特性会让网页在加载完成后默认的聚焦到元素上，聚焦意味着一个元素可以接受数据，当失去焦点的时候意味着数据已经输入完毕</p>\\n<p>当元素聚焦时会触发<code v-pre>focus</code>事件，当失去焦点时会触发<code v-pre>blur</code>事件</p>\\n\\n<CodeDemo id=\\"code-demo-795\\" type=\\"normal\\" title=\\"%E7%84%A6%E7%82%B9%E4%BA%8B%E4%BB%B6\\" code=\\"eJyrVsooyc1RslKyKbB7tmnhszmdT3bvfrJ36tPW5udbFrzo2/503/TnLcueN+200S+wi8mzycwrKC1RKKksSLWNUSpJrSiJUQIKK+koZRUDTUnJTy7NTc0r0SssTS2qDE7NSU0uyS/SUAfrUtfUy89LA6ooVrBVSCvNSy7JzM9T0EjVVKiOyVNQwKW3AKgPZJFzfl4JUBqoVx3ZXeoxebXWMXkxeYTtTsopLaLU6qdLNj7t241itVItAFqFhi4=\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">></span></span>没有任何元素获得焦点<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'input'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onfocus</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'p'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>textContent <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'获得焦点'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\ndocument<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'input'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onblur</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'p'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>textContent <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'失去焦点'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>焦点也会有丢失现象发生，比如<code v-pre>alert</code>会将焦点移到自己身上，那么另一个已经获得焦点的元素将失去焦点并触发<code v-pre>blur</code>，或者一个元素从 DOM 中移除，也会导致焦点丢失</p>\\n<p>大多数元素并不支持聚焦，因为它们本身并不需要接受数据，但是 HTML 特性<code v-pre>tabindex</code>可以适用到这些不支持<code v-pre>focus/blur</code>的元素身上，任何具有<code v-pre>tabindex</code>的元素都会变成可聚焦的：</p>\\n<ul>\\n<li><code v-pre>tabindex</code>接收一个负值，表示是可聚焦的，但不能通过键盘导航来访问该元素</li>\\n<li><code v-pre>tabindex</code>接收<code v-pre>0</code>，表示是可聚焦的，可以通过键盘导航来访问该元素，但是顺序是与当前处于文档中的顺序来决定的</li>\\n<li><code v-pre>tabindex</code>接收一个正值，表示是可聚焦的，可以通过键盘导航来访问该元素，但是它的访问顺序是按照<code v-pre>tabindex</code>的数值递增来决定获得焦点的顺序，如果拥有相同的数值，则按照在文档中的顺序来决定</li>\\n</ul>\\n\\n<CodeDemo id=\\"code-demo-822\\" type=\\"normal\\" title=\\"tabindex\\" code=\\"eJx1zcEKgzAMxvFXCTlPZj12zifJxbUdFlwqTTsE8d2tCB4Er/n9+bLgkH4jamyt/0PqP56tm9+EirBT7bNcO+Ir1gXrO2wKNndY7bvVOYwPNCLl/Z4txAAmRwlRwxQ8JxdfxCux/gaT5QhCTqNnp0FNM9heBmchOnuEuG4Sf0XE\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">tabindex</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>1<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>1<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">tabindex</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>0<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>0<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">tabindex</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>2<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>2<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">tabindex</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>-1<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>-1<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"></div></div><div class=\\"language-css line-numbers-mode\\" data-ext=\\"css\\"><pre v-pre class=\\"language-css\\"><code><span class=\\"token selector\\">div</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">cursor</span><span class=\\"token punctuation\\">:</span> pointer<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token selector\\">:focus</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token property\\">outline</span><span class=\\"token punctuation\\">:</span> 1px dashed red<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p><code v-pre>focus/blur</code>不支持事件冒泡，但是支持事件捕获，如果一定需要冒泡的需求，可以使用<code v-pre>focusin/foucusout</code>事件，它们和<code v-pre>focus/blur</code>完全一样，但是只能使用<code v-pre>addaddEventListener</code>处理</p>\\n<p>另外，可以使用<code v-pre>document.activeElement</code>来获取当前聚焦元素</p>\\n<p>在进行表单提交时，会触发<code v-pre>submit</code>事件，提交表单有两种方式：</p>\\n<ul>\\n<li>在<code v-pre>&lt;input&gt;</code>中按下<code v-pre>Enter</code></li>\\n<li>点击<code v-pre>&lt;input type=&quot;submit&quot;&gt;</code>或<code v-pre>&lt;input type=&quot;image&quot;&gt;</code></li>\\n</ul>\\n\\n<CodeDemo id=\\"code-demo-848\\" type=\\"normal\\" title=\\"submit%20%E4%BA%8B%E4%BB%B6\\" code=\\"eJxtjj0OgkAQha8y2QZIjPYKXsKWZsVBMfuDy6yREFpb9A5G78B50HgMd9WSYpLJe9/Mew3bkRRszuJcGwmKS0xSlmudsmWqAOJClZaA6tLrhCcaNQrJtzjqVHYtC3cERy6sF17dZehvXzae+VC3sAnbV67ERmdWoqLpwaKpVygwI23CwGNBNNXq9w0SyK3KqNAKQoyg8bFcoKEw+BPvx/3ZXYf+HEQL7xokaxTkXFTohNYNaz9A9lvS\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>form</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>foo<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>image<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>submit<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">value</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>提交<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>form</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">querySelector</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'form'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onsubmit</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'submit 触发了'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></CodeDemo><p>在<code v-pre>submit</code>中使用<code v-pre>return false</code>会阻止表单发送，有趣的是使用<code v-pre>Enter</code>发送表单时，会触发<code v-pre>&lt;input type=&quot;submit&gt;</code>一次<code v-pre>click</code>事件，真很有趣</p>\\n<p>如果要手动将表单提交到服务器，可以调用<code v-pre>form.submit</code>方法，它不会产生<code v-pre>submit</code>事件，会向<code v-pre>form.action</code>的值所指向的服务器进行<code v-pre>form.method</code>方式提交</p>\\n<h2 id=\\"数据更新事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#数据更新事件\\" aria-hidden=\\"true\\">#</a> 数据更新事件</h2>\\n<p>对于元素来说，产生的更改也会触发相应的事件</p>\\n<ul>\\n<li><code v-pre>change</code></li>\\n<li><code v-pre>input</code></li>\\n</ul>\\n<p><code v-pre>change</code>事件可以在<code v-pre>&lt;input&gt;</code>失去焦点后触发，但是数据状态必须已经发生改变</p>\\n\\n<CodeDemo id=\\"code-demo-879\\" type=\\"normal\\" title=\\"%E5%A4%B1%E5%8E%BB%E7%84%A6%E7%82%B9\\" code=\\"eJyrVsooyc1RslKyycwrKC1RKKksSLWNUSpJrSiJUVLIz0vOSMxLB4kk5qQWlWiUZGQW65Ul5pSmasYo2cXkKdUCAPGwFsw=\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token special-attr\\"><span class=\\"token attr-name\\">onchange</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span><span class=\\"token value javascript language-javascript\\"><span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span></span><span class=\\"token punctuation\\">\\"</span></span></span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></CodeDemo><p>对于<code v-pre>&lt;select&gt;</code>，以及<code v-pre>&lt;input&gt;</code>的<code v-pre>type</code>为<code v-pre>checkbox/radio</code>时，会在选项更改后立即触发</p>\\n<p>还有一个<code v-pre>input</code>事件只要监测到数据改变了就会触发，无论是键盘上的数据，还是鼠标粘贴等改变数据的操作，如果想要处理输入值的每次更改，这个事件是最好的选择，另外，该事件不会在不涉及值更改的输入上触发，比如方向键</p>\\n<h2 id=\\"剪切板事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#剪切板事件\\" aria-hidden=\\"true\\">#</a> 剪切板事件</h2>\\n<p>剪切板是界面中最常用的操作之一，IE 是最早支持的，随着 HTML5 到来，剪切板事件已经纳入了标准</p>\\n<p>剪切板事件是当发生复制/粘贴/剪切操作时触发的事件，分别是<code v-pre>copy</code>，<code v-pre>paste</code>，<code v-pre>cut</code></p>\\n\\n<CodeDemo id=\\"code-demo-897\\" type=\\"normal\\" title=\\"%E5%89%AA%E5%88%87%E6%9D%BF%E4%BA%8B%E4%BB%B6\\" code=\\"eJyrVsooyc1RslKyycwrKC1RKKksSLWNUSpJrSiJUVLIz0vOL6gE8hNzUotKNFLLUvNK9EBKNMGSBYnFJSDV2GWTS0uwy9nF5CnVAgBAoir7\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">oncopy</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>alert(event.type)<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">onpaste</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>alert(event.type)<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">oncut</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>alert(event.type)<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></CodeDemo><p>如果想要访问剪切板上的数据，可以使用<code v-pre>ClipboardEvent</code>类的方法，比如<code v-pre>event.clipboardData.getData('text/plain')</code>用于获取对应的数据</p>\\n\\n<CodeDemo id=\\"code-demo-903\\" type=\\"normal\\" title=\\"%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE\\" code=\\"eJwljEEKg0AQBL+yzGWVgLlLklOesZdJHHRhHQdtRRH/rouXbiiK2qlDn6imV1Sb4bCZvANBVgRygxpPyICTjChkEUWVHfdwvvbX3uifov0GHpsvg6tWkL/wOfO0xFF9WQb6BKXjBN1UJvk=\\">\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">onpaste</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>alert(event.type + ':' + event.clipboardData.getData('text/plain'))<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></CodeDemo><p><code v-pre>event.clipboardData</code>可以读写剪切板中的数据，但是在规范中有很多方法可以用于不同的数据类型，而不仅仅是文本</p>\\n<p>要访问剪切板中的数据，可以通过 clipboard 对象，它由 navigator.clipboard 返回，所有的操作都通过这个对象进行</p>\\n<p>由于用户可能会将敏感数据放在剪切板，涉及到浏览器外的操作系统，所以这个 API 的安全限制比较多，调用的时候必须明确获得用户的许可，“写入权限”会自动授予，但是“读取权限”必须被明确授予，也就是说在进行读取操作的时候，浏览器会弹一个对话框询问用户是否同意</p>\\n<p>clipboard 提供了四个方法用于读写剪切板，他们都是异步方法，返回 promise 对象</p>\\n<ul>\\n<li>readText() 用于读取剪切板中的文本信息</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>navigator<span class=\\"token punctuation\\">.</span>clipboard<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">readText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><ul>\\n<li>read() 读取剪切板中的数据，可以是文本也可以是二进制</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>navigator<span class=\\"token punctuation\\">.</span>clipboard<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><h2 id=\\"文档事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#文档事件\\" aria-hidden=\\"true\\">#</a> 文档事件</h2>\\n<p>HTML 有三个非常重要的生命周期事件：</p>\\n<ul>\\n<li><code v-pre>DOMContentLoaded</code>：已经完全加载了 HTML，并构建了 DOM 树，但是图像、样式表之类的外部资源可能没有加载完成</li>\\n<li><code v-pre>load</code>：不仅加载完了 HTML，还加载完了所有的外部资源</li>\\n<li><code v-pre>beforeunload/unload</code>：当用户离开页面时</li>\\n</ul>\\n<p><code v-pre>DOMContentLoaded</code>事件发生在<code v-pre>document</code>身上，必须使用<code v-pre>addEventListener</code>来处理它，<code v-pre>DOMContentLoaded</code>可以在文档加载完毕后触发，所以在这里可以访问任何元素，包括<code v-pre>&lt;img&gt;</code>，但是它不会等待图片加载，此时无法访问图片的大小</p>\\n<p>如果文档在加载的时候遇到了<code v-pre>&lt;script&gt;</code>，就会等待这个脚本执行完成后继续加载，因为脚本可能需要修改 DOM，所以<code v-pre>DOMContentLoaded</code>会等待它执行结束，这说明脚本会堵塞文档的加载</p>\\n<p>虽然<code v-pre>DOMContentLoaded</code>不会等待外部样式表，但是如果样式表后有一个脚本，那么脚本会等待样式表加载完成，同时 HTML 在等待脚本以及前面的样式表加载完成，因为脚本可能会访问一些样式相关的属性，这导致脚本必须等待</p>\\n<p>当整个页面的资源被加载完成后，包括图片，外部样式等，才会触发<code v-pre>window</code>上的<code v-pre>load</code>事件，如果绑定到元素上会在元素加载完成后触发，<code v-pre>window.onload</code>始终是最后触发的</p>\\n<p>当离开了这个页面就会触发<code v-pre>unload</code>，通常用来关闭页面的时候去做些什么事情，比如发送一些数据，但是由于页面已经被卸载，所有就无法接收响应，同时一些弹框方法也是失效的，但是如果在这里处理一些同步的的操作就会导致关闭会有延迟，而<code v-pre>beforeunload</code>则可以在页面离开前提示用户是否确定离开，相比<code v-pre>unload</code>多了一个确认的步骤，<code v-pre>beforeunload</code>会阻止<code v-pre>unload</code>事件的执行，并且优先执行</p>\\n<p>如果想在页面关闭时发送数据，可以使用<code v-pre>navigator.sendBeacon(url, data)</code>方法，它会在后台发送数据，即使离开了页面也不会影响它的执行，请求方式是 POST，通常可以发送一些字符串化的对象</p>\\n<p>对于文档的加载状态是有迹可循的，<code v-pre>document.readyState</code>反映了文档的加载状态：</p>\\n<ul>\\n<li><code v-pre>loading</code>：正在加载中</li>\\n<li><code v-pre>interactive</code>：文档已经加载完成</li>\\n<li><code v-pre>complete</code>：文档中的所有资源均加载完成</li>\\n</ul>\\n<p>还有一个<code v-pre>readystatechange</code>事件，会在状态改变时触发</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code>console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>document<span class=\\"token punctuation\\">.</span>readyState<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 'loading'</span>\\ndocument<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'readystatechange'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>document<span class=\\"token punctuation\\">.</span>readyState<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 'interactive' ,,, 'complete'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><h2 id=\\"加载脚本\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#加载脚本\\" aria-hidden=\\"true\\">#</a> 加载脚本</h2>\\n<p>现在的脚本往往比 HTML 本身更大，处理的时间更加久，上面说过脚本会堵塞页面的加载，对于外部的脚本来说也是如此，必须等待下载完，并执行结束后才能继续加载文档，这会导致一些问题：</p>\\n<ul>\\n<li>脚本不能访问身后的文档元素</li>\\n<li>如果有一个非常笨重的脚本，会严重的堵塞页面的加载，造成体验问题</li>\\n</ul>\\n<p>对于这种问题的解决办法是将脚本置于文档底部，这时就可以处理页面上的元素，而且不会堵塞页面</p>\\n<div class=\\"language-html line-numbers-mode\\" data-ext=\\"html\\"><pre v-pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>body</span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token comment\\">&lt;!-- 所有的文档内容 --></span>\\n  <span class=\\"token comment\\">&lt;!-- ...... --></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span><span class=\\"token punctuation\\">></span></span><span class=\\"token script\\"></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">></span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>body</span><span class=\\"token punctuation\\">></span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>但这不是最完美的，如果文档非常长，脚本被延后到最后处理，会产生明显的延迟，对于网速较快的人来说感知不明显，但是对于慢网速的人来说就有点难受</p>\\n<p>但是<code v-pre>script</code>有两个特性可以解决这个问题：</p>\\n<ul>\\n<li><code v-pre>defer</code>：告诉浏览器不需要等待脚本，继续处理文档，脚本会在旁边自动下载，等待文档处理完成后才会执行，并且保持相对顺序的依次执行，这对于需要依赖的脚本有用</li>\\n<li><code v-pre>async</code>：告诉浏览器不需要等待脚本，继续处理文档，但是<code v-pre>async</code>脚本之间没有顺序可言，当下载完后就立即执行了，是一个完全独立运行的脚本</li>\\n</ul>\\n<p><code v-pre>DOMContentLoaded</code>事件会在<code v-pre>defer</code>脚本全部执行完后，才会触发，对于<code v-pre>async</code>脚本来说，它可能先触发也可能后触发</p>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p><code v-pre>defer</code>仅适用于具有<code v-pre>src</code>属性的外部脚本，否则就会忽略<code v-pre>defer</code></p>\\n</div>\\n<p>除此之外有一个动态添加脚本的方式，就是使用 JavaScript 动态的创建一个脚本，并追加到文档中，当被追加到文档后就会立即执行，此时这个脚本：</p>\\n<ul>\\n<li>是异步的，不会等待其它东西，也不会有东西等待它</li>\\n<li>先加载完成的脚本先执行</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre v-pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> script <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createElement</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'script'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nscript<span class=\\"token punctuation\\">.</span>src <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'jinqiu.wang/foo.js'</span><span class=\\"token punctuation\\">;</span>\\ndocument<span class=\\"token punctuation\\">.</span>body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>script<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>对于这种脚本的创建方式，必须等到加载完成后才能调用其中的函数，但是还好<code v-pre>load</code>事件能够帮助我们，它会在脚本加载完成后触发，因此可以使用脚本中的变量、函数等等</p>\\n<p>如果一个脚本加载失败了，会触发一个<code v-pre>error</code>事件，对于失败信息无法获取更多，只能通过这种方式知道脚本加载失败了</p>\\n<p><code v-pre>load</code>和<code v-pre>eroor</code>事件也适用于其它具有<code v-pre>src</code>属性的外部资源</p>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>对于<code v-pre>&lt;img&gt;</code>来说，必须获得<code v-pre>src</code>才能够被开始加载，而<code v-pre>&lt;ifrma&gt;</code>不管加载成功还是失败都会触发<code v-pre>load</code>事件</p>\\n</div>\\n<h2 id=\\"触摸事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#触摸事件\\" aria-hidden=\\"true\\">#</a> 触摸事件</h2>\\n<h2 id=\\"全屏\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#全屏\\" aria-hidden=\\"true\\">#</a> 全屏</h2>\\n<p>如果想要以全屏的方式展示一个元素，可以调用<code v-pre>elem.requestFullscreen()</code>方法，同样使用<code v-pre>document.exitFullscreen()</code>来退出全屏，对于用户来说也可以使用自己的方式来退出（F11 或 ESC）</p>\\n<p>全屏和退出全屏都会触发一次<code v-pre>fullscreenchange</code>事件</p>\\n<p><code v-pre>document.fullscreenElement</code>可以获取全屏元素，以此来判断是否为全屏状态</p>\\n<div class=\\"custom-container tip\\">\\n<p class=\\"custom-container-title\\">提示</p>\\n<p>无法在网页加载后立即进入全屏状态，必须在事件处理中调用</p>\\n</div>\\n<h2 id=\\"页面可见\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#页面可见\\" aria-hidden=\\"true\\">#</a> 页面可见</h2>\\n<h2 id=\\"服务端事件\\" tabindex=\\"-1\\"><a class=\\"header-anchor\\" href=\\"#服务端事件\\" aria-hidden=\\"true\\">#</a> 服务端事件</h2>\\n<p><a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events<ExternalLinkIcon/></a></p>\\n","headers":[{"level":2,"title":"事件处理的实现","slug":"事件处理的实现","link":"#事件处理的实现","children":[]},{"level":2,"title":"删除事件","slug":"删除事件","link":"#删除事件","children":[]},{"level":2,"title":"事件对象","slug":"事件对象","link":"#事件对象","children":[]},{"level":2,"title":"事件流","slug":"事件流","link":"#事件流","children":[]},{"level":2,"title":"阻止事件","slug":"阻止事件","link":"#阻止事件","children":[]},{"level":2,"title":"事件委托","slug":"事件委托","link":"#事件委托","children":[]},{"level":2,"title":"事件构造器","slug":"事件构造器","link":"#事件构造器","children":[]},{"level":2,"title":"自定义事件","slug":"自定义事件","link":"#自定义事件","children":[]},{"level":2,"title":"事件的同步处理","slug":"事件的同步处理","link":"#事件的同步处理","children":[]},{"level":2,"title":"防抖和节流","slug":"防抖和节流","link":"#防抖和节流","children":[]},{"level":2,"title":"鼠标事件","slug":"鼠标事件","link":"#鼠标事件","children":[]},{"level":2,"title":"键盘事件","slug":"键盘事件","link":"#键盘事件","children":[]},{"level":2,"title":"滚动事件","slug":"滚动事件","link":"#滚动事件","children":[]},{"level":2,"title":"表单事件","slug":"表单事件","link":"#表单事件","children":[]},{"level":2,"title":"数据更新事件","slug":"数据更新事件","link":"#数据更新事件","children":[]},{"level":2,"title":"剪切板事件","slug":"剪切板事件","link":"#剪切板事件","children":[]},{"level":2,"title":"文档事件","slug":"文档事件","link":"#文档事件","children":[]},{"level":2,"title":"加载脚本","slug":"加载脚本","link":"#加载脚本","children":[]},{"level":2,"title":"触摸事件","slug":"触摸事件","link":"#触摸事件","children":[]},{"level":2,"title":"全屏","slug":"全屏","link":"#全屏","children":[]},{"level":2,"title":"页面可见","slug":"页面可见","link":"#页面可见","children":[]},{"level":2,"title":"服务端事件","slug":"服务端事件","link":"#服务端事件","children":[]},{"level":2,"title":"振动","slug":"振动","link":"#振动","children":[]}],"git":{"createdTime":1646459606000,"updatedTime":1662612185000,"contributors":[{"name":"JQiue","email":"861947542@qq.com","commits":4}]},"readingTime":{"minutes":32.34,"words":9702},"autoDesc":true,"localizedDate":"2022年3月5日","filePathRelative":"webapi/event.md"}`);export{n as data};
