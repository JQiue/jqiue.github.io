import{ac as n,A as s,B as a,ae as e}from"./framework.a879f165.js";const t={},c=e(`<p>C 中的变量和函数都有两种属性：数据类型和数据存储类型</p><p>数据的存储类型可以划分为两大类型：静态存储和动态存储，具体包括<code>auto</code>、<code>static</code>、<code>extern</code>、<code>register</code>这四种类型</p><p>数据存储类型主要用于描述变量存储的作用域、可见性、生命周期，它可以帮助我们在程序运行期间追踪特定变量的存在</p><ul><li>作用域：作用域分为局部作用域和全局作用域</li><li>可见性：</li><li>生命周期</li><li>初始值</li></ul><h2 id="auto" tabindex="-1"><a class="header-anchor" href="#auto" aria-hidden="true">#</a> auto</h2><p>在函数或块中声明的所有变量的如果没有进行特殊类型声明，则默认类型都是<code>auto</code>，它会在函数调用的时候分配内存，在调用结束后被释放掉</p><h2 id="static" tabindex="-1"><a class="header-anchor" href="#static" aria-hidden="true">#</a> static</h2><p>使用<code>static</code>声明的变量会在程序开始的时候初始化，然后一直保留着程序结束，但是它的作用域取决于它定义的位置，所以又分为局部静态变量和全局静态变量</p><ul><li>定义在函数内，函数外不能访问</li><li>定义在函数外，对该文件内所见，但不能被其他文件访问</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以静态变量在被函数调用完毕时并不会消失，会一直保留着状态在内存中</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>静态变量会自动初始化为<code>0</code></p></div><h2 id="register" tabindex="-1"><a class="header-anchor" href="#register" aria-hidden="true">#</a> register</h2><p>使用<code>register</code>定义的变量会保存在 CPU 的通用寄存器内，由于寄存器的读写速度比内存快很多，所以变量的数据读取也很快</p><p>但是寄存器是有限的，不可能定义太多寄存器变量，当寄存器用完时，定义寄存器类型的变量会自动变为自动变量</p><h2 id="extern" tabindex="-1"><a class="header-anchor" href="#extern" aria-hidden="true">#</a> extern</h2><p>我们知道，C 的变量遵循“先声明，后引用”的使用方式，那么外部变量可以帮助打破这种做法</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 只是声明一下</span>
  <span class="token keyword">extern</span> <span class="token keyword">int</span> foo<span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 真正的定义在这</span>
<span class="token keyword">int</span> foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，外部变量不能声明的同时初始化，否则无法编译通过。另外需要注意的一点是，它的作用域也取决于声明位置</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>存储说明符|存储位置|初始化值|作用域|生命周期 auto|栈|垃圾值|块|块的结束 extern|静态|0|所有的文件|程序的结束 static|静态|0|块|程序的结束 register|寄存器|垃圾值|块|块的结束</p>`,21),p=[c];function o(i,l){return s(),a("div",null,p)}const d=n(t,[["render",o],["__file","storage.html.vue"]]);export{d as default};
